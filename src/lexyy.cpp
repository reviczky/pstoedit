
#line 3 "f:\\pstoedit\\devbase\\src\\lexyy.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 75
#define YY_END_OF_BUFFER 76
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[979] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   76,   60,   60,   60,   60,   60,   60,   60,
        1,   60,   60,   60,   60,   60,   74,   74,   74,    1,
       74,   74,   74,   74,   74,   74,   60,   60,    1,   74,
        6,    4,    6,    1,    5,    5,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   41,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    1,    1,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    1,
        1,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   25,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   72,    0,    0,    0,    0,    0,   66,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       22,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       73,    0,   67,    0,   62,    0,   61,    0,   65,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       57,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    9,    0,    0,    0,   68,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       63,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   47,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   69,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    8,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   16,    0,
        0,    0,    0,    0,    0,    0,   41,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   64,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   58,    0,    0,    0,
        0,    0,    0,    0,    0,   18,    0,    0,    0,    0,
        0,    0,    0,   11,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,   70,
        0,    0,    0,    0,    0,   50,    0,    0,    0,    0,
        0,    0,    0,    0,   24,    0,    0,    0,    0,   40,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   59,    0,    0,    0,   15,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   71,    0,
        0,    0,   52,    0,    0,    0,   49,    0,    0,    0,
        0,   45,    0,    0,    0,   23,    0,    0,   36,   39,
        0,    0,    0,    0,    0,    0,    0,    0,   13,    0,

        0,    0,    0,    0,    0,    0,   20,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   28,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   46,    0,    0,
       51,    0,    0,    0,    0,   39,    0,    0,    0,   33,
        0,   31,    0,    0,    0,   38,    0,    0,    0,   14,
        0,    0,    0,    0,    0,   21,    0,    0,   12,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   56,
        0,    0,    0,    0,    0,    0,    0,    0,   48,    0,
        0,   53,    0,    0,    0,   37,    0,    0,    0,    0,
        0,    0,    0,    0,   19,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    3,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   32,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       27,    0,    0,   29,    0,    0,    0,   54,    0,    0,
        0,   10,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   10,    0,    0,   11,    0,    0,   26,
        0,    0,   10,    0,    0,    0,   43,    0,    0,    0,
        0,    0,    0,    0,   10,    0,    0,    0,    0,    0,

       44,    0,    0,    7,    0,    0,    0,   34,    0,    0,
        0,   42,    0,    0,   17,    0,    0,    0,    0,    0,
        0,    0,   30,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   12,    0,    0,    0,    0,    0,    2,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   10,    0,    0,    0,
        0,   55,    0,    0,    0,    0,   10,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   35,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    1,    1,    1,    5,    1,    1,    6,
        7,    1,    1,    1,    8,    9,    1,    9,    9,   10,
        9,    9,    9,    9,    9,    9,    9,   11,    1,    1,
        1,    1,    1,    1,   12,   13,   14,   15,   16,   17,
       18,   12,   12,   12,   12,   12,   19,   20,   12,   21,
       12,   12,   22,   12,   12,   12,   23,   12,   12,   12,
       24,    1,   25,    1,    1,    1,   26,   27,   28,   29,

       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   12,   42,   43,   44,   45,   46,   47,   48,
       49,   50,   51,    1,   52,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[53] =
    {   0,
        1,    1,    2,    3,    1,    1,    1,    1,    1,    1,
        4,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    1,    1,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        1,    1
    } ;

static yyconst flex_int16_t yy_base[996] =
    {   0,
        0,   41,   80,  119,    6,   12, 1715, 1697,   15,   25,
     1695, 1684, 1687,   22, 3277,   33,  160,   34,   48,   50,
       57,   67,   49,   74,   75,  105, 3277, 1680,    3,   86,
       25, 1642, 1634, 1612, 1605, 1590,  103,   21,   89,   97,
     3277, 3277,  104,  112, 3277, 1620,   99,  132,  136,  137,
      141,  147,  148,  154,  165, 3277,  167,  173,  186,  196,
      198,  205,  210,  175,  200,  177,  212,  219,  226,  214,
      237,  243,  247,  253,  254,  255,  259,  261, 1614,  262,
      265,   29, 1573,  248, 1573, 1558, 1550, 1548, 1574,  126,
      211,  248,  143, 1568,  273,  280,  281,  286,  295,  301,

      303,  342,  310,  316,  324,  329,  336,  344,  334,  351,
      353,  364,  366,  305,  322,  371,  372,  379,  380,  384,
      391,  396,  398,  400,  437,  402, 1523, 1520, 1505, 1512,
     1513, 1503, 1505, 1494, 1477, 1497,  409,  385,  250, 1464,
      413,  422,  427,  431,  311,  447,  452,  459,  464,  466,
      479,  507,  418,  481,  486,  488,  495,  497,  512,  514,
      524,  535,  537,  529,  420,  429,  501,  541,  518,  545,
      552,  556,  563,  564,  438,  569,  574,  570,  575,  576,
      580,  581,  586,  599, 1468, 1464, 1459, 1452,  603, 1439,
     1438, 1441, 1469,  587,  588,  163, 1405,  590,  591,  609,

      611,  621,  628,  635,  637,  642,  644,  651,  658,  664,
      672,  677,  679,  684,  689,  691,  706,  696,  708,  713,
      714,  715,  629,  662,  721,  652,  725,  727,  729,  741,
      742,  748,  743,  750,  752,  756,  758,  762,  764,  766,
      773, 3277, 1403, 1391, 1390, 1392,  776, 3277, 1378, 1366,
     1371, 1391,  338,  777,  203, 1348,  779,  783,  789,  790,
      799,  809,  811,  817,  825,  827,  836,  843,  845,  853,
      858,  863,  865,  870,  877,  888,  890,  895,  900,  801,
      818,  871,  851,  901,  906,  910,  908,  914,  918,  916,
      922,  924,  928,  936,  938,  948,  949,  955,  956, 1355,

     1340,  796,  963,  967,  972,  977,  247,  703,  509,   83,
     1346,  978,  979,  987,  980,  988,  993, 1000, 1008, 1018,
     3277, 1036, 1023, 1028, 1038, 1043, 1045, 1054, 1059, 1061,
     1067, 1073, 1082, 1089, 1091, 1096, 1102,  994, 1001, 1029,
     1104, 1077, 1106, 1108, 1114, 1083, 1135, 1047, 1146, 1115,
     1139, 1148, 1152, 1126, 1153, 1159, 1158, 1320, 1122, 1167,
     3277, 1170, 3277, 1175, 3277, 1179, 3277, 1182, 3277, 1320,
     1299,  837, 1174,  600, 1156,  243, 1301, 1185, 1191, 1207,
     3277, 1216, 1224, 1198, 1226, 1231, 1236, 1241, 1246, 1283,
     1248, 1253, 1260, 1270, 1275, 1290, 1304, 1306, 1292, 1312,

     1317, 1324, 1254, 1326, 1330, 1332, 1261, 1284, 1336, 1277,
     1346, 1353, 3277, 1366, 1347, 1375, 3277, 1381, 1354, 1338,
     1367, 1382, 1387, 1358, 1389, 1393, 1395, 1408, 1296, 1401,
     3277, 1288, 1267,  819, 1255, 1250, 1236, 1241, 1232, 1221,
      192, 1214, 1213, 1402,  261, 1207, 1410, 1412, 1430, 3277,
     1436, 1416, 1438, 1444, 1450, 1456, 1458, 1465, 1463, 1471,
     1477, 1483, 1488, 1498, 1503, 1505, 1511, 1516, 1518, 1523,
     1524, 1530, 1509, 1532, 1448, 1537, 1541, 1549, 1558, 3277,
     1565, 1551, 1418, 1566, 1570, 1571, 1572, 1580, 1579, 1578,
     1584, 1591, 3277, 1597, 1617, 1198, 1207, 1202, 1180, 1178,

     1187, 1163, 1170, 1154, 1135, 1122, 1121, 1122,  618,  294,
     1113, 1598, 1607, 1620, 1626, 1628, 1640, 1646, 3277, 1669,
     1648, 1654, 1660, 1662, 1671, 1677, 3277, 1714, 1687, 1692,
     1694, 1702, 1721, 1723, 1707, 1732, 1715, 1745, 1752, 1652,
     1756, 1700, 1757, 1758, 1762, 1768, 1769, 1774, 1775, 1787,
     1779, 1780, 1789, 1793, 1634, 1803, 3277, 1111, 1806,  724,
     1089, 1105, 1817, 1088, 1069, 1053, 1040, 1029, 1034,  990,
      853,  694, 1011, 1632, 1826, 1834, 3277, 1840, 1846, 1852,
     1819, 1858, 1860, 1865, 1871, 3277, 1894, 1873, 1881, 1795,
     1886, 1899, 1901, 3277, 1912, 1917, 1924, 1931, 1936, 1941,

     1943, 1903, 1918, 1809, 1875, 1925, 1827, 1949, 1957, 3277,
     1964, 1965, 1971, 1972, 1979, 3277, 1985, 1994, 1986, 1987,
     2001, 1995, 2007, 2013, 3277,  987, 2020, 1013, 2023, 3277,
      977,  969,  959,  920,  928,  906,  914,  995,  938,  896,
     2025, 2032, 3277, 2038, 2040, 2046, 3277, 2080, 2048, 2054,
     2056, 2062, 2068, 2070, 2085, 2101, 2091, 2103, 2108, 2114,
     2124, 2129, 2130, 2135, 2136, 2141, 2072, 2148, 3277, 2154,
     2142, 2160, 3277, 2180, 2186, 2192, 3277, 2198, 2204, 2166,
     2210, 3277, 2217, 2089, 2223, 3277,  900, 2226, 3277,    0,
      886,  878, 2229, 2232,  869,  862, 2235,  882, 3277,  828,

     2161, 2240, 2242, 2247, 2249, 2255, 3277, 2286, 2261, 2263,
     2269, 2271, 2277, 2288, 2294, 2308, 3277, 2317, 2324, 2292,
     2330, 2309, 2167, 2174, 2331, 2336, 2342, 3277, 2348, 2366,
     3277, 2372, 2378, 2385,  805,    0, 2391,  811, 2394, 3277,
     2397, 3277,  783,  766, 2400, 3277,  777, 2279, 2403, 3277,
     2414, 2355, 2405, 2420, 2432, 3277, 2456, 2422, 3277, 2438,
     2443, 2445, 2458, 2464, 2473, 2479, 2481, 2357, 2489, 3277,
     2499, 2300, 2407, 2465, 2379, 2436, 2503, 2514, 3277, 2523,
     2529, 3277, 2537,  742, 2452, 3277,  695,  677,  653,  685,
     2516, 2578, 2505, 2548, 3277, 2620, 2531, 2550, 2555, 2560,

     2565, 2570, 2572, 2580, 2507, 2582, 2515, 2584, 2592, 2599,
     2608,  646,  635,  640, 2629,  651, 2621, 2637, 2642, 2647,
     2649, 2661, 2663, 2668, 2675, 2685, 2695, 2669, 2705, 2686,
     2598, 2622, 2676, 2677,  617,  590,  594, 2720, 3277,  593,
     2696, 2712, 2749, 2729, 2723, 2734, 2736, 2742, 2757, 2772,
     3277, 2778, 2787, 3277, 2793, 2724, 2799, 3277, 2805, 2651,
     2780, 2653, 2743, 2811,  528,  514,  557,  490, 2812, 2819,
     2821, 2828, 2830, 2835, 2837, 2843, 3277, 2855, 2862, 3277,
     2868, 2845, 2870, 2878, 2884, 2890, 3277, 2897,  483, 2903,
      473,  473, 2912, 2918, 2938, 2905, 2920, 2925, 2926, 2932,

     3277, 2962, 2969, 3277, 2976, 2956, 2982, 3277,  458,  448,
     2986, 3277, 2992, 2999, 3277, 3034, 2949, 2940, 3008, 2750,
     3005, 3014, 3277,  446,  432, 3018, 3020, 3025, 3026,  425,
      409, 3040, 3277, 3059, 3042, 3065, 3027,  380, 3277, 3072,
     3077, 2942,  404, 3079, 3084, 3048,  366, 3089, 3091, 2993,
      337, 3102, 3104, 3093,  293, 3109, 3119, 3128,  282, 3134,
     3140, 3277, 3146,  207, 3148,  192, 3153,  167,  135,  127,
       88,   84,   81,   53, 3161, 3164, 3277, 3277, 3196, 3201,
     3206, 3211, 3216, 3221, 3226, 3231, 3236, 3239, 3244, 3246,
     3251, 3256, 3261, 3266, 3271

    } ;

static yyconst flex_int16_t yy_def[996] =
    {   0,
      979,  979,  980,  980,  981,  981,  980,  980,  982,  982,
      983,  983,  978,  984,  978,  984,  985,  986,  984,  984,
      984,  984,  984,  984,  984,  984,  978,  987,  978,  978,
      978,  978,  978,  978,  978,  978,  988,  978,  978,  987,
      978,  978,  978,  978,  978,  978,  984,  984,  984,  984,
      984,  984,  984,  984,  985,  978,  989,  985,  985,  985,
      985,  985,  985,  986,  986,  986,  984,  984,  984,  984,
      984,  984,  984,  984,  984,  984,  984,  984,  987,  978,
      978,  978,  978,  978,  978,  978,  978,  978,  978,  988,
      988,  988,  987,  978,  984,  984,  984,  984,  984,  985,

      989,  989,  989,  989,  989,  989,  989,  985,  985,  985,
      985,  985,  985,  986,  986,  986,  984,  984,  984,  984,
      984,  984,  984,  984,  984,  984,  978,  978,  978,  978,
      978,  978,  978,  978,  978,  978,  988,  988,  987,  978,
      984,  984,  984,  984,  984,  985,  989,  989,  989,  989,
      989,  989,  989,  989,  989,  989,  989,  985,  985,  985,
      985,  985,  985,  986,  986,  986,  986,  986,  984,  984,
      984,  984,  984,  984,  984,  984,  984,  984,  984,  984,
      984,  984,  984,  978,  978,  978,  978,  978,  978,  978,
      978,  978,  978,  988,  988,  987,  978,  984,  984,  984,

      984,  984,  985,  989,  989,  989,  989,  989,  989,  989,
      989,  989,  989,  989,  985,  985,  985,  985,  985,  985,
      986,  986,  986,  986,  986,  984,  984,  984,  984,  984,
      984,  984,  984,  984,  984,  984,  984,  984,  984,  984,
      978,  978,  978,  978,  978,  978,  978,  978,  978,  978,
      978,  978,  988,  988,  987,  978,  984,  984,  984,  984,
      984,  985,  989,  989,  989,  989,  989,  989,  989,  989,
      989,  989,  989,  985,  985,  985,  985,  985,  985,  986,
      986,  986,  986,  986,  984,  984,  984,  984,  984,  984,
      984,  984,  984,  984,  984,  984,  984,  984,  984,  978,

      978,  978,  978,  978,  978,  978,  978,  988,  990,  987,
      978,  984,  984,  984,  984,  984,  985,  989,  989,  989,
      978,  989,  989,  989,  989,  989,  989,  989,  989,  989,
      985,  985,  985,  985,  985,  985,  985,  986,  986,  986,
      986,  986,  984,  984,  984,  984,  984,  984,  984,  984,
      984,  984,  984,  984,  984,  984,  984,  978,  978,  978,
      978,  978,  978,  978,  978,  978,  978,  978,  978,  978,
      978,  988,  978,  990,  990,  987,  978,  984,  984,  984,
      978,  984,  984,  984,  985,  989,  989,  989,  989,  989,
      989,  989,  989,  989,  989,  985,  985,  985,  985,  985,

      985,  985,  986,  986,  986,  986,  986,  984,  984,  984,
      984,  984,  978,  984,  984,  984,  978,  984,  984,  984,
      984,  984,  984,  984,  984,  984,  984,  984,  978,  978,
      978,  978,  978,  988,  978,  978,  978,  978,  978,  978,
      978,  978,  978,  990,  987,  978,  984,  984,  984,  978,
      984,  984,  985,  989,  989,  989,  989,  989,  989,  989,
      989,  989,  989,  985,  985,  985,  985,  985,  985,  985,
      986,  986,  986,  986,  986,  984,  984,  984,  984,  978,
      984,  984,  984,  984,  984,  984,  984,  984,  984,  984,
      984,  984,  978,  984,  978,  978,  978,  988,  978,  978,

      978,  978,  978,  978,  978,  978,  978,  978,  990,  987,
      978,  984,  984,  984,  985,  989,  989,  989,  978,  989,
      989,  989,  989,  989,  989,  989,  978,  989,  989,  985,
      985,  991,  985,  985,  985,  985,  986,  986,  986,  986,
      986,  986,  984,  984,  984,  984,  984,  984,  984,  984,
      984,  984,  984,  984,  984,  978,  978,  978,  978,  990,
      978,  978,  978,  978,  978,  978,  978,  978,  978,  978,
      990,  987,  978,  984,  984,  984,  978,  984,  985,  985,
      989,  989,  989,  989,  989,  978,  989,  989,  989,  989,
      985,  985,  991,  978,  991,  991,  991,  985,  985,  985,

      985,  986,  986,  986,  986,  984,  984,  984,  984,  978,
      984,  984,  984,  984,  984,  978,  984,  984,  984,  984,
      984,  984,  978,  978,  978,  373,  978,  978,  978,  978,
      978,  978,  978,  978,  978,  978,  978,  990,  992,  978,
      984,  984,  978,  984,  989,  989,  978,  989,  989,  989,
      989,  989,  989,  985,  985,  991,  991,  985,  985,  985,
      985,  986,  986,  986,  986,  984,  984,  984,  978,  984,
      984,  984,  978,  984,  984,  984,  978,  984,  984,  984,
      984,  978,  984,  984,  978,  978,  978,  978,  978,  993,
      978,  978,  978,  978,  978,  978,  978,  992,  978,  978,

      984,  989,  989,  989,  989,  989,  978,  989,  989,  994,
      985,  991,  991,  985,  985,  985,  978,  985,  985,  986,
      986,  986,  986,  984,  984,  984,  984,  978,  984,  984,
      978,  984,  984,  984,  978,  993,  978,  978,  978,  978,
      978,  978,  978,  978,  978,  978,  978,  984,  989,  978,
      989,  989,  989,  989,  989,  978,  989,  994,  978,  994,
      994,  985,  991,  991,  985,  985,  985,  986,  986,  978,
      986,  986,  986,  986,  984,  984,  984,  984,  978,  984,
      984,  978,  984,  978,  978,  978,  978,  978,  978,  978,
      984,  989,  989,  989,  978,  989,  994,  994,  985,  991,

      991,  985,  985,  985,  986,  986,  986,  986,  984,  984,
      984,  978,  978,  978,  978,  978,  984,  989,  989,  994,
      994,  985,  991,  991,  985,  985,  985,  986,  986,  986,
      986,  984,  984,  984,  978,  978,  978,  978,  978,  978,
      984,  989,  989,  994,  994,  985,  991,  991,  985,  985,
      978,  985,  985,  978,  985,  986,  986,  978,  986,  986,
      986,  984,  984,  984,  978,  978,  978,  978,  984,  989,
      989,  994,  994,  985,  991,  991,  978,  991,  985,  978,
      985,  986,  986,  986,  984,  984,  978,  984,  978,  978,
      978,  978,  984,  989,  989,  994,  994,  991,  986,  986,

      978,  986,  984,  978,  984,  995,  978,  978,  978,  978,
      984,  978,  984,  989,  978,  989,  994,  994,  991,  986,
      995,  995,  978,  978,  978,  994,  994,  991,  986,  978,
      978,  994,  978,  994,  994,  991,  986,  978,  978,  994,
      991,  986,  978,  994,  991,  986,  978,  994,  991,  986,
      978,  994,  991,  986,  978,  994,  991,  986,  978,  994,
      986,  978,  986,  978,  994,  978,  994,  978,  978,  978,
      978,  978,  978,  978,  978,  978,  978,    0,  978,  978,
      978,  978,  978,  978,  978,  978,  978,  978,  978,  978,
      978,  978,  978,  978,  978

    } ;

static yyconst flex_int16_t yy_nxt[3330] =
    {   0,
      978,  978,   15,   16,   17,   18,   19,   20,   21,   21,
       37,   80,   80,   38,   39,   39,   37,   42,  978,   38,
       39,   39,   43,   44,   44,   48,   22,   42,   49,   80,
       80,   23,   43,   44,   44,  978,   48,   65,   24,   49,
       66,   25,   26,   15,   16,   17,   18,   19,   20,   21,
       21,   67,   48,   48,   49,   49,   49,   50,   68,   68,
       48,   82,  127,   49,   69,   69,   69,   22,  128,   83,
       48,   51,   23,   49,   52,   53,   54,   48,   48,   24,
       49,   49,   25,   26,   28,   56,   69,   29,   30,   30,
       71,   72,   70,   81,   81,   81,   81,   81,   81,   56,

      975,   93,   48,   73,   74,   49,   89,   31,   48,   32,
       33,   49,   80,   80,  974,   81,   34,   35,   81,   81,
       81,   81,   36,   28,  376,  973,   29,   30,   30,  978,
       75,  972,   76,   91,   77,   48,   92,   78,   49,   67,
       95,   81,   49,   49,   48,   56,   31,   49,   32,   33,
       48,   48,  971,   49,   49,   34,   35,   48,  139,   92,
       49,   36,   56,   57,   58,   56,   59,   56,  100,   56,
      102,   59,  970,  103,   53,   56,  100,   98,   65,   59,
      116,   66,   60,   66,   96,  108,   97,   61,   56,  109,
       62,  255,   59,   63,  104,   99,  105,  106,   56,  100,

       56,  100,   59,   65,   59,   56,   66,   56,  100,  107,
      969,   59,   56,  100,  978,   48,   59,   48,   49,  505,
       49,  110,   48,  310,  114,   49,   69,   69,   69,   48,
      968,  506,   49,   69,   69,   69,  966,  111,  112,  117,
       48,  118,  115,   49,  137,   56,   48,  113,   69,   49,
       48,  978,   56,   49,   53,   69,   48,   48,   48,   49,
       49,   49,   48,   56,   48,   49,  119,   49,  120,   81,
       81,   81,   81,   81,   81,  130,   48,  370,  131,   49,
      124,   92,  445,   48,   48,  138,   49,   49,  196,   48,
      371,   81,   49,  121,   81,  122,   56,  510,   48,  123,

      126,   49,  125,   56,  100,   56,  102,   59,  164,  103,
      141,   66,   56,  152,   48,   53,  103,   49,   56,  102,
      145,  142,  103,  964,  143,   65,   56,  102,   66,  144,
      103,   56,  102,  572,  959,  103,   56,  100,   56,  102,
       59,  978,  103,  146,   56,  102,   56,  100,  103,  202,
       59,  165,  153,   56,  100,   56,  100,   59,  147,   59,
      148,  159,  155,  154,  149,  156,   56,  100,   56,  100,
       59,  308,   59,  158,   65,   48,  146,   66,   49,  157,
      150,  955,   48,   48,  151,   49,   49,   48,  978,  161,
       49,  163,  160,  951,   48,  114,  166,   49,  167,   48,

      162,   48,   49,   48,   49,   48,   49,  947,   49,  943,
      195,  168,  978,  115,  170,  939,   48,  169,   92,   49,
       56,  102,  171,   65,  103,   48,   66,  175,   49,  172,
       48,  173,   65,   49,   48,   66,  176,   49,  198,  174,
       48,  232,   92,   49,   49,  194,  138,  199,  183,   56,
      100,  210,  200,   59,   56,  102,  938,  177,  103,  201,
      931,   56,  102,  222,  178,  103,   56,  102,   56,  102,
      103,  930,  103,  179,  180,  223,  203,  204,  181,  182,
      206,   56,  102,   56,  102,  103,  925,  103,   56,  102,
       56,  102,  103,  207,  103,  924,  205,   56,  102,   56,

      100,  103,  910,   59,   65,  208,  909,   66,  156,   56,
      102,  211,  906,  103,   56,  100,   56,  100,   59,  373,
       59,   48,  212,  147,   49,  148,   56,  100,  215,  149,
       59,  213,   65,  892,  209,   66,  214,   56,  100,   56,
      100,   59,  375,   59,   65,  150,  224,   66,   48,  151,
      225,   49,  217,  114,  221,   48,  226,  216,   49,   48,
      891,  890,   49,  218,  219,  889,   48,   48,  220,   49,
       49,  115,   48,   48,  227,   49,   49,   48,   48,   48,
       49,   49,   49,   48,   48,  229,   49,   49,  230,   48,
      978,  978,   49,   48,   48,  228,   49,   49,  233,  234,

      241,  242,  241,  231,  247,  248,  247,  235,  236,  237,
      373,  238,   48,  239,   48,   49,  253,   49,  868,  254,
       92,   92,  867,  866,   48,  257,  240,   49,  373,  258,
       56,  100,   65,  375,   59,   66,  260,   56,  102,   56,
      102,  103,  865,  103,   56,  102,   56,  102,  103,  571,
      103,  375,  259,   56,  102,  285,  840,  103,   49,  265,
       56,  102,  282,  261,  103,   65,   56,  102,   66,  837,
      103,  262,  263,  264,   56,  102,  836,  266,  103,   56,
      102,   56,  102,  103,  835,  103,   56,  102,  816,  267,
      103,   56,  100,   56,  100,   59,   56,   59,   56,  100,

      283,  815,   59,  268,  269,  270,  978,  272,   56,  100,
       56,  100,   59,  271,   59,   56,  100,   65,   65,   59,
       66,   66,  274,  273,   65,  639,  814,   66,   48,  275,
       48,   49,  288,   49,  626,   49,   92,  277,  813,  276,
      372,  278,  279,  281,   48,   48,   48,   49,   49,   49,
      284,   48,  291,   48,   49,   48,   49,  375,   49,   48,
      280,   48,   49,  286,   49,   48,  287,   48,   49,   48,
       49,  812,   49,  292,  241,  242,  241,  247,  248,  247,
      978,  293,   48,  290,  289,   49,   48,  790,  297,   49,
       53,  299,   48,   48,  295,   49,   49,  360,  361,  360,

      294,  296,   48,  298,   65,   49,  309,   66,  312,  789,
       92,   56,  100,   56,  102,   59,  788,  103,  314,   56,
      102,   65,  978,  103,   66,  313,  320,  321,  322,   56,
      102,  103,  315,  103,  338,  316,  787,  317,   56,  102,
      978,  784,  103,  339,  318,   56,  102,   56,  102,  103,
      498,  103,   92,  319,  341,   56,  102,   66,  323,  103,
       56,  102,  434,  373,  103,   56,  102,   56,  102,  103,
       92,  103,   56,  100,   65,  747,   59,   66,  324,   56,
      332,  325,  638,   59,  699,  326,  375,  328,  329,  327,
       56,  100,   56,  100,   59,  744,   59,   56,  100,  340,

      330,   59,   56,  100,   65,  743,   59,   66,  331,   48,
      336,   48,   49,   48,   49,  738,   49,   48,  346,   48,
       49,   48,   49,  334,   49,   48,  333,   48,   49,  737,
       49,   48,  335,  735,   49,  700,  343,  337,  344,   48,
      699,   48,   49,  342,   49,  348,  697,  696,   53,  345,
      347,   48,   48,  695,   49,   49,   53,  351,   48,   48,
      694,   49,   49,  350,  362,  363,  362,  353,  364,  365,
      364,  352,  349,  366,  367,  366,  355,  354,  368,  369,
      368,   48,   48,   48,   49,   49,   49,  357,  380,  381,
      382,   48,  693,   49,   49,   56,  100,   65,  692,   59,

       66,  356,   56,  102,   65,  373,  103,   66,  378,  691,
       56,  102,  383,  384,  103,  379,  690,  687,  385,  320,
      321,  322,  403,  640,  103,   56,  102,  387,  375,  103,
       56,  102,   65,  637,  103,   66,  386,  320,  321,  322,
       56,  390,  103,  404,  103,   56,  102,   56,  102,  103,
      415,  103,  147,   49,  148,  388,   56,  102,  149,  636,
      103,   56,  102,   56,  102,  103,  635,  103,  391,   56,
      100,  389,  405,   59,  150,   56,  100,  634,  151,   59,
       65,  392,  393,   66,   56,  100,   48,  396,   59,   49,
      395,   56,  100,   56,  100,   59,  633,   59,   56,  100,

      632,  394,   59,  397,   56,  100,  407,   65,   59,   48,
       66,   48,   49,  398,   49,  146,  400,   48,   48,  631,
       49,   49,  401,  430,  431,  430,  399,  402,  114,   48,
      628,  627,   49,  411,  406,  409,  412,  413,  414,  408,
      623,   49,   48,  410,  573,   49,  115,  416,  417,  418,
      570,   48,   49,  419,   49,   48,   48,  569,   49,   49,
      420,   48,   48,  568,   49,   49,  373,  425,  360,  361,
      360,  362,  363,  362,  567,  421,  364,  365,  364,  422,
      366,  367,  366,  368,  369,  368,  423,  428,   48,  375,
      566,   49,  426,  444,   48,  565,  564,   49,  424,  427,

      435,   48,  436,  437,   49,  978,  438,  439,  380,  381,
      382,  440,  441,   49,  442,  563,  448,  380,  381,  382,
      443,  562,   49,  561,  447,  449,  450,  451,   56,  100,
       49,  560,   59,   56,  102,   92,  559,  103,   56,  102,
      558,  452,  103,   56,  102,  511,  508,  103,   56,  102,
       56,  102,  103,  507,  103,   56,  102,   65,   53,  103,
       66,  455,   56,  102,   65,  504,  103,   66,  453,  503,
      502,  457,   56,  102,  501,  500,  103,   56,  102,  454,
      478,  103,  460,   49,  456,   56,  102,   48,  499,  103,
       49,  459,   56,  100,   56,  100,   59,  471,   59,  147,

      461,  148,  462,  463,  475,  149,   56,  100,   56,  100,
       59,  497,   59,  458,   56,  100,  466,  467,   59,   56,
      100,  150,  476,   59,  496,  151,   56,  100,  495,   65,
       59,  464,   66,   65,  446,   65,   66,  465,   66,   48,
      433,   48,   49,  468,   49,  432,  469,  479,  480,  481,
       48,  482,   49,   49,  412,  413,  414,   48,  472,   49,
       49,   48,  473,  429,   49,  474,  470,  412,  413,  414,
       48,  484,   49,   49,  377,  477,  416,  417,  418,  359,
      358,   49,  416,  417,  418,   48,  311,   49,   49,   53,
       48,  488,   48,   49,  307,   49,   48,  483,   48,   49,

      306,   49,  430,  431,  430,  305,  485,  486,   53,  492,
      493,  494,  373,   48,   49,   48,   49,  304,   49,   48,
      491,  547,   49,   53,   49,  489,  487,  509,  303,  490,
      302,  449,  450,  451,  301,  375,   49,  449,  450,  451,
       56,  100,   49,  300,   59,  514,   56,  102,  512,  256,
      103,   65,   56,  102,   66,  513,  103,  518,  519,  520,
       56,  102,  103,  516,  103,   56,  102,   56,  102,  103,
      515,  103,  252,   56,  102,  542,  251,  103,   53,   56,
      102,  250,  249,  103,  526,  527,  528,  517,  246,  103,
       56,  102,  245,  244,  103,  523,  521,  243,  522,  524,

       56,  100,  525,  197,   59,   56,  100,   56,  532,   59,
      193,   59,   65,   56,  100,   66,  192,   59,   56,  100,
       56,  100,   59,  191,   59,   56,  100,   65,  529,   59,
       66,  538,  450,  539,  190,   65,   66,  530,   66,  189,
       48,  531,  533,   49,   48,  534,  188,   49,  187,  535,
      186,  540,   48,  545,   48,   49,  537,   49,  536,  479,
      480,  481,  185,  184,   49,  543,  479,  480,  481,   48,
      541,   49,   49,   48,   48,   48,   49,   49,   49,  544,
      140,   48,   48,   48,   49,   49,   49,   48,  136,  135,
       49,   53,  492,  493,  494,  134,  133,   49,  492,  493,

      494,   48,  546,   49,   49,  551,  549,   53,  552,  132,
       48,  550,  553,   49,  129,  548,   56,  554,  556,  557,
      556,  576,  577,  578,   94,  555,   49,  579,  527,  580,
       56,  102,   59,   88,  103,  641,  575,   48,   49,   53,
       49,  574,   56,  102,   87,   86,  103,  518,  519,  520,
       56,  102,  103,  581,  103,   65,   56,  102,   66,  622,
      103,  585,  586,  587,   56,  102,  103,   85,  103,  582,
      518,  519,  520,   56,  102,  103,  583,  103,  526,  527,
      528,   84,   56,  103,  603,  147,  978,  148,   46,   56,
      102,  149,  584,  103,   56,  100,   56,  100,   59,   46,

       59,   40,  588,   65,  594,  595,   66,  150,  596,   56,
      100,  151,  590,   59,  589,  526,  527,  528,   65,   40,
      103,   66,  592,   56,  100,   56,  100,   59,  591,   59,
      147,  978,  148,  599,   56,  100,  149,  978,   59,  605,
      600,  978,  601,  978,  597,  978,  538,  450,  539,  978,
      598,   66,  150,  538,  450,  539,  151,  602,   66,   65,
       48,   48,   66,   49,   49,   48,  978,  978,   49,  609,
      610,  611,   48,  978,   49,   49,  114,   48,   48,  978,
       49,   49,   48,   48,  604,   49,   49,  606,  615,  616,
      617,  978,   48,   49,  115,   49,   48,   56,  102,   49,

      607,  103,  978,  613,  556,  557,  556,  624,  625,  624,
      978,  612,   65,  608,  614,   66,  978,  618,  629,  630,
      629,   56,  102,  619,  978,  103,  620,  642,  643,  644,
       48,  978,   49,   49,  621,  576,  577,  578,  653,  664,
       49,  576,  577,  578,  978,  978,   49,  579,  527,  580,
      978,  978,   59,  579,  527,  580,  645,  978,   59,  646,
      647,  648,   56,  102,  103,  978,  103,   56,  102,  978,
      667,  103,  585,  586,  587,   56,  102,  103,   65,  103,
      978,   66,   53,   56,  102,  649,  978,  103,   56,  100,
      978,  978,   59,  650,  146,  585,  586,  587,  651,  978,

      103,   56,  100,  594,  595,   59,   65,  596,  978,   66,
      147,  665,  148,  652,  594,  595,  149,  978,  596,  594,
      656,   65,  978,  596,   66,  654,  594,  595,   48,  655,
      596,   49,  150,   56,  100,  662,  151,   59,   56,  100,
      978,  658,   59,   56,  100,   56,  100,   59,  978,   59,
      668,  669,  670,  657,  597,   49,  978,  663,  609,  610,
      611,  978,  659,   49,  666,  609,  610,  611,   48,  661,
       49,   49,  672,  673,  674,   48,  978,   49,   49,  660,
      615,  616,  617,  978,  978,   49,  615,  616,  617,   48,
       48,   49,   49,   49,  671,  676,  677,  678,   48,  978,

       49,   49,  681,  682,  683,  978,   53,   49,  685,  686,
      685,  978,  978,  675,  624,  625,  624,  978,  679,  978,
      680,  688,  689,  688,  629,  630,  629,   53,   48,  978,
      978,   49,  684,  642,  643,  644,  978,  978,   49,  642,
      643,  644,   56,  102,   49,  978,  103,  646,  647,  648,
       56,  102,  103,  978,  103,  978,   56,  102,   56,  102,
      103,  978,  103,  706,  707,  708,  978,  701,  103,  702,
       56,  102,   56,  100,  103,   48,   59,  978,   49,  978,
       53,  646,  647,  648,  704,  978,  103,   56,  100,  703,
      978,   59,   48,  594,  595,   49,  147,  596,  148,  705,

      709,  710,  149,  594,  595,   56,  100,  596,  978,   59,
       56,  100,  978,  725,   59,  716,  717,  718,  150,  978,
       59,  978,  151,  978,  711,  978,   56,  100,  712,  714,
       59,  734,   65,   65,  713,   66,   66,  715,   65,   65,
      978,   66,   66,  597,   48,   48,  978,   49,   49,  668,
      669,  670,  978,  719,   49,  668,  669,  670,  978,  978,
       49,  672,  673,  674,   48,  978,   49,   49,  720,   48,
       65,  978,   49,   66,  722,  723,  721,   48,  978,  724,
       49,  672,  673,  674,  978,  726,   49,  727,  728,  729,
      748,  978,   49,  676,  677,  678,   53,  978,   49,  676,

      677,  678,  978,  978,   49,  730,  731,  732,  774,  733,
       49,  681,  682,  683,  978,  978,   49,  775,  681,  682,
      683,  978,   53,   49,  685,  686,  685,  688,  689,  688,
      739,  740,  739,  741,  742,  741,  745,  746,  745,  978,
       53,  749,  750,  751,   56,  102,  103,  978,  103,   56,
      102,   56,  102,  103,  978,  103,  706,  707,  708,   53,
      978,  103,  755,  756,  757,  759,  760,  103,  978,  761,
      752,   56,  100,  594,  595,   59,  978,  596,  978,  594,
      595,  754,   48,  596,  978,   49,  753,  706,  707,  708,
       56,  100,  103,  978,   59,   65,   56,  100,   66,  978,

       59,  978,  147,   65,  148,  764,   66,  762,  149,  716,
      717,  718,   65,  978,   59,   66,  763,  765,  716,  717,
      718,  978,  791,   59,  150,  766,   56,  100,  151,  806,
       59,  769,  770,  771,   48,  978,   66,   49,  768,   48,
      978,  978,   49,  727,  728,  729,  978,  773,   49,  727,
      728,  729,  978,  978,   49,  767,  776,   56,  792,  146,
       65,  103,  772,   66,  201,  978,  777,  730,  731,  732,
      978,  978,   49,  730,  731,  732,  978,  978,   49,  778,
      779,  780,  809,  978,   49,   49,  781,  782,  783,  805,
       53,   49,  785,  786,  785,  739,  740,  739,  741,  742,

      741,  745,  746,  745,  749,  750,  751,   56,  102,  103,
       65,  103,  978,   66,   53,  749,  750,  751,  978,  978,
      103,  794,  795,  796,  759,  760,  103,  978,  761,  978,
      147,  978,  148,  755,  756,  757,  149,  978,  103,   48,
      759,  760,   49,  793,  761,  759,  798,   56,  100,  761,
      807,   59,  150,  785,  786,  785,  151,  755,  756,  757,
      594,  595,  103,  978,  596,  978,  594,  595,   65,  810,
      596,   66,  147,  978,  148,   56,  100,  978,  149,   59,
      797,   56,  100,   56,  100,   59,  978,   59,  799,  801,
      769,  770,  771,  978,  150,   66,  800,  978,  151,  978,

      769,  770,  771,  808,  802,   66,   48,   56,  102,   49,
       65,  103,  803,   66,  804,  778,  779,  780,  830,   48,
       49,   66,   49,  114,  778,  779,  780,  978,  978,   49,
      781,  782,  783,  759,  760,   49,  828,  761,  781,  782,
      783,  115,  811,   49,  201,  978,  817,  978,  819,  794,
      795,  796,  759,  760,  103,  978,  761,   56,  822,  978,
      820,   59,  594,  823,  978,   53,  596,  594,  595,  978,
      978,  596,   56,  100,   56,  100,   59,  821,   59,   53,
       56,  102,   56,  100,  103,   65,   59,   65,   66,  978,
       66,  978,  797,  978,  147,   48,  148,  978,   49,  978,

      149,   65,   48,  825,   66,   49,  978,  824,  818,  831,
      826,   48,  978,  978,   49,  832,  150,  978,  827,  978,
      151,  794,  795,  796,   48,  862,  103,   49,   49,  829,
      838,  839,  838,  978,   53,  861,  147,  833,  148,   56,
      102,  978,  149,  103,   56,  843,  834,  978,  103,  759,
      760,  759,  760,  761,  883,  761,   48,   66,  150,   49,
      841,  978,  151,   56,  100,  594,  595,   59,  978,  596,
      594,  595,   65,  978,  596,   66,  842,   56,  100,   48,
       48,   59,   49,   49,  846,  978,  850,  851,  852,   65,
      844,   59,   66,  847,  845,   53,  853,  854,  855,   48,

      848,   59,   49,  146,  978,  597,  857,  858,  859,  860,
      114,   66,  978,  849,   56,  102,  856,  978,  103,  863,
      864,  838,  839,  838,  978,  759,  760,   65,  115,  761,
       66,  759,  760,  978,  869,  761,   56,  874,  594,  595,
       59,  978,  596,  876,  877,  878,   48,  978,  596,   49,
      870,   56,  102,   65,  978,  103,   66,  872,  879,  880,
      881,  873,  978,   59,  978,  147,  978,  148,  978,  875,
      882,  149,  871,  850,  851,  852,  978,  978,   59,  850,
      851,  852,  929,   65,   59,  885,   66,  150,  853,  854,
      855,  151,  978,   59,  853,  854,  855,  978,  978,   59,

      857,  858,  859,  978,  978,   66,  857,  858,  859,  884,
      978,   66,  886,  887,  888,   48,  978,   49,   49,  978,
      146,   56,  102,   56,  895,  103,  978,  103,  978,  114,
      759,  760,  759,  897,  761,  146,  761,   56,  100,  594,
      595,   59,  978,  596,  876,  877,  878,  115,   65,  596,
      978,   66,  978,  896,  978,  893,  876,  877,  878,  978,
      978,  596,  894,  879,  880,  881,  978,  978,   59,  879,
      880,  881,  978,   65,   59,  898,   66,  146,  899,  900,
      901,  902,  978,  978,   66,  903,  904,  905,  978,  978,
       49,  886,  887,  888,  114,  978,   49,  597,  886,  887,

      888,  978,  978,   49,  907,  908,  907,  759,  760,  978,
      146,  761,  115,  911,  912,  913,  978,  978,   49,  914,
      915,  916,  759,  760,  103,  978,  761,  594,  595,   65,
      978,  596,   66,  900,  901,  902,  978,  978,   66,   53,
       56,  102,  759,  760,  103,   65,  761,  917,   66,  978,
      918,  759,  760,  919,  147,  761,  148,  922,  923,  922,
      149,  978,  797,  900,  901,  902,  978,  978,   66,  920,
      903,  904,  905,  927,  978,   49,  150,  903,  904,  905,
      151,  926,   49,  907,  908,  907,  114,  911,  912,  913,
      946,  978,   49,  911,  912,  913,   65,  978,   49,   66,

      914,  915,  916,  978,  115,  103,  922,  923,  922,  978,
      594,  595,  978,  978,  596,  922,  923,  922,   53,  932,
      933,  934,  759,  760,  761,  954,  761,  594,  595,   65,
       65,  596,   66,   66,   53,  914,  915,  916,  928,  978,
      103,  932,  933,  934,  759,  760,  761,  978,  761,  978,
      147,   65,  148,  978,   66,  978,  149,  937,  935,  978,
      932,  933,  934,  942,  936,  761,  978,  594,  595,  978,
      940,  596,  150,  978,  759,  760,  151,  978,  761,  594,
      595,  759,  760,  596,  978,  761,  594,  949,  950,  978,
      596,  759,  760,  594,  595,  761,   65,  596,  978,   66,

      978,  797,  944,  941,  759,  760,  594,  957,  761,  978,
      596,  759,  960,  978,  953,  761,  978,  978,  948,  978,
      945,  594,  595,  978,  978,  596,  978,  952,  978,  961,
      962,  963,  978,  597,   66,  958,  759,  760,  978,  978,
      761,  961,  962,  963,  978,  956,   66,  961,  962,  963,
      759,  967,   66,  978,  761,  759,  760,  965,  978,  761,
      978,  597,  976,  977,  976,  976,  977,  976,  978,  978,
      114,  978,  978,  978,  978,  978,  797,  978,  978,  978,
      978,  978,  978,  978,  978,  978,  978,  978,  115,  978,
      978,  978,  978,  978,  978,  797,   14,   14,   14,   14,

       14,   27,   27,   27,   27,   27,   15,   15,   15,   15,
       15,   41,   41,   41,   41,   41,   45,   45,   45,   45,
       45,   47,  978,   47,   47,   47,   55,   55,   55,   55,
       55,   64,  978,   64,   64,   64,   79,   79,   79,   79,
       79,   90,  978,   90,  101,  101,  101,  101,  101,  374,
      374,  593,  593,  593,  593,  593,  698,  698,  698,  698,
      698,  736,  978,  736,  736,  736,  758,  758,  758,  758,
      758,  921,  921,  921,  921,  921,   13,  978,  978,  978,
      978,  978,  978,  978,  978,  978,  978,  978,  978,  978,
      978,  978,  978,  978,  978,  978,  978,  978,  978,  978,

      978,  978,  978,  978,  978,  978,  978,  978,  978,  978,
      978,  978,  978,  978,  978,  978,  978,  978,  978,  978,
      978,  978,  978,  978,  978,  978,  978,  978,  978
    } ;

static yyconst flex_int16_t yy_chk[3330] =
    {   0,
        0,    0,    1,    1,    1,    1,    1,    1,    1,    1,
        5,   29,   29,    5,    5,    5,    6,    9,    0,    6,
        6,    6,    9,    9,    9,   14,    1,   10,   14,   38,
       38,    1,   10,   10,   10,    0,   16,   18,    1,   16,
       18,    1,    1,    2,    2,    2,    2,    2,    2,    2,
        2,   19,   23,   20,   19,   23,   20,   16,   20,   20,
       21,   31,   82,   21,   21,   21,   21,    2,   82,   31,
       22,   16,    2,   22,   16,   16,   16,   24,   25,    2,
       24,   25,    2,    2,    3,  310,   21,    3,    3,    3,
       23,   23,   22,   30,   30,   30,   39,   39,   39,   40,

      974,   40,   47,   24,   25,   47,   37,    3,   26,    3,
        3,   26,   43,   43,  973,   30,    3,    3,   39,   44,
       44,   44,    3,    4,  310,  972,    4,    4,    4,   90,
       26,  971,   26,   37,   26,   48,   37,   26,   48,   49,
       50,   44,   49,   50,   51,   93,    4,   51,    4,    4,
       52,   53,  970,   52,   53,    4,    4,   54,   93,   90,
       54,    4,   17,   17,   17,  196,   17,   55,   55,   57,
       57,   55,  969,   57,   48,   58,   58,   53,   64,   58,
       66,   64,   17,   66,   51,   58,   52,   17,   59,   59,
       17,  196,   59,   17,   57,   54,   57,   57,   60,   60,

       61,   61,   60,   65,   61,  255,   65,   62,   62,   57,
      968,   62,   63,   63,   91,   67,   63,   70,   67,  441,
       70,   60,   68,  255,   65,   68,   68,   68,   68,   69,
      966,  441,   69,   69,   69,   69,  964,   61,   62,   67,
       71,   70,   65,   71,   91,  376,   72,   63,   68,   72,
       73,   92,  139,   73,   67,   69,   74,   75,   76,   74,
       75,   76,   77,  445,   78,   77,   71,   78,   72,   80,
       80,   80,   81,   81,   81,   84,   95,  307,   84,   95,
       76,   92,  376,   96,   97,   92,   96,   97,  139,   98,
      307,   80,   98,   73,   81,   74,  510,  445,   99,   75,

       78,   99,   77,  100,  100,  101,  101,  100,  114,  101,
       95,  114,  103,  103,  145,   95,  103,  145,  104,  104,
       99,   96,  104,  959,   97,  115,  105,  105,  115,   98,
      105,  106,  106,  510,  955,  106,  109,  109,  107,  107,
      109,  253,  107,  100,  102,  102,  108,  108,  102,  145,
      108,  115,  104,  110,  110,  111,  111,  110,  102,  111,
      102,  109,  106,  105,  102,  107,  112,  112,  113,  113,
      112,  253,  113,  108,  116,  117,  109,  116,  117,  107,
      102,  951,  118,  119,  102,  118,  119,  120,  138,  111,
      120,  113,  110,  947,  121,  116,  116,  121,  116,  122,

      112,  123,  122,  124,  123,  126,  124,  943,  126,  938,
      138,  116,  137,  116,  118,  931,  141,  117,  138,  141,
      153,  153,  119,  165,  153,  142,  165,  123,  142,  120,
      143,  121,  166,  143,  144,  166,  124,  144,  141,  122,
      125,  175,  137,  125,  175,  137,  137,  142,  126,  146,
      146,  153,  143,  146,  147,  147,  930,  125,  147,  144,
      925,  148,  148,  165,  125,  148,  149,  149,  150,  150,
      149,  924,  150,  125,  125,  166,  146,  147,  125,  125,
      148,  151,  151,  154,  154,  151,  910,  154,  155,  155,
      156,  156,  155,  149,  156,  909,  147,  157,  157,  158,

      158,  157,  892,  158,  167,  150,  891,  167,  151,  152,
      152,  154,  889,  152,  159,  159,  160,  160,  159,  309,
      160,  169,  155,  152,  169,  152,  161,  161,  158,  152,
      161,  156,  164,  868,  152,  164,  157,  162,  162,  163,
      163,  162,  309,  163,  168,  152,  167,  168,  170,  152,
      168,  170,  160,  164,  164,  171,  169,  159,  171,  172,
      867,  866,  172,  161,  162,  865,  173,  174,  163,  173,
      174,  164,  176,  178,  170,  176,  178,  177,  179,  180,
      177,  179,  180,  181,  182,  172,  181,  182,  173,  183,
      194,  195,  183,  198,  199,  171,  198,  199,  176,  177,

      184,  184,  184,  174,  189,  189,  189,  178,  179,  180,
      374,  181,  200,  182,  201,  200,  194,  201,  840,  195,
      194,  195,  837,  836,  202,  198,  183,  202,  509,  199,
      203,  203,  223,  374,  203,  223,  201,  204,  204,  205,
      205,  204,  835,  205,  206,  206,  207,  207,  206,  509,
      207,  509,  200,  208,  208,  226,  816,  208,  226,  206,
      209,  209,  223,  202,  209,  224,  210,  210,  224,  814,
      210,  203,  204,  205,  211,  211,  813,  207,  211,  212,
      212,  213,  213,  212,  812,  213,  214,  214,  790,  208,
      214,  215,  215,  216,  216,  215,  572,  216,  218,  218,

      224,  789,  218,  209,  210,  211,  308,  213,  217,  217,
      219,  219,  217,  212,  219,  220,  220,  221,  222,  220,
      221,  222,  215,  214,  225,  572,  788,  225,  227,  216,
      228,  227,  229,  228,  560,  229,  308,  218,  787,  217,
      308,  219,  220,  222,  230,  231,  233,  230,  231,  233,
      225,  232,  232,  234,  232,  235,  234,  560,  235,  236,
      221,  237,  236,  227,  237,  238,  228,  239,  238,  240,
      239,  784,  240,  233,  241,  241,  241,  247,  247,  247,
      254,  234,  257,  231,  230,  257,  258,  747,  238,  258,
      232,  240,  259,  260,  236,  259,  260,  302,  302,  302,

      235,  237,  261,  239,  280,  261,  254,  280,  257,  744,
      254,  262,  262,  263,  263,  262,  743,  263,  259,  264,
      264,  281,  434,  264,  281,  258,  265,  265,  265,  266,
      266,  265,  260,  266,  280,  261,  738,  262,  267,  267,
      372,  735,  267,  281,  263,  268,  268,  269,  269,  268,
      434,  269,  434,  264,  283,  270,  270,  283,  266,  270,
      271,  271,  372,  571,  271,  272,  272,  273,  273,  272,
      372,  273,  274,  274,  282,  700,  274,  282,  267,  275,
      275,  268,  571,  275,  698,  269,  571,  271,  272,  270,
      276,  276,  277,  277,  276,  696,  277,  278,  278,  282,

      273,  278,  279,  279,  284,  695,  279,  284,  274,  285,
      279,  287,  285,  286,  287,  692,  286,  288,  288,  290,
      288,  289,  290,  277,  289,  291,  276,  292,  291,  691,
      292,  293,  278,  687,  293,  640,  285,  279,  286,  294,
      639,  295,  294,  284,  295,  290,  637,  636,  285,  287,
      289,  296,  297,  635,  296,  297,  288,  293,  298,  299,
      634,  298,  299,  292,  303,  303,  303,  295,  304,  304,
      304,  294,  291,  305,  305,  305,  297,  296,  306,  306,
      306,  312,  313,  315,  312,  313,  315,  299,  314,  314,
      314,  316,  633,  314,  316,  317,  317,  338,  632,  317,

      338,  298,  318,  318,  339,  638,  318,  339,  312,  631,
      319,  319,  315,  316,  319,  313,  628,  626,  317,  320,
      320,  320,  338,  573,  320,  323,  323,  319,  638,  323,
      324,  324,  340,  570,  324,  340,  318,  322,  322,  322,
      325,  325,  322,  339,  325,  326,  326,  327,  327,  326,
      348,  327,  322,  348,  322,  323,  328,  328,  322,  569,
      328,  329,  329,  330,  330,  329,  568,  330,  326,  331,
      331,  324,  340,  331,  322,  332,  332,  567,  322,  332,
      342,  327,  328,  342,  333,  333,  346,  331,  333,  346,
      330,  334,  334,  335,  335,  334,  566,  335,  336,  336,

      565,  329,  336,  332,  337,  337,  342,  341,  337,  343,
      341,  344,  343,  333,  344,  332,  335,  345,  350,  564,
      345,  350,  336,  359,  359,  359,  334,  337,  341,  354,
      562,  561,  354,  346,  341,  344,  347,  347,  347,  343,
      558,  347,  351,  345,  511,  351,  341,  349,  349,  349,
      508,  352,  349,  350,  352,  353,  355,  507,  353,  355,
      351,  357,  356,  506,  357,  356,  375,  354,  360,  360,
      360,  362,  362,  362,  505,  352,  364,  364,  364,  353,
      366,  366,  366,  368,  368,  368,  353,  357,  378,  375,
      504,  378,  355,  375,  379,  503,  502,  379,  353,  356,

      373,  384,  373,  373,  384,  498,  373,  373,  380,  380,
      380,  373,  373,  380,  373,  501,  379,  382,  382,  382,
      373,  500,  382,  499,  378,  383,  383,  383,  385,  385,
      383,  498,  385,  386,  386,  498,  497,  386,  387,  387,
      496,  384,  387,  388,  388,  446,  443,  388,  389,  389,
      391,  391,  389,  442,  391,  392,  392,  403,  382,  392,
      403,  387,  393,  393,  407,  440,  393,  407,  385,  439,
      438,  389,  394,  394,  437,  436,  394,  395,  395,  386,
      410,  395,  392,  410,  388,  390,  390,  408,  435,  390,
      408,  391,  396,  396,  399,  399,  396,  403,  399,  390,

      393,  390,  394,  395,  407,  390,  397,  397,  398,  398,
      397,  433,  398,  390,  400,  400,  398,  399,  400,  401,
      401,  390,  408,  401,  432,  390,  402,  402,  429,  404,
      402,  396,  404,  405,  377,  406,  405,  397,  406,  409,
      371,  420,  409,  400,  420,  370,  401,  411,  411,  411,
      415,  415,  411,  415,  412,  412,  412,  419,  404,  412,
      419,  424,  405,  358,  424,  406,  402,  414,  414,  414,
      421,  420,  414,  421,  311,  409,  416,  416,  416,  301,
      300,  416,  418,  418,  418,  422,  256,  418,  422,  415,
      423,  424,  425,  423,  252,  425,  426,  419,  427,  426,

      251,  427,  430,  430,  430,  250,  421,  422,  414,  428,
      428,  428,  444,  447,  428,  448,  447,  249,  448,  452,
      427,  483,  452,  418,  483,  425,  423,  444,  246,  426,
      245,  449,  449,  449,  244,  444,  449,  451,  451,  451,
      453,  453,  451,  243,  453,  452,  454,  454,  447,  197,
      454,  475,  455,  455,  475,  448,  455,  456,  456,  456,
      457,  457,  456,  454,  457,  459,  459,  458,  458,  459,
      453,  458,  193,  460,  460,  475,  192,  460,  451,  461,
      461,  191,  190,  461,  462,  462,  462,  455,  188,  462,
      463,  463,  187,  186,  463,  459,  457,  185,  458,  460,

      464,  464,  461,  140,  464,  465,  465,  466,  466,  465,
      136,  466,  473,  467,  467,  473,  135,  467,  468,  468,
      469,  469,  468,  134,  469,  470,  470,  471,  463,  470,
      471,  472,  472,  472,  133,  474,  472,  464,  474,  132,
      476,  465,  467,  476,  477,  468,  131,  477,  130,  469,
      129,  473,  478,  478,  482,  478,  471,  482,  470,  479,
      479,  479,  128,  127,  479,  476,  481,  481,  481,  484,
      474,  481,  484,  485,  486,  487,  485,  486,  487,  477,
       94,  490,  489,  488,  490,  489,  488,  491,   89,   88,
      491,  478,  492,  492,  492,   87,   86,  492,  494,  494,

      494,  512,  482,  494,  512,  487,  485,  481,  488,   85,
      513,  486,  489,  513,   83,  484,   79,  490,  495,  495,
      495,  514,  514,  514,   46,  491,  514,  515,  515,  515,
      516,  516,  515,   36,  516,  574,  513,  555,  574,  494,
      555,  512,  517,  517,   35,   34,  517,  518,  518,  518,
      521,  521,  518,  516,  521,  540,  522,  522,  540,  555,
      522,  523,  523,  523,  524,  524,  523,   33,  524,  517,
      520,  520,  520,  525,  525,  520,  521,  525,  526,  526,
      526,   32,   28,  526,  540,  520,   13,  520,   12,  529,
      529,  520,  522,  529,  530,  530,  531,  531,  530,   11,

      531,    8,  524,  542,  532,  532,  542,  520,  532,  535,
      535,  520,  529,  535,  525,  528,  528,  528,  537,    7,
      528,  537,  531,  533,  533,  534,  534,  533,  530,  534,
      528,    0,  528,  534,  536,  536,  528,    0,  536,  542,
      535,    0,  536,    0,  532,    0,  538,  538,  538,    0,
      533,  538,  528,  539,  539,  539,  528,  537,  539,  541,
      543,  544,  541,  543,  544,  545,    0,    0,  545,  546,
      546,  546,  547,    0,  546,  547,  539,  548,  549,    0,
      548,  549,  551,  552,  541,  551,  552,  543,  550,  550,
      550,    0,  553,  550,  539,  553,  554,  590,  590,  554,

      544,  590,    0,  548,  556,  556,  556,  559,  559,  559,
        0,  547,  604,  545,  549,  604,    0,  551,  563,  563,
      563,  581,  581,  552,    0,  581,  553,  575,  575,  575,
      607,    0,  575,  607,  554,  576,  576,  576,  590,  604,
      576,  578,  578,  578,    0,    0,  578,  579,  579,  579,
        0,    0,  579,  580,  580,  580,  581,    0,  580,  582,
      582,  582,  583,  583,  582,    0,  583,  584,  584,    0,
      607,  584,  585,  585,  585,  588,  588,  585,  605,  588,
        0,  605,  578,  589,  589,  583,    0,  589,  591,  591,
        0,    0,  591,  584,  580,  587,  587,  587,  588,    0,

      587,  592,  592,  593,  593,  592,  602,  593,    0,  602,
      587,  605,  587,  589,  595,  595,  587,    0,  595,  596,
      596,  603,    0,  596,  603,  591,  597,  597,  606,  592,
      597,  606,  587,  598,  598,  602,  587,  598,  599,  599,
        0,  598,  599,  600,  600,  601,  601,  600,    0,  601,
      608,  608,  608,  597,  595,  608,    0,  603,  609,  609,
      609,    0,  599,  609,  606,  611,  611,  611,  612,  601,
      611,  612,  613,  613,  613,  614,    0,  613,  614,  600,
      615,  615,  615,    0,    0,  615,  617,  617,  617,  619,
      620,  617,  619,  620,  612,  618,  618,  618,  622,    0,

      618,  622,  621,  621,  621,    0,  611,  621,  623,  623,
      623,    0,    0,  614,  624,  624,  624,    0,  619,    0,
      620,  627,  627,  627,  629,  629,  629,  617,  641,    0,
        0,  641,  622,  642,  642,  642,    0,    0,  642,  644,
      644,  644,  645,  645,  644,    0,  645,  646,  646,  646,
      649,  649,  646,    0,  649,    0,  650,  650,  651,  651,
      650,    0,  651,  652,  652,  652,    0,  641,  652,  645,
      653,  653,  654,  654,  653,  667,  654,    0,  667,    0,
      644,  648,  648,  648,  650,    0,  648,  655,  655,  649,
        0,  655,  684,  657,  657,  684,  648,  657,  648,  651,

      653,  654,  648,  656,  656,  658,  658,  656,    0,  658,
      659,  659,    0,  667,  659,  660,  660,  660,  648,    0,
      660,    0,  648,    0,  655,    0,  661,  661,  656,  658,
      661,  684,  662,  663,  657,  662,  663,  659,  664,  665,
        0,  664,  665,  656,  666,  671,    0,  666,  671,  668,
      668,  668,    0,  661,  668,  670,  670,  670,    0,    0,
      670,  672,  672,  672,  701,    0,  672,  701,  662,  680,
      723,    0,  680,  723,  664,  665,  663,  724,    0,  666,
      724,  674,  674,  674,    0,  671,  674,  675,  675,  675,
      701,    0,  675,  676,  676,  676,  670,    0,  676,  678,

      678,  678,    0,    0,  678,  679,  679,  679,  723,  680,
      679,  681,  681,  681,    0,    0,  681,  724,  683,  683,
      683,    0,  674,  683,  685,  685,  685,  688,  688,  688,
      693,  693,  693,  694,  694,  694,  697,  697,  697,    0,
      678,  702,  702,  702,  703,  703,  702,    0,  703,  704,
      704,  705,  705,  704,    0,  705,  706,  706,  706,  683,
        0,  706,  709,  709,  709,  710,  710,  709,    0,  710,
      703,  711,  711,  712,  712,  711,    0,  712,    0,  713,
      713,  705,  748,  713,    0,  748,  704,  708,  708,  708,
      714,  714,  708,    0,  714,  720,  715,  715,  720,    0,

      715,    0,  708,  772,  708,  713,  772,  711,  708,  716,
      716,  716,  722,    0,  716,  722,  712,  714,  718,  718,
      718,    0,  748,  718,  708,  715,  719,  719,  708,  772,
      719,  721,  721,  721,  725,    0,  721,  725,  720,  726,
        0,    0,  726,  727,  727,  727,    0,  722,  727,  729,
      729,  729,    0,    0,  729,  719,  725,  752,  752,  718,
      768,  752,  721,  768,  726,    0,  726,  730,  730,  730,
        0,    0,  730,  732,  732,  732,    0,    0,  732,  733,
      733,  733,  775,    0,  733,  775,  734,  734,  734,  768,
      729,  734,  737,  737,  737,  739,  739,  739,  741,  741,

      741,  745,  745,  745,  749,  749,  749,  753,  753,  749,
      773,  753,    0,  773,  732,  751,  751,  751,    0,    0,
      751,  754,  754,  754,  758,  758,  754,    0,  758,    0,
      751,    0,  751,  755,  755,  755,  751,    0,  755,  776,
      760,  760,  776,  753,  760,  761,  761,  762,  762,  761,
      773,  762,  751,  785,  785,  785,  751,  757,  757,  757,
      763,  763,  757,    0,  763,    0,  764,  764,  774,  776,
      764,  774,  757,    0,  757,  765,  765,    0,  757,  765,
      760,  766,  766,  767,  767,  766,    0,  767,  762,  764,
      769,  769,  769,    0,  757,  769,  763,    0,  757,    0,

      771,  771,  771,  774,  765,  771,  777,  793,  793,  777,
      805,  793,  766,  805,  767,  778,  778,  778,  807,  791,
      778,  807,  791,  771,  780,  780,  780,    0,    0,  780,
      781,  781,  781,  797,  797,  781,  805,  797,  783,  783,
      783,  771,  777,  783,  791,    0,  791,    0,  793,  794,
      794,  794,  798,  798,  794,    0,  798,  799,  799,    0,
      797,  799,  800,  800,    0,  780,  800,  801,  801,    0,
        0,  801,  802,  802,  803,  803,  802,  798,  803,  783,
      792,  792,  804,  804,  792,  806,  804,  808,  806,    0,
      808,    0,  798,    0,  792,  809,  792,    0,  809,    0,

      792,  831,  810,  802,  831,  810,    0,  801,  792,  808,
      803,  811,    0,    0,  811,  809,  792,    0,  804,    0,
      792,  796,  796,  796,  817,  832,  796,  817,  832,  806,
      815,  815,  815,    0,  809,  831,  796,  810,  796,  818,
      818,    0,  796,  818,  819,  819,  811,    0,  819,  820,
      820,  821,  821,  820,  860,  821,  862,  860,  796,  862,
      817,    0,  796,  822,  822,  823,  823,  822,    0,  823,
      824,  824,  828,    0,  824,  828,  818,  825,  825,  833,
      834,  825,  833,  834,  822,    0,  826,  826,  826,  830,
      820,  826,  830,  823,  821,  862,  827,  827,  827,  841,

      824,  827,  841,  822,    0,  823,  829,  829,  829,  830,
      830,  829,    0,  825,  842,  842,  828,    0,  842,  833,
      834,  838,  838,  838,    0,  845,  845,  856,  830,  845,
      856,  844,  844,    0,  841,  844,  846,  846,  847,  847,
      846,    0,  847,  848,  848,  848,  863,    0,  848,  863,
      842,  843,  843,  920,    0,  843,  920,  844,  849,  849,
      849,  845,    0,  849,    0,  843,    0,  843,    0,  847,
      856,  843,  843,  850,  850,  850,    0,    0,  850,  852,
      852,  852,  920,  861,  852,  863,  861,  843,  853,  853,
      853,  843,    0,  853,  855,  855,  855,    0,    0,  855,

      857,  857,  857,    0,    0,  857,  859,  859,  859,  861,
        0,  859,  864,  864,  864,  869,    0,  864,  869,    0,
      852,  870,  870,  871,  871,  870,    0,  871,    0,  859,
      872,  872,  873,  873,  872,  855,  873,  874,  874,  875,
      875,  874,    0,  875,  876,  876,  876,  859,  882,  876,
        0,  882,    0,  872,    0,  869,  878,  878,  878,    0,
        0,  878,  870,  879,  879,  879,    0,    0,  879,  881,
      881,  881,    0,  883,  881,  875,  883,  874,  882,  884,
      884,  884,    0,    0,  884,  885,  885,  885,    0,    0,
      885,  886,  886,  886,  883,    0,  886,  878,  888,  888,

      888,    0,    0,  888,  890,  890,  890,  896,  896,    0,
      881,  896,  883,  893,  893,  893,    0,    0,  893,  894,
      894,  894,  897,  897,  894,    0,  897,  898,  898,  899,
        0,  898,  899,  900,  900,  900,    0,    0,  900,  888,
      895,  895,  918,  918,  895,  942,  918,  896,  942,    0,
      897,  917,  917,  898,  895,  917,  895,  906,  906,  906,
      895,    0,  897,  902,  902,  902,    0,    0,  902,  899,
      903,  903,  903,  918,    0,  903,  895,  905,  905,  905,
      895,  917,  905,  907,  907,  907,  902,  911,  911,  911,
      942,    0,  911,  913,  913,  913,  950,    0,  913,  950,

      914,  914,  914,    0,  902,  914,  921,  921,  921,    0,
      919,  919,    0,    0,  919,  922,  922,  922,  905,  926,
      926,  926,  927,  927,  926,  950,  927,  928,  928,  929,
      937,  928,  929,  937,  913,  916,  916,  916,  919,    0,
      916,  932,  932,  932,  935,  935,  932,    0,  935,    0,
      916,  946,  916,    0,  946,    0,  916,  929,  927,    0,
      934,  934,  934,  937,  928,  934,    0,  936,  936,    0,
      935,  936,  916,    0,  940,  940,  916,    0,  940,  941,
      941,  944,  944,  941,    0,  944,  945,  945,  946,    0,
      945,  948,  948,  949,  949,  948,  954,  949,    0,  954,

        0,  934,  940,  936,  952,  952,  953,  953,  952,    0,
      953,  956,  956,    0,  949,  956,    0,    0,  944,    0,
      941,  957,  957,    0,    0,  957,    0,  948,    0,  958,
      958,  958,    0,  949,  958,  954,  960,  960,    0,    0,
      960,  961,  961,  961,    0,  952,  961,  963,  963,  963,
      965,  965,  963,    0,  965,  967,  967,  960,    0,  967,
        0,  957,  975,  975,  975,  976,  976,  976,    0,    0,
      963,    0,    0,    0,    0,    0,  960,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  963,    0,
        0,    0,    0,    0,    0,  967,  979,  979,  979,  979,

      979,  980,  980,  980,  980,  980,  981,  981,  981,  981,
      981,  982,  982,  982,  982,  982,  983,  983,  983,  983,
      983,  984,    0,  984,  984,  984,  985,  985,  985,  985,
      985,  986,    0,  986,  986,  986,  987,  987,  987,  987,
      987,  988,    0,  988,  989,  989,  989,  989,  989,  990,
      990,  991,  991,  991,  991,  991,  992,  992,  992,  992,
      992,  993,    0,  993,  993,  993,  994,  994,  994,  994,
      994,  995,  995,  995,  995,  995,  978,  978,  978,  978,
      978,  978,  978,  978,  978,  978,  978,  978,  978,  978,
      978,  978,  978,  978,  978,  978,  978,  978,  978,  978,

      978,  978,  978,  978,  978,  978,  978,  978,  978,  978,
      978,  978,  978,  978,  978,  978,  978,  978,  978,  978,
      978,  978,  978,  978,  978,  978,  978,  978,  978
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#define YY_NO_UNISTD_H 1
//debug static int DC = 0; 
/*
   makeedit.l : This file is part of pstoedit
   Simple parser to parse the intermediate flat PostScript and call the backend
   output routines.

   Copyright (C) 1993 - 2009 Wolfgang Glunz, wglunz35_AT_pstoedit.net

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

*/

// define YY_NO_UNISTD_H 
// define YY_NEVER_INTERACTIVE 1
// to avoid usage of isatty

#include "cppcomp.h"
#include I_iostream
#include I_fstream

#include I_string_h

#include <math.h>

USESTD

#include "psfront.h"
#include "miscutil.h"

static float  origx, origy;
static char   *start_of_text;
static char   *end_of_text;
static float  number;

#define YY_SKIP_YYWRAP
static int yywrap() { return 1;}

static int secondlineno = 0;
static void checkforlinefeed(const char * currenttext) {
	while(currenttext && (*currenttext)) { if (*currenttext == '\n') secondlineno++; currenttext++;}
}

#define YY_USER_ACTION checkforlinefeed(yytext);

static void cleanyytext() {
	// replaces \r or \n from the end with \0
	char * beg = yytext;
	char * cp = &yytext[strlen(yytext)-1];
	while (cp != beg && ((*cp == '\n') || (*cp == '\r'))) {
		*cp = '\0';
		cp--;
	}
}

static inline int toInt(const float f) { 
	return (f > 0.0f) ? (int)(f+0.5f) : (int)(f-0.5f);
}

static inline float minf(float f1, float f2) { return (f1<f2) ? f1:f2; }
static const int debuglexer = 0;

#define YY_NO_UNPUT
// to avoid compiler warning

// define YY_DECL int yylex YY_PROTO(( *outputdriver ))
#define YY_DECL int PSFrontEnd::yylex()

#define CHECKconstraints if (!constraintsChecked) { errf << "input file did not contain a backendconstraints directive. Cannot proceed. " << endl; return 1; }

//lint -emacro(773, BEGIN)
// Expression-like macro 'BEGIN' not parenthesized
//lint -emacro(553,YY_STACK_USED)
//lint -emacro(553,YY_MAIN)
//lint -emacro(553,YY_ALWAYS_INTERACTIVE)

//lint -e801 // goto is used in generated state machine
//lint -esym(613,b)  // use of null pointer
//lint -esym(613,buf) //

#define INITIAL 0
#define READPATH 1
#define READIMAGE 2
#define READPROLOG 3
#define READBBOXNUMBERS 4
#define READBBOX 5

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 979 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 978 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
{ 
	// not in READPROLOG !!
// Work around for Linux libg++ bug
			 number = (float) atof(yytext);
// Original
//			 istrstream s(yytext);
//			 s >> number;

 // cout << "adding number   : " << number << " " << yytext << endl;
			 
			 addNumber(number );
			}
	YY_BREAK
case 2:
YY_RULE_SETUP
{}
	YY_BREAK
case 3:
YY_RULE_SETUP
{ BEGIN(READBBOXNUMBERS); }
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
{ 
			lineNumber++;
	const float ury = popUnScaled(); 
	const float urx = popUnScaled(); 
	bboxes_ptr[currentPageNumber].ur = Point(urx,ury);	
	
	const float lly = popUnScaled(); 
	const float llx = popUnScaled();
	bboxes_ptr[currentPageNumber].ll = Point(llx,lly);

//	cerr << llx <<  " " << lly <<  " " << urx <<  " " << ury << endl;
	currentPageNumber++;
	BEGIN(READBBOX);
}
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
{ if (yytext[0] == '\n') lineNumber++; }
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
{ 
	if (yytext[0] == '\n') lineNumber++;
//	cout << " <READBBOXNUMBERS> " << yytext << endl;
}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
{
			lineNumber++;
			const int flattened = toInt(popUnScaled());
			const int textastext = toInt(popUnScaled());
			if (!driverDesc->backendSupportsText    && textastext) {
				errf << "Warning: this preprocessed input file contains text but the selected backend does NOT support this - Hint: use -dt option for preprocessing" << endl;
			}
			if (!driverDesc->backendSupportsCurveto && !flattened) {
				errf << "Warning: this preprocessed input file possibly contains curves but the selected backend does NOT support this. Curves will be converted to a set of straight lines." << endl;
				// return(1);
			}
			constraintsChecked=true;
			}
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
{ 
			lineNumber++;
			CHECKconstraints
			backend->showpage();

			currentPageNumber++;
			if (currentPageNumber <= drvbase::totalNumberOfPages) {
			if ( splitpages ) {
				if(outfilename) {
					if (strstr(outfilename,"%d") == NIL) {
						errf << "Warning: no %d found in name of output file and page feed found in input and either the selected format does not support multiple pages or the -split option was specified.\nPlease insert a %d in the name of the output file if you want to split pages into different files" << endl;
						// we cannot close the output file in this case otherwise
						// we would overwrite the previous results
					} else  {
						delete backend; backend = 0; // 
						ofstream * outputFilePtr = (ofstream *) &outFile;
						const unsigned int size = strlen(outfilename) + 30;
						char * newname = new char[ size ];
						sprintf_s(TARGETWITHLEN(newname,size),outfilename,currentPageNumber);
						// not needed here since done in main program convertBackSlashes(nameOfOutputFile);
						if (driverDesc->backendFileOpenType != DriverDescription::noopen ){ 
							outputFilePtr->close();
							if (driverDesc->backendFileOpenType == DriverDescription::binaryopen ) { 
// old if (defined(unix) || defined() || defined(_unix) || defined(__unix) || defined(__EMX__) || defined (NetBSD) ) && !defined(DJGPP)
#if defined(PSTOEDIT_UNIXLIKE)
// binary is not available on UNIX, only on PC
								outputFilePtr->open(newname,ios::out);
#else
								// use redundant ios::out because of bug in djgpp
								outputFilePtr->open(newname,ios::out | ios::binary);
#endif
								// errf << "opened " << newname << " for binary output" << endl;
							} else {
								outputFilePtr->open(newname);
								// errf << "opened " << newname << " for output" << endl;
							}
							if (outFile.fail() ) {
								errf << "Could not open file " << newname << " for output" << endl;
								delete [] newname;
								return 1;
							} // fail
						} // backend opens file by itself
						backend =  driverDesc->CreateBackend(driveroptions,*outputFilePtr,errf,infilename,newname,globaloptions);
						delete [] newname;
						if (!backend->driverOK()) {
							errf << "Creation of driver for new page failed " << endl;
							return (1);
						}
						backend->currentPageNumber = currentPageNumber - 1; // backend will add one again in open_page
					} // file name contains %d
				} else {
					errf << "Cannot split pages if output is standard output" << endl;
					return(1);
				} // outfilename
			} // splitpages
			} else {
				// ignore any showpage for pages greater than totalNumberOfPages
				if (backend->verbose) errf << "page " << currentPageNumber << " is greater than expected maximum number of pages " << drvbase::totalNumberOfPages << endl;
				return 0; // normal return code;
			}
		      }
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
{ 
			lineNumber++;
			if (backend->numberOfElementsInPath() != 0) {
				errf << "Error, path number " << pathnumber << " was not cleared correctly" << endl;
			}

			pathnumber++;
			BEGIN(READPATH); 
			backend->setIsPolygon(false);
			backend->setPathNumber(pathnumber);
			}
	YY_BREAK
case 10:
YY_RULE_SETUP
{
			/* old version: /Helvetica findfont 14 scalefont setfont */
			/* (Helvetica) cvn findfont  [  3.0 8.31384 -5.19615 4.8 106.699 455.692 ] makefont setfont */
			/* new version because sometimes the new name contains a % */
			if (!non_standard_font) {
			// in the case of a non standard font, the setCurrentFontName was
			// done during handling of nonstandard font
				start_of_text = strchr (yytext,(int)'(') + 1 ;
				end_of_text = strrchr (yytext,(int)')') ;
				if (end_of_text) *end_of_text = (char) 0;
				backend->setCurrentFontName(start_of_text,0);
			}
			non_standard_font = 0; // reset 
			}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
{
				lineNumber++;
				//may lead to a lot of messages : 
				if (backend->verbose) errorMessage(yytext);
				// wogl;
			}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
{
				lineNumber++;
				BEGIN(READPROLOG);
			}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
{
				lineNumber++;
				BEGIN(INITIAL);
			}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
{ 
			lineNumber++;
			/* fprintf(stderr,"%s\n",yytext);  */
			start_of_text = yytext+2;
			end_of_text =  strrchr (yytext,(int)' ') ;
			if (end_of_text) *end_of_text = (char) 0;
			backend->setCurrentFontFamilyName(start_of_text);
			}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
{ 
			lineNumber++;
			/* fprintf(stderr,"%s\n",yytext);  */
			start_of_text = yytext+2;
			end_of_text =  strrchr (yytext,(int)' ') ;
			if (end_of_text) *end_of_text = (char) 0;
			backend->setCurrentFontFullName(start_of_text);
			}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
{ 
			lineNumber++;
			/* fprintf(stderr,"%s\n",yytext);  */
			start_of_text = yytext+2;
			end_of_text =  strrchr (yytext,(int)' ') ;
			if (end_of_text) *end_of_text = (char) 0;
			backend->setCurrentFontWeight(start_of_text);
			}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
{
			lineNumber++;
			/* % Times-Roman Times-Roman@0 nonstandard font */
			/* % Bla Bla nonstandard font */ /* if it is not derived from a standard font */
			start_of_text = yytext+2;
			end_of_text =  strchr (start_of_text,(int)' ') ;
			if (end_of_text) {
				*end_of_text = (char) 0;
				char* start_of_secondname = end_of_text + 1;
				char* end_of_secondname = strchr (start_of_secondname,(int)' ') ;
				if (end_of_secondname) {
					*end_of_secondname = (char) 0;
					non_standard_font = 1; // this avoids a further setting of CurrentFontName
					if (strcmp(start_of_text,start_of_secondname) == 0 ) {
						// both names are equal, so it's not a derived font
						backend->setCurrentFontName(start_of_text,1);
					} else {
						// it's a derived font, so use the base name
						backend->setCurrentFontName(start_of_text,0);
					}
				} else {
					errf << "pstoedit: internal error - font statement did not follow expected syntax" << endl;
				}
			} else {
				errf << "pstoedit: internal error - font statement did not follow expected syntax" << endl;
			}
			}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
{
			lineNumber++;
			backend->beginClipPath();
			}
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
{
			lineNumber++;
			backend->setCurrentShowType(drvbase::eofill);
			}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
{
			lineNumber++;
			backend->setCurrentShowType(drvbase::fill);
			}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
{
			lineNumber++;
			backend->setCurrentShowType(drvbase::stroke);
			}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
{
				lineNumber++;
				errf << yytext;
			}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
{
				lineNumber++;
				addNumber(0.0f ); // pseudo false
			}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
{
				lineNumber++;
				addNumber(1.0f ); // pseudo true
			 }
	YY_BREAK
case 25:
YY_RULE_SETUP
{ // begin of some Data Comment, just ignore the marker
			}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
{
/*
sequence:

../tests/image/colorimage.ps.ps:%colorimage:begin
../tests/image/colorimage.ps.ps:%colorimage:ncomp
../tests/image/colorimage.ps.ps:%colorimage:multi
../tests/image/colorimage.ps.ps:%colorimage:imagematrix
../tests/image/colorimage.ps.ps:%colorimage:normalized image currentmatrix
../tests/image/colorimage.ps.ps:%colorimage:bits
../tests/image/colorimage.ps.ps:%colorimage:height
../tests/image/colorimage.ps.ps:%colorimage:width
../tests/image/colorimage.ps.ps:%colorimage:data
../tests/image/colorimage.ps.ps:%colorimage:end 

../tests/image/hw.ps.ps:%image:begin
../tests/image/hw.ps.ps:%image:imagematrix
../tests/image/hw.ps.ps:%image:normalized image currentmatrix
../tests/image/hw.ps.ps:%image:bits 
../tests/image/hw.ps.ps:%image:height
../tests/image/hw.ps.ps:%image:width
../tests/image/hw.ps.ps:%image:data
../tests/image/hw.ps.ps:%image:data
../tests/image/hw.ps.ps:%image:end

../tests/image/hwuse.eps.ps:%imagemask:begin
../tests/image/hwuse.eps.ps:%imagemask:imagematrix
../tests/image/hwuse.eps.ps:%imagemask:normalized image currentmatrix
../tests/image/hwuse.eps.ps:%imagemask:polarity
../tests/image/hwuse.eps.ps:%imagemask:height
../tests/image/hwuse.eps.ps:%imagemask:width
../tests/image/hwuse.eps.ps:%imagemask:data
../tests/image/hwuse.eps.ps:%imagemask:data
../tests/image/hwuse.eps.ps:%imagemask:end

%begin dealing with image from dict
%fileimage:begin
% DC  640 0 0 -480 0 480
%fileimage:imagematrix
%fileimage:filename but.dump_1.png
% DC  640
%fileimage:width
% DC  480
%fileimage:height
%fileimage:end
grestore %}
%end dealing with image from dict

*/
				if (debuglexer) { 
					cerr << "handling " << yytext ;
					pstack();
				}
				backend->imageInfo.isFileImage = false ;
				backend->imageInfo.type = colorimage;
				// ncomp will be written later
				// bits will be written later
				backend->imageInfo.polarity = true; 
				BEGIN(READIMAGE); 
			}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
{
				lineNumber++;
				if (debuglexer) { 
					cerr << "handling " << yytext ;
					pstack();
				}
				backend->imageInfo.isFileImage = true ;
				backend->imageInfo.type = normalimage;
				backend->imageInfo.ncomp = 1;
				// bits will be written later
				backend->imageInfo.polarity = true; 
				BEGIN(READIMAGE); 
			}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
{
				lineNumber++;
				if (debuglexer) { 
					cerr << "handling " << yytext ;
					pstack();
				}
				backend->imageInfo.isFileImage = false ;
				backend->imageInfo.type = normalimage;
				backend->imageInfo.ncomp = 1;
				// bits will be written later
				backend->imageInfo.polarity = true; 
				BEGIN(READIMAGE); 
			}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
{
				lineNumber++;
				if (debuglexer) { 
					cerr << "handling " << yytext ;
					pstack();
				}
				backend->imageInfo.isFileImage = false ;
				backend->imageInfo.type = imagemask;
				backend->imageInfo.ncomp = 1;
				// polarity will be written later
				backend->imageInfo.bits = 1;
				BEGIN(READIMAGE); 
			}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
{
				lineNumber++;
				if (debuglexer) { 
					cerr << "handling " << yytext ;
					pstack();
				}

				// replace newline with eos
				cleanyytext();
				// yytext[strlen(yytext)-1] = '\0';
				//cout << "filename: {" << yytext << "}" << endl;
				backend->imageInfo.FileName = yytext+strlen("%fileimage:filename")+1;
			}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
{
				lineNumber++;
				if (debuglexer) { 
					cerr << "handling " << yytext ;
					pstack();
				}
				backend->imageInfo.ncomp = (short) toInt(popUnScaled());
			}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
{ // only set for imagemask
				lineNumber++;
				if (debuglexer) { 
					cerr << "handling " << yytext ;
					pstack();
				}
				backend->imageInfo.polarity = toInt(popUnScaled()) > 0.5 ;  // convert from float to bool
			}
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
{
				lineNumber++;
				if (debuglexer) { 
					cerr << "handling " << yytext ;
					pstack();
				}
				(void)pop(); // not used so far
			}
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
{
				lineNumber++;
				if (debuglexer) { 
					cerr << "handling " << yytext ;
					pstack();
				}
				for (unsigned int i = 0; i < 6 ; i++ ) {
					backend->imageInfo.imageMatrix[5-i] = popUnScaled();
				}
			}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
{
				lineNumber++;
				if (debuglexer) { 
					cerr << "handling " << yytext ;
					pstack();
				}
				for (unsigned int i = 0; i < 6 ; i++ ) {
					backend->imageInfo.normalizedImageCurrentMatrix[5-i] = popUnScaled();
				}
			}
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
{ // only set for normalimage and colorimage
				lineNumber++;
				if (debuglexer) { 
					cerr << "handling " << yytext ;
					pstack();
				}
				backend->imageInfo.bits = (short) toInt(popUnScaled());
			}
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
{
				lineNumber++;
				if (debuglexer) { 
					cerr << "handling " << yytext ;
					pstack();
				}
				backend->imageInfo.height = toInt(popUnScaled());
			}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
{
				lineNumber++;
				if (debuglexer) { 
					cerr << "handling " << yytext ;
					pstack();
				}
				backend->imageInfo.width = toInt(popUnScaled());
			}
	YY_BREAK
case 39:
YY_RULE_SETUP
{
			CHECKconstraints
				if (debuglexer) { 
					cerr << "handling " << yytext ;
					pstack();
				}
//cerr << "handling DC " << DC++ << endl;
//cerr << "handling " << yytext ;
//cerr << "strlen " << strlen(yytext) << endl ;
				unsigned int size = backend->imageInfo.height * ((backend->imageInfo.ncomp * backend->imageInfo.width  * backend->imageInfo.bits + 7 ) / 8);
				if (backend->imageInfo.data == 0) {
// cerr << " allocating " << size << " for image data " << endl;
					backend->imageInfo.data = new unsigned char[size];
					if (backend->imageInfo.data==0) {
						cerr << "out of memory for image data" << endl;
						return(1);
					}
					backend->imageInfo.nextfreedataitem = 0;
					// init
//					for (unsigned int i = 0 ; i < size; i++) {
//						backend->imageInfo.data[i] = 0;
//					}
				}
				cleanyytext();
				const char * cp = yytext;
				// search for ' '
				while (cp && (*cp != ' ')) cp++; 
				// now cp points to blank
				cp++;
//cerr << "effective length " << strlen(cp) << endl;
				do {
					const char chigh = *cp;
					const unsigned int high = hextoint(*cp);
					// cout << "scanned1 " << (int) *cp << endl;
					cp++;
					if (*cp == '\0') {
						cerr << "data format error (not a hex number) in line " << lineNumber << " " << secondlineno << endl;
						return(1);
					}
					const char clow = *cp;
					const unsigned int low = hextoint(*cp);
					// cout << "scanned2 " << (int) *cp << endl;
					cp++; 
					if ( backend->imageInfo.nextfreedataitem < size ) {
						backend->imageInfo.data[backend->imageInfo.nextfreedataitem] = (unsigned char) (high * 16 + low);
//						cerr << backend->imageInfo.nextfreedataitem << ":" << chigh<< clow << endl;
						backend->imageInfo.nextfreedataitem++;
					}  else {
						cerr << "too many data in line " << lineNumber << " size is " << size << " : ignoring " << (cp-2) << "|" << chigh << clow << endl;
						break;
					}
				} while (cp && (*cp != '\0'));

			}
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
{
				lineNumber++;
				if (debuglexer) { 
					cerr << "handling " << yytext ;
					pstack();
				}

				backend->dumpImage();
			 	BEGIN(INITIAL);
			}
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
{
				lineNumber++; 
				if (debuglexer) cerr << "comment ignored " << yytext;
			}
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
{
			lineNumber++;
			// setCurrentFontSize(number );
			float matrix[6];
			matrix[5] = pop();
			matrix[4] = pop();
			matrix[3] = pop(); // sy * cos(phi)
			matrix[2] = pop(); // sy * -sin(phi)
			matrix[1] = pop(); // sx * sin(phi)
			matrix[0] = pop(); // sx * cos(phi)
			backend->setCurrentFontMatrix(matrix);
			const float fsizex = (float) pythagoras(matrix[0] , matrix[1]);
			const float fsizey = (float) pythagoras(matrix[2] , matrix[3]);
			const float todegrees =   180.0f / 3.14159265358979323846f ;
			float phix = (matrix[0] != 0.0f) ? (todegrees * (float) atan(matrix[1] / matrix[0]) ) : (matrix[1] > 0 ? 90.0f : -90.0f );
//			float phiy = todegrees * atan(-1.0 * matrix[2] / matrix[3]);
			if (matrix[0] < 0.0f ) phix = 180 + phix; // if cos (phi) < 0 than add 180
//			if (matrix[3] < 0.0f ) phiy = 180 + phiy;
			if (phix < 0.0f ) phix = 360 + phix;
//			if (phiy < 0.0f ) phiy = 360 + phiy;
//			for (int i = 0; i < 6; i++ ) cout << "matrix [" << i << "] " << matrix[i] << " ";
//			cout << fsizex << " " << fsizey  << " " << endl;
//			cout << phix << " " << phiy  << " "  << endl;
			backend->setCurrentFontSize((fsizex + fsizey)/2.0f);
			backend->setCurrentFontAngle(phix);
			}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
{
//obsolete
			lineNumber++;
			// setCurrentFontSize(number );
			backend->setCurrentFontSize(pop());
			// pop(); 
			}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
{
			lineNumber++;
			start_of_text = strchr (yytext,(int)'(') + 1 ;
			end_of_text = strrchr (yytext,(int)')') ;
			if (end_of_text) *end_of_text = (char) 0;
			backend->setColorName(start_of_text);
			}			
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
{
			lineNumber++;
			const float B = popUnScaled();
			const float G = popUnScaled();
			const float R = popUnScaled();
			/* printf("%s %f %f %f\n","setting RGB to ",R,G,B); */
			backend->setRGB(R,G,B);
			}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
{
			lineNumber++;
			const float K = popUnScaled();
			const float Y = popUnScaled();
			const float M = popUnScaled();
			const float C = popUnScaled();
			const unsigned int colormodel = 3;
			// http://www.efg2.com/Lab/Library/Color/AndComputers.htm
			switch (colormodel) {
			case 1: {
			const float R = 1.0f - minf(1.0f,C+K); // according to PLRM page 307
			const float G = 1.0f - minf(1.0f,M+K);
			const float B = 1.0f - minf(1.0f,Y+K);
	//		printf("%s %f %f %f\n","setting RGB to ",R,G,B);
						backend->setRGB(R,G,B);
						}
						break;
			case 2: {
			
			/* alternative formula
	http://research.microsoft.com/~hollasch/cgindex/color/cmyk.html
	http://www.ghostscript.com/pipermail/gs-cvs/2002-November/002588.html
	
	http://www.paris-pc-gis.com/MI_Enviro/Colors/color_models.htm
			  R = (1.0 - C) * (1.0 - K), etc. 
			*/

			const float R = (1.0f - C)*(1.0f - K); 
			const float G = (1.0f - M)*(1.0f - K);
			const float B = (1.0f - Y)*(1.0f - K);
	//		printf("%s %f %f %f\n","setting RGB to ",R,G,B);
						backend->setRGB(R,G,B);
			}
			break;
			case 3: {
			
/*

	http://www.neuro.sfc.keio.ac.jp/~aly/polygon/info/color-space-faq.html

RGB -> CMYK				            | CMYK -> RGB
Black=minimum(1-Red,1-Green,1-Blue)	| Red=1-minimum(1,Cyan*(1-Black)+Black)
Cyan=(1-Red-Black)/(1-Black)	    | Green=1-minimum(1,Magenta*(1-Black)+Black)
Magenta=(1-Green-Black)/(1-Black)	| Blue=1-minimum(1,Yellow*(1-Black)+Black)
Yellow=(1-Blue-Black)/(1-Black)	    |
*/

			const float R = 1.0f - minf(1.0f,C*(1-K)+K); 
			const float G = 1.0f - minf(1.0f,M*(1-K)+K);
			const float B = 1.0f - minf(1.0f,Y*(1-K)+K);
	//		printf("%s %f %f %f\n","setting RGB to ",R,G,B);
						backend->setRGB(R,G,B);
				}
			break;
			default: break;
			}
			
			}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
{
				lineNumber++;
				cleanyytext();
				yytext[strlen(yytext) - 8] = '\0'; // strip of trailing setdash
				backend->setDash(yytext+1); // don't copy leading space
			}
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
{
				lineNumber++;
				backend->setCurrentMiterLimit(number);
				(void) pop(); 
			}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
{
				lineNumber++;
				backend->setCurrentLineJoin((int) (number +0.5));
				(void) pop(); 
			}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
{
				lineNumber++;
				backend->setCurrentLineCap((int) (number +0.5));
				(void) pop(); 
			}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
{
				lineNumber++;
				backend->setCurrentLineWidth(pop() );
//				setCurrentLineWidth(number  );
//				pop(); 
			}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
{
				lineNumber++;
				float height = pop(); 
				if (height < 1.0 ) { height = 792 * backend->getScale() ; }
				backend->setCurrentDeviceHeight(height);
				float width  = pop(); 
				if (width < 1.0 ) { width = 612 * backend->getScale() ; }
				backend->setCurrentDeviceWidth(width);
				if (backend->verbose) errf << "handling setPageSize (w,h)(" << width  << "," << height << ")"<< endl;
			}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
{
				lineNumber++;
				const bool  mappedtoisolatin1 = pop() > 0.5; // float to bool
				const float y_end = pop();
				const float x_end = pop();
				const float ay = pop();
				const float ax = pop();
				const int   Char = (int) (popUnScaled()   +0.5);	
				const float cy = pop();
				const float cx = pop();
				backend->setMappedtoisolatin1(mappedtoisolatin1);
				backend->setCurrentWidthParams(ax,ay,Char,cx,cy,x_end,y_end);
			}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
{ 
				lineNumber++;
			CHECKconstraints
			start_of_text = strchr (yytext,(int)'(') + 1 ;
			end_of_text = strrchr (yytext,(int)')') ;
			if (end_of_text) *end_of_text = (char) 0;
			const float y = pop(); /* just the last moveto (0 0 in case of makefont) */
			const float x = pop(); /* just the last moveto (0 0 in case of makefont) */
			/* backend->dumpText(start_of_text,x,y); */
			backend->pushHEXText(start_of_text,x + backend->getCurrentFontMatrix()[4],y + backend->getCurrentFontMatrix()[5]);
			}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
{ 
				lineNumber++;
// (68656c6c6f20776f726c64) [ /h /e /l /l /o /space /w /o /r /l /d ] awidthshowhexwithglyphs
			CHECKconstraints
			start_of_text = strchr (yytext,(int)'(') + 1 ;
			end_of_text = strrchr (yytext,(int)')') ;
			char * start_of_glyphs = strchr(yytext,(int)'[') + 2;
			char * end_of_glyphs = strrchr(yytext,(int)']');
			if (end_of_glyphs) *(end_of_glyphs-1) = (char) 0;
			if (end_of_text) *end_of_text = (char) 0;
			//cout << "text :" << start_of_text << " glyphs : " << start_of_glyphs << endl;
			const float y = pop(); /* just the last moveto (0 0 in case of makefont) */
			const float x = pop(); /* just the last moveto (0 0 in case of makefont) */
			/* backend->dumpText(start_of_text,x,y); */
			backend->pushHEXText(start_of_text,x + backend->getCurrentFontMatrix()[4],y + backend->getCurrentFontMatrix()[5], start_of_glyphs);

			}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
{ 
				lineNumber++;
			CHECKconstraints
			start_of_text = strchr (yytext,(int)'(') + 1 ;
			end_of_text = strrchr (yytext,(int)')') ;
			if (end_of_text) *end_of_text = (char) 0;
			const float y = pop(); /* just the last moveto (0 0 in case of makefont) */
			const float x = pop(); /* just the last moveto (0 0 in case of makefont) */
			/* backend->dumpText(start_of_text,x,y); */
			backend->pushText(strlen(start_of_text),start_of_text,x + backend->getCurrentFontMatrix()[4],y + backend->getCurrentFontMatrix()[5]);
			/* old - zeropatch backend->pushText(start_of_text,x + backend->getCurrentFontMatrix()[4],y + backend->getCurrentFontMatrix()[5]); */
			}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
{
// obsolete
				lineNumber++;
			backend->setCurrentFontAngle(number);
			(void) pop();
			}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
{
//obsolete
				lineNumber++;
			/* Because this is in the preamble, only pop 
			   this has put something on the stack. */
			if (nextFreeNumber >= 2)
				{ (void)pop(); (void)pop(); }
			}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
{
//obsolete
				lineNumber++;
			/* Because this is in the preamble, only pop 
			   this has put something on the stack. */
			if (nextFreeNumber >= 2)
				{ (void)pop(); (void)pop(); }
			}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
{ 
			if (yytext[0] == '\n') lineNumber++;
	/* cout << "ignored '" << yytext << "'"; */ /* ignore any other stuff */ 
	}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
{ 
				lineNumber++;
			CHECKconstraints
			// save coordinates for possible closepath
			origy = pop();
			origx = pop();
			if (backend->numberOfElementsInPath() > 1) {
				// this is an intermediate moveto
				// if backend supports subpaths add it
				// else dump last path and start a new one
				if (backend->globaloptions.simulateSubPaths || backend->Pdriverdesc->backendSupportsSubPathes) {
//					Point p(origx,origy);
					backend->addtopath(new Moveto(origx,origy));  
				} else {
					// dumppath
					backend->dumpPath();
					// start new path
//					Point p(origx,origy);
					backend->addtopath(new Moveto(origx,origy));  
					
				}
			} else {
				// it is a starting moveto
//				Point p(origx,origy);
				backend->addtopath(new Moveto(origx,origy));  
			}
			currentpoint = Point(origx,origy);
		   }
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
{
				lineNumber++;
			float y = pop();
			float x = pop();
//			Point p(x,y);
			backend->addtopath(new Lineto(x,y)); 
			currentpoint = Point(x,y);
			}
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
{ 
				lineNumber++;

			Point p[3];
			for (unsigned int i = 3; i > 0; i--) { 
				// !!! i = 2 to i>= 0 does not work for unsigned
				float y = pop();
				float x = pop();
				p[i-1] = Point(x,y);
			}

			if (backend->Pdriverdesc->backendSupportsCurveto) {
				backend->addtopath(new Curveto(p)); // pass p as array
			} else {

				const unsigned int sections = 10;

				const Point & cp1 = p[0];
				const Point & cp2 = p[1];
				const Point & ep  = p[2];

				for (unsigned int s = 0; s <= sections; s++) {
					const float t = 1.0f * s / sections;
					const Point pt = PointOnBezier(t, currentpoint, cp1, cp2, ep);
					backend->addtopath(new Lineto(pt.x_,pt.y_)); 
				}
//				errf << "illegal input received. curveto not expected by this backend\n";
//				return(1);			
			}
			currentpoint = Point(p[2].x_,p[2].y_);

			}
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
{
				lineNumber++;
			 Point startPoint(origx,origy);
			 const basedrawingelement & lastelem = backend->pathElement(backend->numberOfElementsInPath() -1 );
			// check for last == first. Then no additional
			// lineto is needed. and isPolygon can be set to true
			 if  ( (lastelem.getType() == lineto) && (lastelem.getPoint(0) == startPoint) ) {
				// remove last lineto - 
				// a closepath is sometimes nicer than a lineto (see closevsline.ps)
				if (backend->verbose) errf << "removing obsolete lineto " << endl; 
				backend->removeFromElementFromPath();
				// no need to close the path, it's already closed
			 } /* else */ {
				if (backend->globaloptions.simulateSubPaths || backend->Pdriverdesc->backendSupportsSubPathes) {
			 		backend->addtopath(new Closepath()); 
				} else {
			 		backend->addtopath(new Lineto(origx,origy)); // pass p as array
				}

			 }
			 backend->setIsPolygon(true);
			 /* show is done by next stroke, fill or moveto */
 			 currentpoint = startPoint;
			}
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
{ 
				lineNumber++;
			CHECKconstraints
			 BEGIN(INITIAL);
			 backend->dumpPath();
                       	};
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
{ 
				lineNumber++;
			CHECKconstraints
			 BEGIN(INITIAL);
			 backend->dumpPath(); 
                       	};
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
{ 
				lineNumber++;
			CHECKconstraints
			 BEGIN(INITIAL);
			 backend->dumpPath(); 
                       	};
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
{ 
					lineNumber++;
				 backend->Save();
                       	};
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
{ 
					lineNumber++;
				 backend->Save();
                       	};
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
{ 
					lineNumber++;
				 backend->Restore();
                       	};
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
{ 
					lineNumber++;
				 backend->Restore();
                       	};
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
{ 
					lineNumber++;
				 backend->endClipPath(drvbase::clip);
				 BEGIN(INITIAL);
                    	};
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
{
					lineNumber++; 
				 backend->endClipPath(drvbase::eoclip);
				 BEGIN(INITIAL);
                    	};
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
{ 
			if (yytext[0] == '\n') lineNumber++;
}
	YY_BREAK
case 75:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(READPATH):
case YY_STATE_EOF(READIMAGE):
case YY_STATE_EOF(READPROLOG):
case YY_STATE_EOF(READBBOXNUMBERS):
case YY_STATE_EOF(READBBOX):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 979 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 979 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 978);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

void PSFrontEnd::yylexcleanup()
{
//	if (yy_state_buf) yy_flex_free(yy_state_buf);

#if 1
	FILE * yyinsave = yyin; // because yy_init_globals (called by destroy) resets it to 0
	yylex_destroy();
	yyin = yyinsave; // need to retain this because fclose is called outside (could/should be changed in future)
#else
	yy_delete_buffer(yy_current_buffer );

// reset the global initialized statics to their initial value
// so the lexer can be called again.
	yy_c_buf_p	= (char *) 0;
	yy_init		= 1;	/* whether we need to initialize */
	yy_start	= 0;	/* start state number */
#endif

}

unsigned int PSFrontEnd::readBBoxes(BBox * bboxes)
{
	bblexmode = true;
	currentPageNumber = 0;
	nextFreeNumber=0;
	lineNumber = 1;
	secondlineno = 1;
	bboxes_ptr = bboxes;
	yy_init = 1;
	FILE * yyinsave = yyin; // because yy_init_globals resets it to 0
	yy_init_globals();
	yyin = yyinsave;
	BEGIN(READBBOX);
	(void) yylex();
	yylexcleanup();
	return currentPageNumber;
}
void PSFrontEnd::run(bool mergelines)
{
	bblexmode = false;
	currentPageNumber = 1;
	nextFreeNumber=0;
	yy_init = 1;
	lineNumber = 1;
	secondlineno = 1;
	FILE * yyinsave = yyin; // because yy_init_globals resets it to 0
	yy_init_globals();
	yyin= yyinsave;
	BEGIN(INITIAL);
	backend->startup(mergelines);
	if (!yylex()) {
		// yylex returns 0 on normal EOF
		// 1 in case of errors
		backend->finalize();
	}
	delete backend;
	backend = 0;
}

void PSFrontEnd::addNumber(float a_number)
{
  // printf("Adding %f\n",number);
 if (nextFreeNumber < maxPoints) { 
	// cout << "adding number : " << a_number << endl;
     	numbers[nextFreeNumber++] = a_number; 
     	// nextFreeNumber always points to the next free number
 } else { 
   	errf << "Too many numbers on stack. Please increase maxPoints in drvbase.h \n"; 
   	exit(1); 
 }
}

PSFrontEnd::PSFrontEnd(ostream& outfile_p, 
		ostream & errstream,
		const PsToEditOptions & globaloptions_p,
		const char * infilename_p,
		const char * outfilename_p,
		const DriverDescription * driverDesc_p,
		const char * driveroptions_p,
		const bool splitpages_p, 
		drvbase * backend_p)
	: outFile(outfile_p),
	  errf(errstream),
	  infilename(infilename_p),
	  outfilename(outfilename_p),
	  globaloptions(globaloptions_p),
	  driverDesc(driverDesc_p),
	  driveroptions(driveroptions_p),
	  splitpages(splitpages_p),
	  backend(backend_p),
	  currentPageNumber(1),
	  lineNumber(1),
	  numbers((float*) 0),
      nextFreeNumber(0),
      pathnumber(0),
	  non_standard_font(false),
	  constraintsChecked(false),
	  bblexmode(false),
	  bboxes_ptr(0)
{
    numbers = new float[maxPoints]; // The number stack
    if ((numbers == 0)){
		errf << "new failed in PSFrontEnd::PSFrontEnd " << endl;
		exit(1);
    }
}

PSFrontEnd::~PSFrontEnd() {
#ifdef __INSURE__
	errf << "Deleting PSFrontEnd object and thus the numbers as well" << endl;
#endif
	delete [] numbers;
	numbers = 0;
	
	yylexcleanup();

	infilename=0;
	outfilename=0;
	driverDesc=0;
	driveroptions=0;
	backend=0;
	bboxes_ptr=0;
	
}

float PSFrontEnd::pop() 
{ 
  if (nextFreeNumber > 0) {
  	nextFreeNumber--;
  	return numbers[nextFreeNumber] * backend->getScale(); // the value we just pushed
  } else {
	errf << "Fatal error in PSFrontEnd::pop : nextFreeNumber would get < 0" << endl;
	assert(false);
	//exit(1);
  }
  return 0.0f; // never reached, just to make compiler quiet
}

float PSFrontEnd::popUnScaled() 
{
  if (nextFreeNumber > 0) {
  	nextFreeNumber--;
  	return numbers[nextFreeNumber]; // the value we just pushed
  } else {
	errf << "Fatal error in PSFrontEnd::popUnScaled : nextFreeNumber would get < 0" << endl;
	assert(false); //exit(1);
  }
  return 0.0f; // never reached, just to make compiler quiet
}

void PSFrontEnd::pstack()  const {
	for (unsigned int i = 0 ; i < nextFreeNumber ; i++ ) {
		cerr << "[" << i << "] " << numbers[i] << " " << numbers[i]* backend->getScale() << endl;
	}
}

