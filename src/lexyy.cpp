/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
// #include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 73
#define YY_END_OF_BUFFER 74
static yyconst short int yy_accept[933] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   74,   58,   58,   58,   58,   58,   58,   58,
        1,   58,   58,   58,   58,   58,   72,   72,   72,    1,
       72,   72,   72,   72,   72,   72,   58,   58,    1,   72,
        6,    4,    6,    1,    5,    5,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   41,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    1,    1,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    1,
        1,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   25,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   70,    0,    0,    0,
        0,    0,   64,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   22,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   71,    0,   65,    0,   60,    0,   59,    0,   63,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   55,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    9,    0,    0,    0,   66,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   61,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   46,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   67,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    8,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,   16,    0,    0,    0,    0,
        0,    0,    0,   41,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   62,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   56,    0,    0,    0,    0,    0,    0,    0,    0,
       18,    0,    0,    0,    0,    0,    0,    0,   11,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   68,    0,    0,    0,    0,    0,   49,    0,

        0,    0,    0,    0,    0,    0,    0,   24,    0,    0,
        0,    0,   40,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   57,    0,    0,    0,   15,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   69,
        0,    0,    0,   51,    0,    0,    0,   48,    0,    0,
        0,    0,   44,    0,    0,    0,   23,    0,    0,   36,
       39,    0,    0,    0,    0,    0,    0,    0,    0,   13,
        0,    0,    0,    0,    0,    0,    0,   20,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   28,    0,    0,

        0,    0,    0,    0,    0,    0,   45,    0,    0,   50,
        0,    0,    0,    0,   39,    0,    0,    0,   33,    0,
       31,    0,    0,    0,   38,    0,    0,    0,   14,    0,
        0,    0,    0,    0,   21,    0,    0,   12,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   54,    0,    0,
        0,    0,    0,    0,    0,   47,    0,    0,   52,    0,
        0,    0,   37,    0,    0,    0,    0,    0,    0,    0,
        0,   19,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        3,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   32,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   27,    0,    0,   29,    0,    0,   53,
        0,    0,   10,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   10,    0,    0,   11,    0,    0,
       26,    0,   10,    0,    0,   43,    0,    0,    0,    0,
        0,    0,    0,   10,    0,    0,    0,    0,    7,    0,
        0,    0,   34,    0,    0,    0,   42,    0,    0,   17,
        0,    0,    0,    0,    0,    0,   30,    0,    0,    0,
        0,    0,    0,    0,    0,   12,    0,    0,    0,    0,

        2,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   10,    0,    0,    0,    0,    0,
       10,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       35,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    1,    1,    1,    5,    1,    1,    6,
        7,    1,    1,    1,    8,    9,    1,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,   10,    1,    1,
        1,    1,    1,    1,   11,   12,   13,   14,   15,   16,
       17,   11,   11,   11,   11,   11,   18,   19,   11,   20,
       11,   11,   21,   11,   11,   11,   22,   11,   11,   11,
       23,    1,   24,    1,    1,    1,   25,   26,   27,   28,

       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   11,   41,   42,   43,   44,   45,   46,   47,
       48,   49,   50,    1,   51,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[52] =
    {   0,
        1,    1,    2,    3,    1,    1,    1,    1,    1,    4,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    1,    1,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    1,
        1
    } ;

static yyconst short int yy_base[950] =
    {   0,
        0,   40,   78,  116,    5,    7, 1724, 1723,   14,   16,
     1707, 1702, 1688,   14, 3111,   26,  156,   25,   30,   47,
       51,   32,   58,   66,   68,   84, 3111, 1684, 1663,   81,
       17, 1627, 1632, 1623, 1600, 1591,   73, 1623,   93,   71,
     3111, 3111, 1615,  109, 3111, 1615,   89,  122,  123,  124,
      128,  129,  133,  135,  144, 3111,  163,  170,  177,  184,
      191,  193,  199,  137,  165,  150,  197,  204,  211,  210,
      218,  224,  225,  231,  237,  238,  244,  239, 1613,  245,
      247,   46, 1569,  230, 1562, 1551, 1538, 1532, 1549,    7,
       59,  246,  249, 1545,  254,  258,  262,  263,  268,  277,

      282,  317,  291,  300,  305,  307,  319,  324,  334,  339,
      347,  353,  360,  345,  361,  325,  362,  368,  374,  375,
      380,  387,  309,  420,  386, 1515, 1505, 1492, 1488, 1486,
     1477, 1469, 1456, 1439, 1458,  264,  367,   81, 1426,  392,
      397,  401,  402,  391,  430,  435,  442,  447,  461,  463,
      498,  470,  468,  477,  479,  486,  484,  492,  503,  505,
      514,  525,  451,  407,  424,  414,  519,  526,  531,  527,
      535,  311,  542,  543,  547,  554,  555,  559,  560,  566,
      573, 1423, 1421, 1411, 1401,  576, 1382, 1367, 1362, 1375,
      146,  568,   24, 1326,  578,  579,  587,  589,  591,  600,

      605,  612,  617,  619,  624,  632,  634,  642,  647,  652,
      654,  661,  663,  669,  675,  681,  683,  625,  656,  688,
      437,  692,  693,  593,  699,  640,  703,  711,  713,  715,
      717,  721,  727,  729,  731,  744, 3111, 1329, 1318, 1312,
     1303,  747, 3111, 1295, 1276, 1273, 1293,   90,  694,  196,
     1241,  733,  598,  750,  754,  762,  767,  769,  774,  780,
      782,  787,  796,  801,  808,  813,  815,  820,  828,  842,
      844,  850,  855,  857,  861,  802,  821,  865,  869,  829,
      870,  874,  880,  881,  886,  892,  894,  898,  904,  896,
      906,  910, 1250, 1216,  835,  916,  932,  935,  940,  180,

      255,  292,  516, 1212,  941,  942,  951,  943,  952,  957,
      959,  965,  983, 3111,  994,  976,  985,  996, 1002, 1010,
     1015, 1017, 1022, 1027, 1034, 1041, 1046, 1053, 1051, 1059,
      969, 1061, 1063, 1000, 1067, 1078, 1082, 1088,  963, 1094,
     1035, 1095, 1096, 1102, 1104, 1108, 1106, 1110, 1184, 1077,
     1116, 3111, 1122, 3111, 1131, 3111, 1138, 3111, 1147, 3111,
     1201, 1181,  520, 1126,  392,  755,   95, 1179, 1123, 1149,
     1166, 3111, 1173, 1179, 1124, 1181, 1186, 1188, 1193, 1195,
     1234, 1200, 1202, 1207, 1214, 1221, 1226, 1241, 1250, 1255,
     1262, 1274, 1279, 1264, 1266, 1228, 1280, 1212,  987, 1287,

     1297, 3111, 1303, 1304, 1310, 3111, 1320, 1288, 1321, 1281,
     1153, 1312, 1322, 1328, 1329, 1333, 1340, 1176, 1346, 3111,
     1165, 1150, 1326, 1154, 1154, 1133, 1136, 1124, 1100,  409,
     1104, 1105,  410,  475, 1099, 1334, 1349, 1364, 3111, 1371,
     1356, 1373, 1379, 1384, 1392, 1386, 1397, 1399, 1404, 1411,
     1431, 1413, 1419, 1436, 1438, 1444, 1452, 1457, 1459, 1465,
     1377, 1442, 1235, 1466, 1472, 1480, 3111, 1488, 1450, 1405,
     1482, 1489, 1493, 1495, 1499, 1501, 1503, 1505, 1513, 3111,
     1519, 1425, 1080, 1092, 1507, 1045, 1044, 1047, 1036, 1036,
     1016, 1001,  994,  987,  987, 1508,  146,  971, 1525, 1531,

     1541, 1547, 1549, 1555, 1562, 3111, 1583, 1568, 1573, 1590,
     1575, 1599, 1605, 3111, 1641, 1610, 1615, 1624, 1626, 1633,
     1643, 1651, 1657, 1667, 1673, 1563, 1674, 1619, 1678, 1682,
     1688, 1689, 1690, 1634, 1696, 1697, 1701, 1702, 1706, 1707,
     1714, 3111,  964, 1719,  719,  939,  949, 1722,  934,  926,
      908,  903,  895,  905,  885, 1571,  327,  914, 1584, 1734,
     1746, 3111, 1752, 1758, 1764, 1739, 1770, 1775, 1777, 1783,
     3111, 1805, 1785, 1792, 1794, 1810, 1812, 1822, 3111, 1827,
     1829, 1837, 1847, 1849, 1855, 1857, 1831, 1841, 1861, 1869,
     1875, 1882, 3111, 1888, 1723, 1894, 1895, 1901, 3111, 1907,

     1913, 1914, 1915, 1921, 1922, 1800, 1929, 3111,  894, 1935,
      918, 1938, 3111,  884,  886,  871,  851,  864,  839,  839,
      846,  860,  813, 1940, 1948, 3111, 1954, 1959, 1965, 3111,
     1995, 1967, 1973, 1980, 1987, 1997, 2003, 2011, 2017, 2023,
     2028, 2035, 2044, 2049, 2012, 2018, 1971, 2036, 2058, 3111,
     2065, 2066, 2072, 3111, 2078, 2084, 2090, 3111, 2096, 2108,
     2097, 2114, 3111, 2120, 2101, 2126, 3111,  817, 2129, 3111,
        0,  800,  789, 2132, 2142,  785,  781, 2145,  804, 3111,
      754, 2135, 2148, 2150, 2156, 2162, 2168, 3111, 2194, 2177,
     2170, 2179, 2184, 2186, 2196, 2202, 2216, 3111, 2224, 2204,

     2235, 2154, 2217, 2236, 2240, 2246, 3111, 2252, 2269, 3111,
     2275, 2281, 2288,  761,    0, 2260,  768, 2294, 3111, 2297,
     3111,  747,  732, 2300, 3111,  757, 2282, 2303, 3111, 2324,
     2305, 2311, 2317, 2330, 3111, 2365, 2332, 3111, 2340, 2347,
     2349, 2356, 2354, 2367, 2373, 2381, 2393, 3111, 2406, 2309,
     2382, 1988, 2371, 2395, 2413, 3111, 2419, 2425, 3111, 2433,
      731, 2439, 3111,  716,  694,  691,  709, 2426, 2473, 2442,
     2448, 3111, 2514, 2455, 2460, 2462, 2467, 2489, 2475, 2497,
     2502, 2479, 2341, 2506, 2386, 2490,  673,  668,  676, 2520,
      698, 2530, 2535, 2540, 2542, 2547, 2554, 2556, 2561, 2563,

     2569, 2576, 2587, 2577, 2440, 2595, 2599,  666,  638,  641,
     2605, 3111,  600, 2606, 2608, 2644, 2613, 2618, 2620, 2625,
     2632, 2650, 2661, 3111, 2667, 2673, 3111, 2681, 2687, 3111,
     2693, 2453, 2636, 2694, 2700,  581,  564,  606,  546, 2701,
     2707, 2709, 2714, 2721, 2723, 2730, 2738, 3111, 2744, 2750,
     3111, 2756, 2725, 2767, 2773, 3111, 2780,  552, 2786,  532,
      526, 2789, 2797, 2820, 2799, 2804, 2809, 2826, 3111, 2841,
     2815, 2847, 3111,  467,  459, 2850, 3111, 2857, 2863, 3111,
     2898, 2865, 2870, 2877, 2883, 2886, 3111,  460,  385, 2889,
     2872, 2891,  381,  400, 2915, 3111, 2921, 2828, 2905,  348,

     3111, 2928, 2930,  369, 2935, 2941,  320, 2943, 2948,  290,
     2950, 2957,  276, 2962, 2972,  249, 2979,  248, 2981,  196,
     2988,  184,  184,  140,  113,  114,   79,   57, 2994, 2997,
     3111, 3111, 3030, 3035, 3040, 3045, 3050, 3055, 3060, 3065,
     3070, 3073, 3078, 3080, 3085, 3090, 3095, 3100, 3105
    } ;

static yyconst short int yy_def[950] =
    {   0,
      933,  933,  934,  934,  935,  935,  934,  934,  936,  936,
      937,  937,  932,  938,  932,  938,  939,  940,  938,  938,
      938,  938,  938,  938,  938,  938,  932,  941,  932,  932,
      932,  932,  932,  932,  932,  932,  942,  932,  932,  941,
      932,  932,  932,  932,  932,  932,  938,  938,  938,  938,
      938,  938,  938,  938,  939,  932,  943,  939,  939,  939,
      939,  939,  939,  940,  940,  940,  938,  938,  938,  938,
      938,  938,  938,  938,  938,  938,  938,  938,  941,  932,
      932,  932,  932,  932,  932,  932,  932,  932,  932,  942,
      942,  942,  941,  932,  938,  938,  938,  938,  938,  939,

      943,  943,  943,  943,  943,  943,  943,  939,  939,  939,
      939,  939,  939,  940,  940,  938,  938,  938,  938,  938,
      938,  938,  938,  938,  938,  932,  932,  932,  932,  932,
      932,  932,  932,  932,  932,  942,  942,  941,  932,  938,
      938,  938,  938,  938,  939,  943,  943,  943,  943,  943,
      943,  943,  943,  943,  943,  943,  939,  939,  939,  939,
      939,  939,  940,  940,  940,  938,  938,  938,  938,  938,
      938,  938,  938,  938,  938,  938,  938,  938,  938,  938,
      932,  932,  932,  932,  932,  932,  932,  932,  932,  932,
      942,  942,  941,  932,  938,  938,  938,  938,  938,  939,

      943,  943,  943,  943,  943,  943,  943,  943,  943,  943,
      943,  939,  939,  939,  939,  939,  939,  940,  940,  940,
      938,  938,  938,  938,  938,  938,  938,  938,  938,  938,
      938,  938,  938,  938,  938,  932,  932,  932,  932,  932,
      932,  932,  932,  932,  932,  932,  932,  942,  942,  941,
      932,  938,  938,  938,  938,  938,  939,  943,  943,  943,
      943,  943,  943,  943,  943,  943,  943,  943,  939,  939,
      939,  939,  939,  939,  940,  940,  940,  938,  938,  938,
      938,  938,  938,  938,  938,  938,  938,  938,  938,  938,
      938,  938,  932,  932,  932,  932,  932,  932,  932,  932,

      942,  944,  941,  932,  938,  938,  938,  938,  938,  939,
      943,  943,  943,  932,  943,  943,  943,  943,  943,  943,
      943,  943,  943,  939,  939,  939,  939,  939,  939,  939,
      940,  940,  940,  938,  938,  938,  938,  938,  938,  938,
      938,  938,  938,  938,  938,  938,  938,  938,  932,  932,
      932,  932,  932,  932,  932,  932,  932,  932,  932,  932,
      932,  932,  942,  932,  944,  944,  941,  932,  938,  938,
      938,  932,  938,  938,  938,  939,  943,  943,  943,  943,
      943,  943,  943,  943,  943,  943,  939,  939,  939,  939,
      939,  939,  939,  940,  940,  940,  938,  938,  938,  938,

      938,  932,  938,  938,  938,  932,  938,  938,  938,  938,
      938,  938,  938,  938,  938,  938,  938,  932,  932,  932,
      932,  932,  942,  932,  932,  932,  932,  932,  932,  932,
      932,  932,  944,  941,  932,  938,  938,  938,  932,  938,
      938,  939,  943,  943,  943,  943,  943,  943,  943,  943,
      943,  943,  939,  939,  939,  939,  939,  939,  939,  940,
      940,  940,  938,  938,  938,  938,  932,  938,  938,  938,
      938,  938,  938,  938,  938,  938,  938,  938,  938,  932,
      938,  932,  932,  932,  942,  932,  932,  932,  932,  932,
      932,  932,  932,  932,  932,  944,  941,  932,  938,  938,

      938,  939,  943,  943,  943,  932,  943,  943,  943,  943,
      943,  943,  943,  932,  943,  943,  939,  939,  945,  939,
      939,  939,  939,  940,  940,  940,  940,  938,  938,  938,
      938,  938,  938,  938,  938,  938,  938,  938,  938,  938,
      932,  932,  932,  932,  944,  932,  932,  932,  932,  932,
      932,  932,  932,  932,  932,  944,  941,  932,  938,  938,
      938,  932,  938,  939,  939,  943,  943,  943,  943,  943,
      932,  943,  943,  943,  943,  939,  939,  945,  932,  945,
      945,  945,  939,  939,  939,  939,  940,  940,  938,  938,
      938,  938,  932,  938,  938,  938,  938,  938,  932,  938,

      938,  938,  938,  938,  938,  932,  932,  932,  364,  932,
      932,  932,  932,  932,  932,  932,  932,  932,  932,  932,
      944,  946,  932,  938,  938,  932,  938,  943,  943,  932,
      943,  943,  943,  943,  943,  943,  939,  939,  945,  945,
      939,  939,  939,  939,  940,  940,  938,  938,  938,  932,
      938,  938,  938,  932,  938,  938,  938,  932,  938,  938,
      938,  938,  932,  938,  938,  932,  932,  932,  932,  932,
      947,  932,  932,  932,  932,  932,  932,  932,  946,  932,
      932,  938,  943,  943,  943,  943,  943,  932,  943,  943,
      948,  939,  945,  945,  939,  939,  939,  932,  939,  939,

      940,  940,  938,  938,  938,  938,  932,  938,  938,  932,
      938,  938,  938,  932,  947,  932,  932,  932,  932,  932,
      932,  932,  932,  932,  932,  932,  938,  943,  932,  943,
      943,  943,  943,  943,  932,  943,  948,  932,  948,  948,
      939,  945,  945,  939,  939,  939,  940,  932,  940,  940,
      940,  938,  938,  938,  938,  932,  938,  938,  932,  938,
      932,  932,  932,  932,  932,  932,  932,  938,  943,  943,
      943,  932,  943,  948,  948,  939,  945,  945,  939,  939,
      939,  940,  940,  938,  938,  938,  932,  932,  932,  932,
      932,  938,  943,  943,  948,  948,  939,  945,  945,  939,

      939,  939,  940,  940,  938,  938,  938,  932,  932,  932,
      932,  932,  932,  938,  943,  943,  948,  948,  939,  945,
      945,  939,  939,  932,  939,  939,  932,  939,  940,  932,
      940,  940,  938,  938,  938,  932,  932,  932,  932,  938,
      943,  943,  948,  948,  939,  945,  945,  932,  945,  939,
      932,  939,  940,  938,  938,  932,  938,  932,  932,  932,
      932,  938,  943,  943,  948,  948,  945,  938,  932,  938,
      949,  932,  932,  932,  932,  938,  932,  938,  943,  932,
      943,  948,  948,  945,  949,  949,  932,  932,  932,  948,
      948,  945,  932,  932,  948,  932,  948,  948,  945,  932,

      932,  948,  945,  932,  948,  945,  932,  948,  945,  932,
      948,  945,  932,  948,  945,  932,  948,  932,  948,  932,
      948,  932,  932,  932,  932,  932,  932,  932,  932,  932,
      932,    0,  932,  932,  932,  932,  932,  932,  932,  932,
      932,  932,  932,  932,  932,  932,  932,  932,  932
    } ;

static yyconst short int yy_nxt[3163] =
    {   0,
      932,  932,   15,   16,   17,   18,   19,   20,   21,   37,
      932,   37,   38,   39,   38,   39,   42,   48,   42,  932,
       49,   43,   44,   43,   44,   22,   56,  932,   65,   48,
       23,   66,   49,   67,  932,   48,   49,   24,   49,   92,
       25,   26,   15,   16,   17,   18,   19,   20,   21,   50,
       48,  250,   82,   49,   48,   68,   70,   49,   69,   69,
       83,   48,  932,   51,   49,   22,   52,   53,   54,   48,
       23,   48,   49,   56,   49,   93,   89,   24,  126,   69,
       25,   26,   28,   56,  127,   29,   30,   48,   81,   81,
       49,  136,   48,  932,   73,   49,   74,   56,   71,   72,

       81,   81,   91,  929,   31,   92,   32,   33,   75,   81,
       76,  928,   77,   34,   35,   78,   81,   81,  193,   36,
       28,   81,  301,   29,   30,   48,   67,   95,   49,   49,
       49,   48,   48,  434,   49,   49,   48,   81,   48,   49,
       65,   49,   31,   66,   32,   33,   56,  100,   56,  932,
       59,   34,   35,  115,  927,  926,   66,   36,   56,   57,
       58,   98,   59,   53,  925,   56,  102,   97,   65,  103,
       96,   66,   56,  100,  248,   99,   59,   60,   92,   56,
      109,  108,   61,   59,  557,   62,   56,  100,   63,  104,
       59,  105,  106,   56,  100,   56,  100,   59,   56,   59,

       48,   56,  100,   49,  107,   59,  114,   48,  110,  361,
       49,   69,   69,   48,   48,  303,   49,   49,   69,   69,
      924,   48,  362,  116,   49,  112,  923,   48,   48,  111,
       49,   49,   69,  922,   48,  113,  117,   49,   53,   69,
       48,   48,   48,   49,   49,   49,  118,   48,  119,  932,
       49,   56,   81,   81,   81,   81,  129,   48,  932,  130,
       49,   48,  123,  138,   49,   48,   48,  932,   49,   49,
      120,   48,  121,   81,   49,   81,  920,  125,   92,   56,
      100,  122,  137,   59,   56,  102,  124,   92,  103,  918,
      140,  363,  144,   56,  151,   53,   92,  103,  141,  191,

      137,  364,   56,  102,  142,  143,  103,   56,  102,   56,
      102,  103,   48,  103,  227,   49,  916,   49,  145,   56,
      102,   56,  102,  103,  366,  103,   56,  100,   48,   56,
       59,   49,  146,  913,  147,  152,   56,  100,  148,  154,
       59,   56,  100,  153,  173,   59,  910,  155,   65,   56,
      100,   66,  157,   59,  149,   56,  100,  622,  150,   59,
      158,  156,   56,  100,   65,   48,   59,   66,   49,  166,
      932,   48,  907,  163,   49,  145,  904,   48,   48,  159,
       49,   49,  160,   48,  162,  164,   49,  165,  161,   48,
       48,  192,   49,   49,   48,   48,  167,   49,   49,   92,

       48,  364,  114,   49,   48,   48,  901,   49,   49,  168,
       65,  900,  894,   66,  170,  172,  195,   48,  169,  364,
       49,  196,  171,   48,  366,  197,   49,   65,  199,  198,
       66,  180,   56,  100,  496,  492,   59,   56,  102,  174,
      278,  103,  366,   49,   56,  102,  175,  493,  103,   56,
      102,  221,  219,  103,   65,  176,  177,   66,  200,  201,
      178,  179,  203,   56,  102,   56,  102,  103,  220,  103,
       56,  102,   56,  102,  103,  204,  103,   56,  202,   56,
      102,   56,  102,  103,  893,  103,   56,  100,   56,  102,
       59,  155,  103,  218,   56,  100,  889,  208,   59,  205,

       56,  102,  207,  888,  103,   56,  100,   56,  100,   59,
      497,   59,  209,  146,  212,  147,   56,  100,   56,  148,
       59,  210,   48,  932,  206,   49,  211,   56,  100,   48,
       48,   59,   49,   49,   48,  149,  213,   49,   48,  150,
      214,   49,  216,  215,  423,   48,   48,  222,   49,   49,
       48,  225,   92,   49,  875,  217,  367,   48,   48,  224,
       49,   49,   48,   48,  874,   49,   49,  229,  223,   48,
      228,  932,   49,  226,  236,  237,  236,  242,  243,  242,
      871,   48,   48,  230,   49,   49,  231,  232,  861,  233,
       48,  234,   48,   49,   48,   49,  281,   49,  249,   49,

       92,   48,   56,  100,   49,  235,   59,   56,  102,  860,
      859,  103,  252,  255,   56,  102,  253,  858,  103,   56,
      102,   56,  102,  103,  839,  103,   56,  102,   65,  254,
      103,   66,  256,  260,   56,  102,   56,  102,  103,  306,
      103,  258,  257,   48,   56,  102,   49,  259,  103,   56,
      102,  261,  275,  103,   56,  102,   56,  102,  103,   65,
      103,  262,   66,   56,  100,   56,  100,   59,  838,   59,
      837,   56,  100,  264,  265,   59,  263,   56,  100,  267,
      283,   59,  266,   56,  100,   56,  100,   59,  276,   59,
      836,   65,  268,  269,   66,   48,   48,  932,   49,   49,

      270,  271,   48,  813,  810,   49,   48,  284,  809,   49,
      808,  274,  791,  273,   48,  272,   48,   49,   48,   49,
       48,   49,  302,   49,   48,  277,   92,   49,  609,  279,
       48,  280,   48,   49,   48,   49,   48,   49,  790,   49,
      285,  282,  789,  286,   53,  236,  237,  236,  242,  243,
      242,  366,  290,   48,  288,  292,   49,   48,  788,  787,
       49,  305,  287,  289,  364,   48,  767,  291,   49,   56,
      100,   56,  102,   59,  766,  103,   56,  102,  307,  765,
      103,  313,  314,  315,   56,  102,  103,  366,  103,   56,
      102,  433,  764,  103,  310,  308,  761,  309,   56,  102,

      726,  311,  103,   56,  102,   65,  680,  103,   66,  312,
       56,  102,  316,  723,  103,   56,  102,   56,  102,  103,
      722,  103,   56,  102,  333,  717,  103,   66,  317,  332,
       56,  100,   48,  318,   59,   49,  351,  352,  351,  322,
      319,  321,  716,  320,   56,  325,   56,  100,   59,  714,
       59,  681,   56,  100,  323,  364,   59,   56,  100,   56,
      100,   59,  680,   59,   65,  324,  329,   66,   48,  336,
      678,   49,   48,   48,  337,   49,   49,   48,  366,  677,
       49,  326,  327,   48,   48,  331,   49,   49,  676,   48,
      675,  328,   49,  330,  334,   48,  335,   48,   49,   48,

       49,   48,   49,  674,   49,  338,   53,   48,  339,   48,
       49,   53,   49,   48,  673,  672,   49,  353,  354,  353,
      342,  671,  346,  668,  341,  623,  344,  620,  343,  619,
      340,  618,  345,  355,  356,  355,  357,  358,  357,  617,
      348,  359,  360,  359,   48,   48,   48,   49,   49,   49,
      616,  347,  371,  372,  373,   48,  615,   49,   49,   56,
      100,   56,  102,   59,  614,  103,  404,   56,  102,   49,
      369,  103,   65,  611,  374,   66,  375,  370,   56,  102,
      610,  376,  103,  378,  313,  314,  315,   56,  102,  103,
      465,  103,  606,   49,  377,  313,  314,  315,   56,  381,

      103,  558,  103,   48,   56,  102,   49,  379,  103,  146,
      394,  147,   56,  102,  555,  148,  103,   56,  102,   56,
      102,  103,  554,  103,   56,  102,  382,  380,  103,   56,
      100,  149,  397,   59,  553,  150,   56,  100,   48,  552,
       59,   49,  384,   56,  100,  383,  387,   59,   56,  100,
      386,  551,   59,   56,  100,   56,  100,   59,  385,   59,
      550,   56,  100,  388,   65,   59,   65,   66,  549,   66,
       48,  389,  408,   49,  548,  145,  392,  391,  419,  420,
      419,   48,  390,  393,   49,   48,  547,  546,   49,  401,
      402,  403,  396,  398,   49,  405,  406,  407,   48,   48,

       49,   49,   49,  395,  114,   48,  399,   48,   49,   48,
       49,   48,   49,   48,   49,  409,   49,  351,  352,  351,
      544,  543,  410,  353,  354,  353,   48,   48,  411,   49,
       49,  400,  355,  356,  355,  412,  498,  495,  417,  357,
      358,  357,  494,  491,  414,  416,  415,  413,  359,  360,
      359,  424,   48,  425,  426,   49,   48,  427,  428,   49,
      490,  436,  429,  430,  489,  431,  441,  371,  372,  373,
      488,  432,   49,  437,  371,  372,  373,  473,  487,   49,
      438,  439,  440,   56,  100,   49,  486,   59,   56,  102,
       56,  102,  103,  484,  103,   56,  102,   56,  102,  103,

      483,  103,   56,  102,   56,  102,  103,  482,  103,   56,
      102,  435,  444,  103,   53,   48,   56,  102,   49,  446,
      103,  422,  442,   56,  102,  421,  418,  103,   56,  100,
      449,   65,   59,  443,   66,  445,   56,  102,   48,  368,
      103,   49,  448,   56,  100,  451,  450,   59,  452,  146,
      464,  147,   56,  100,  350,  148,   59,   56,  100,  455,
      462,   59,  528,  447,   56,  100,  453,   65,   59,   65,
       66,  149,   66,  454,  349,  150,   56,  100,  304,  456,
       59,   56,  100,   48,   48,   59,   49,   49,  466,  467,
      468,   48,  457,   49,   49,  460,  300,  461,  401,  402,

      403,  299,  458,   49,  401,  402,  403,   48,  469,   49,
       49,  405,  406,  407,  298,   48,   49,  463,   49,  472,
      459,  405,  406,  407,   48,   48,   49,   49,   49,  932,
      470,   48,   48,  297,   49,   49,   48,   48,  296,   49,
       49,  479,  480,  481,   53,   53,   49,  419,  420,  419,
      474,  295,   48,  471,  475,   49,  485,  478,   92,   48,
      294,   53,   49,  476,  477,  438,  439,  440,  293,  251,
       49,  499,  438,  439,  440,   56,  100,   49,  247,   59,
       65,   56,  102,   66,  501,  103,   56,  102,   56,  102,
      103,  500,  103,  505,  506,  507,  246,  503,  103,   56,

      102,   56,  102,  103,  502,  103,   56,  102,  532,  245,
      103,   49,   53,   56,  102,   56,  102,  103,  526,  103,
      504,   56,  100,  508,  244,   59,  541,  542,  541,  509,
      510,  511,  513,  514,  515,  512,  241,  103,   56,  100,
       56,  519,   59,  240,   59,   65,   56,  100,   66,  239,
       59,  238,  516,   48,   56,  100,   49,  517,   59,   56,
      100,   56,  100,   59,  194,   59,  524,  439,  525,   48,
      190,   66,   49,  518,  520,   48,  530,  189,   49,  527,
      521,  466,  467,  468,  188,   48,   49,  522,   49,  466,
      467,  468,   48,  523,   49,   49,   48,  187,   48,   49,

      531,   49,   48,  529,   48,   49,   48,   49,   48,   49,
      932,   49,  186,   53,  479,  480,  481,  364,  185,   49,
      479,  480,  481,  184,  534,   49,  537,  536,   48,   53,
      533,   49,  535,  538,   48,  545,  183,   49,  556,   92,
      366,  539,  561,  562,  563,  540,  182,   49,  564,  514,
      565,   56,  102,   59,  181,  103,  139,   56,  102,  560,
       53,  103,  135,  505,  506,  507,   65,  559,  103,   66,
       56,  102,  134,  566,  103,   56,  102,   56,  102,  103,
      364,  103,  133,  567,  505,  506,  507,  624,  132,  103,
       49,  570,  571,  572,  587,  568,  103,  131,  146,  621,

      147,   56,  102,  366,  148,  103,  513,  514,  515,  128,
      569,  103,   56,  102,  573,   56,  103,   56,  100,   94,
      149,   59,   48,   80,  150,   49,   56,  100,  579,  580,
       59,   80,  581,   88,  575,   56,  100,   48,   87,   59,
       49,  574,  513,  514,  515,   56,  100,  103,  589,   59,
      576,  577,  584,   56,  100,   86,  146,   59,  147,   56,
      100,  583,  148,   59,   85,   84,  586,  582,  524,  439,
      525,   80,  597,   66,  524,  439,  525,   65,  149,   66,
       66,   48,  150,  585,   49,   48,   56,  932,   49,  592,
      593,  594,   48,   48,   49,   49,   49,  598,  599,  600,

       48,  588,   49,   49,   48,   48,   46,   49,   49,   48,
       48,   46,   49,   49,  114,  541,  542,  541,  596,  590,
      607,  608,  607,  612,  613,  612,   48,   40,   40,   49,
      595,  605,  591,  932,  601,  625,  626,  627,  603,  932,
       49,   56,  102,  602,  932,  103,  604,  561,  562,  563,
      932,  652,   49,  561,  562,  563,  932,  932,   49,  564,
      514,  565,  932,  932,   59,  564,  514,  565,  932,  932,
       59,  629,  630,  631,  932,  628,  103,   56,  102,   56,
      102,  103,  932,  103,  570,  571,  572,   56,  102,  103,
      932,  103,  932,   53,   56,  102,   56,  102,  103,  632,

      103,  666,  667,  666,  633,  145,  570,  571,  572,  634,
      932,  103,   56,  100,   56,  100,   59,  932,   59,  932,
      146,  932,  147,  635,  579,  580,  148,  932,  581,  579,
      580,  579,  639,  581,   65,  581,  636,   66,  932,  579,
      580,  638,  149,  581,   65,  932,  150,   66,  637,   56,
      100,   56,  100,   59,  932,   59,  641,   56,  100,   56,
      100,   59,  932,   59,   48,  640,  932,   49,  582,  645,
      646,  932,   48,  932,  642,   49,  649,  650,  651,  932,
      932,   49,  644,  592,  593,  594,  932,  932,   49,  592,
      593,  594,  643,  932,   49,  653,  654,  655,   48,  647,

       49,   49,  598,  599,  600,  932,  932,   49,  598,  599,
      600,  648,  932,   49,  657,  658,  659,   48,   48,   49,
       49,   49,  662,  663,  664,   48,  932,   49,   49,   53,
      607,  608,  607,  932,  932,  656,  669,  670,  669,  612,
      613,  612,  932,   48,  932,  660,   49,  661,   53,  625,
      626,  627,  932,  932,   49,  625,  626,  627,  665,  932,
       49,   56,  102,  932,  932,  103,  629,  630,  631,   56,
      102,  103,  932,  103,   48,   56,  102,   49,  932,  103,
      932,  682,   56,  102,  932,  932,  103,  683,  687,  688,
      689,  784,  932,  103,   49,   53,  629,  630,  631,   56,

      102,  103,  685,  103,  932,   56,  100,  684,  703,   59,
      146,  932,  147,   56,  100,   65,  148,   59,   66,  579,
      580,   65,  686,  581,   66,  579,  580,  932,  690,  581,
       56,  100,  149,  691,   59,  932,  150,   56,  100,   48,
      932,   59,   49,  693,  932,  697,  698,  699,  932,  692,
       59,   56,  100,  695,  932,   59,  702,  701,  582,  649,
      650,  651,  932,  696,   49,  694,  649,  650,  651,   48,
      932,   49,   49,  653,  654,  655,  704,  700,   49,  653,
      654,  655,  932,  932,   49,  706,  707,  708,  932,  932,
       49,  657,  658,  659,  932,  932,   49,  657,  658,  659,

       48,  932,   49,   49,   48,  932,   53,   49,  705,  709,
      710,  711,  932,  932,   49,  662,  663,  664,  932,   53,
       49,  662,  663,  664,  932,  932,   49,  666,  667,  666,
      669,  670,  669,  718,  719,  718,  932,   53,   48,  712,
      932,   49,  713,  720,  721,  720,  724,  725,  724,  728,
      729,  730,   56,  102,  103,  932,  103,   65,   56,  102,
       66,   53,  103,  727,   56,  102,  932,  932,  103,  687,
      688,  689,  738,  739,  103,  932,  740,  731,  734,  735,
      736,   56,  100,  103,  932,   59,  579,  580,  579,  580,
      581,  751,  581,  733,  732,  687,  688,  689,   56,  100,

      103,  932,   59,  932,   56,  100,   56,  100,   59,  146,
       59,  147,  932,  743,  932,  148,  741,  697,  698,  699,
       48,  932,   59,   49,  744,  697,  698,  699,  742,  932,
       59,  149,  745,  932,  746,  150,  747,  748,  749,   48,
      932,   66,   49,   48,  932,  932,   49,  706,  707,  708,
      932,  932,   49,  706,  707,  708,  932,  932,   49,  752,
      753,  762,  763,  762,  932,  145,  750,  198,  932,  754,
      709,  710,  711,  932,  932,   49,  709,  710,  711,  932,
      932,   49,  755,  756,  757,   48,  932,   49,   49,  758,
      759,  760,  932,   53,   49,  718,  719,  718,  720,  721,

      720,  724,  725,  724,  728,  729,  730,   56,  769,  103,
      932,  103,   65,   56,  102,   66,   53,  103,  771,  772,
      773,  932,  932,  103,  768,  728,  729,  730,  932,  932,
      103,  734,  735,  736,  738,  739,  103,  782,  740,  146,
      932,  147,  738,  739,  804,  148,  740,   66,  770,  738,
      775,   56,  100,  740,  932,   59,  579,  580,  579,  580,
      581,  149,  581,  932,  932,  150,  734,  735,  736,   56,
      100,  103,  932,   59,   48,   56,  100,   49,  778,   59,
      146,  774,  147,   56,  100,   65,  148,   59,   66,   48,
      932,  776,   49,  777,  747,  748,  749,  779,   48,   66,

      932,   49,  149,  785,  932,  780,  150,  747,  748,  749,
      932,  932,   66,  781,  755,  756,  757,  932,  932,   49,
      755,  756,  757,  806,  783,   49,  758,  759,  760,   48,
      932,   49,   49,  786,  758,  759,  760,  932,  932,   49,
      762,  763,  762,  833,   56,  102,   49,  114,  103,  771,
      772,  773,  932,  198,  103,  792,  853,  738,  739,   66,
       53,  740,  738,  739,   56,  797,  740,  932,   59,  579,
      798,  932,  932,  581,   53,   56,  102,   56,  100,  103,
      932,   59,   65,  795,  794,   66,  796,  932,  146,  932,
      147,  579,  580,   48,  148,  581,   49,  932,  932,   56,

      100,  774,  793,   59,   56,  100,  932,  800,   59,   48,
      149,  932,   49,  932,  150,  771,  772,  773,  932,  932,
      103,  811,  812,  811,  932,  803,  932,  807,  805,  146,
      799,  147,  932,   48,  801,  148,   49,   56,  102,  802,
      932,  103,   56,  816,  738,  739,  103,   53,  740,  738,
      739,  149,  932,  740,  932,  150,   56,  100,  579,  580,
       59,  932,  581,  579,  580,   56,  100,  581,  814,   59,
      823,  824,  825,  815,  932,   59,  819,  826,  827,  828,
       65,  932,   59,   66,  817,  820,  932,  932,  829,  830,
      831,  818,  821,   66,  932,  145,  932,  582,   48,  832,

      822,   49,   48,  932,  932,   49,  811,  812,  811,   48,
       56,  102,   49,  932,  103,  738,  739,  932,  114,  740,
      738,  739,   56,  845,  740,  932,   59,  579,  580,  932,
      932,  581,  932,  847,  848,  849,  932,  834,  581,   48,
      843,  835,   49,  840,  932,  841,   56,  102,  932,  932,
      103,  850,  851,  852,  932,  844,   59,  846,  932,  146,
      932,  147,  823,  824,  825,  148,  842,   59,  823,  824,
      825,  932,  932,   59,  826,  827,  828,   53,  932,   59,
      932,  149,  826,  827,  828,  150,  932,   59,  829,  830,
      831,  932,  932,   66,  829,  830,  831,   48,  932,   66,

       49,  855,  856,  857,   48,  932,   49,   49,  145,   56,
      102,   56,  864,  103,  932,  103,  738,  739,  932,  932,
      740,  932,  145,  738,  866,   56,  100,  740,   65,   59,
      932,   66,  579,  580,  114,  854,  581,  932,  865,  847,
      848,  849,  932,  862,  581,  847,  848,  849,  932,  863,
      581,  850,  851,  852,  932,  932,   59,  850,  851,  852,
      932,  932,   59,  932,  145,  932,  114,  867,  868,  869,
      870,  932,  932,   49,  855,  856,  857,  932,  932,   49,
      932,  855,  856,  857,  932,  582,   49,  872,  873,  872,
      876,  877,  878,  932,  932,   49,  932,  145,  879,  880,

      881,  738,  739,  103,  932,  740,  738,  739,  932,  932,
      740,  579,  580,  932,  932,  581,  886,  887,  886,  932,
      932,   53,   56,  102,  932,  932,  103,  868,  869,  870,
      738,  739,   49,  883,  740,  146,  884,  147,  932,  932,
      882,  148,  868,  869,  870,  774,  932,   49,  872,  873,
      872,  876,  877,  878,  932,  902,   49,  149,  876,  877,
      878,  150,  932,   49,  879,  880,  881,  738,  739,  103,
      932,  740,  738,  739,  738,  739,  740,  932,  740,  579,
      580,  932,   53,  581,  886,  887,  886,  886,  887,  886,
      895,  896,  897,  579,  580,  740,  890,  581,   53,  879,

      880,  881,  891,  932,  103,  932,  892,  579,  580,  898,
      932,  581,  932,  146,  932,  147,  895,  896,  897,  148,
      932,  740,  895,  896,  897,  932,  932,  740,  932,  899,
      738,  739,  579,  580,  740,  149,  581,  738,  739,  150,
      932,  740,  903,  579,  909,  738,  739,  581,  932,  740,
      579,  580,  738,  739,  581,  932,  740,  905,  932,  579,
      915,  932,  774,  581,  738,  917,  932,  932,  740,  932,
      912,  932,  906,  908,  579,  580,  932,  932,  581,  932,
      911,  738,  739,  738,  921,  740,  932,  740,  932,  582,
      738,  739,  914,  932,  740,  930,  931,  930,  930,  931,

      930,  919,  932,  932,  932,  932,  932,  932,  932,  932,
      932,  932,  932,  582,  932,  932,  932,  932,  932,  932,
      774,  932,  932,  932,  932,  932,  932,  932,  932,  774,
       14,   14,   14,   14,   14,   27,   27,   27,   27,   27,
       15,   15,   15,   15,   15,   41,   41,   41,   41,   41,
       45,   45,   45,   45,   45,   47,  932,   47,   47,   47,
       55,   55,   55,   55,   55,   64,  932,   64,   64,   64,
       79,   79,   79,   79,   79,   90,  932,   90,  101,  101,
      101,  101,  101,  365,  365,  578,  578,  578,  578,  578,
      679,  679,  679,  679,  679,  715,  932,  715,  715,  715,

      737,  737,  737,  737,  737,  885,  885,  885,  885,  885,
       13,  932,  932,  932,  932,  932,  932,  932,  932,  932,
      932,  932,  932,  932,  932,  932,  932,  932,  932,  932,
      932,  932,  932,  932,  932,  932,  932,  932,  932,  932,
      932,  932,  932,  932,  932,  932,  932,  932,  932,  932,
      932,  932,  932,  932,  932,  932,  932,  932,  932,  932,
      932,  932
    } ;

static yyconst short int yy_chk[3163] =
    {   0,
        0,    0,    1,    1,    1,    1,    1,    1,    1,    5,
       90,    6,    5,    5,    6,    6,    9,   14,   10,    0,
       14,    9,    9,   10,   10,    1,  193,    0,   18,   16,
        1,   18,   16,   19,    0,   22,   19,    1,   22,   90,
        1,    1,    2,    2,    2,    2,    2,    2,    2,   16,
       20,  193,   31,   20,   21,   20,   22,   21,   21,   21,
       31,   23,   91,   16,   23,    2,   16,   16,   16,   24,
        2,   25,   24,   40,   25,   40,   37,    2,   82,   21,
        2,    2,    3,  138,   82,    3,    3,   26,   30,   30,
       26,   91,   47,  248,   24,   47,   25,  367,   23,   23,

       39,   39,   37,  928,    3,   37,    3,    3,   26,   30,
       26,  927,   26,    3,    3,   26,   44,   44,  138,    3,
        4,   39,  248,    4,    4,   48,   49,   50,   48,   49,
       50,   51,   52,  367,   51,   52,   53,   44,   54,   53,
       64,   54,    4,   64,    4,    4,   55,   55,  497,  191,
       55,    4,    4,   66,  926,  925,   66,    4,   17,   17,
       17,   53,   17,   48,  924,   57,   57,   52,   65,   57,
       51,   65,   58,   58,  191,   54,   58,   17,  191,   59,
       59,   58,   17,   59,  497,   17,   60,   60,   17,   57,
       60,   57,   57,   61,   61,   62,   62,   61,  250,   62,

       67,   63,   63,   67,   57,   63,   65,   68,   60,  300,
       68,   68,   68,   70,   69,  250,   70,   69,   69,   69,
      923,   71,  300,   67,   71,   62,  922,   72,   73,   61,
       72,   73,   68,  920,   74,   63,   70,   74,   67,   69,
       75,   76,   78,   75,   76,   78,   71,   77,   72,   92,
       77,   93,   80,   80,   81,   81,   84,   95,  301,   84,
       95,   96,   76,   93,   96,   97,   98,  136,   97,   98,
       73,   99,   74,   80,   99,   81,  918,   78,   92,  100,
      100,   75,   92,  100,  101,  101,   77,  301,  101,  916,
       95,  301,   99,  103,  103,   95,  136,  103,   96,  136,

      136,  302,  104,  104,   97,   98,  104,  105,  105,  106,
      106,  105,  123,  106,  172,  123,  913,  172,  100,  102,
      102,  107,  107,  102,  302,  107,  108,  108,  116,  557,
      108,  116,  102,  910,  102,  104,  109,  109,  102,  106,
      109,  110,  110,  105,  123,  110,  907,  107,  114,  111,
      111,  114,  108,  111,  102,  112,  112,  557,  102,  112,
      109,  107,  113,  113,  115,  117,  113,  115,  117,  116,
      137,  118,  904,  114,  118,  109,  900,  119,  120,  110,
      119,  120,  111,  121,  113,  115,  121,  115,  112,  125,
      122,  137,  125,  122,  144,  140,  117,  144,  140,  137,

      141,  365,  115,  141,  142,  143,  894,  142,  143,  118,
      164,  893,  889,  164,  120,  122,  140,  166,  119,  433,
      166,  141,  121,  124,  365,  142,  124,  165,  144,  143,
      165,  125,  145,  145,  433,  430,  145,  146,  146,  124,
      221,  146,  433,  221,  147,  147,  124,  430,  147,  148,
      148,  166,  164,  148,  163,  124,  124,  163,  145,  146,
      124,  124,  147,  149,  149,  150,  150,  149,  165,  150,
      153,  153,  152,  152,  153,  148,  152,  434,  146,  154,
      154,  155,  155,  154,  888,  155,  157,  157,  156,  156,
      157,  150,  156,  163,  158,  158,  875,  153,  158,  149,

      151,  151,  152,  874,  151,  159,  159,  160,  160,  159,
      434,  160,  154,  151,  157,  151,  161,  161,  303,  151,
      161,  155,  167,  363,  151,  167,  156,  162,  162,  168,
      170,  162,  168,  170,  169,  151,  158,  169,  171,  151,
      159,  171,  161,  160,  363,  173,  174,  167,  173,  174,
      175,  170,  363,  175,  861,  162,  303,  176,  177,  169,
      176,  177,  178,  179,  860,  178,  179,  174,  168,  180,
      173,  192,  180,  171,  181,  181,  181,  186,  186,  186,
      858,  195,  196,  175,  195,  196,  176,  177,  839,  178,
      197,  179,  198,  197,  199,  198,  224,  199,  192,  224,

      192,  253,  200,  200,  253,  180,  200,  201,  201,  838,
      837,  201,  195,  198,  202,  202,  196,  836,  202,  203,
      203,  204,  204,  203,  813,  204,  205,  205,  218,  197,
      205,  218,  199,  203,  206,  206,  207,  207,  206,  253,
      207,  201,  200,  226,  208,  208,  226,  202,  208,  209,
      209,  204,  218,  209,  210,  210,  211,  211,  210,  219,
      211,  205,  219,  212,  212,  213,  213,  212,  810,  213,
      809,  214,  214,  207,  208,  214,  206,  215,  215,  210,
      226,  215,  209,  216,  216,  217,  217,  216,  219,  217,
      808,  220,  211,  212,  220,  222,  223,  249,  222,  223,

      213,  214,  225,  791,  789,  225,  227,  227,  788,  227,
      787,  217,  767,  216,  228,  215,  229,  228,  230,  229,
      231,  230,  249,  231,  232,  220,  249,  232,  545,  222,
      233,  223,  234,  233,  235,  234,  252,  235,  766,  252,
      228,  225,  765,  229,  227,  236,  236,  236,  242,  242,
      242,  545,  233,  254,  231,  235,  254,  255,  764,  761,
      255,  252,  230,  232,  366,  256,  726,  234,  256,  257,
      257,  258,  258,  257,  723,  258,  259,  259,  254,  722,
      259,  260,  260,  260,  261,  261,  260,  366,  261,  262,
      262,  366,  717,  262,  257,  255,  714,  256,  263,  263,

      681,  258,  263,  264,  264,  276,  679,  264,  276,  259,
      265,  265,  261,  677,  265,  266,  266,  267,  267,  266,
      676,  267,  268,  268,  277,  673,  268,  277,  262,  276,
      269,  269,  280,  263,  269,  280,  295,  295,  295,  267,
      264,  266,  672,  265,  270,  270,  271,  271,  270,  668,
      271,  623,  272,  272,  268,  621,  272,  273,  273,  274,
      274,  273,  622,  274,  275,  269,  274,  275,  278,  280,
      620,  278,  279,  281,  281,  279,  281,  282,  621,  619,
      282,  271,  272,  283,  284,  275,  283,  284,  618,  285,
      617,  273,  285,  274,  278,  286,  279,  287,  286,  290,

      287,  288,  290,  616,  288,  282,  278,  289,  283,  291,
      289,  281,  291,  292,  615,  614,  292,  296,  296,  296,
      286,  611,  290,  609,  285,  558,  288,  555,  287,  554,
      284,  553,  289,  297,  297,  297,  298,  298,  298,  552,
      292,  299,  299,  299,  305,  306,  308,  305,  306,  308,
      551,  291,  307,  307,  307,  309,  550,  307,  309,  310,
      310,  311,  311,  310,  549,  311,  339,  312,  312,  339,
      305,  312,  331,  547,  308,  331,  309,  306,  316,  316,
      546,  310,  316,  312,  313,  313,  313,  317,  317,  313,
      399,  317,  543,  399,  311,  315,  315,  315,  318,  318,

      315,  498,  318,  334,  319,  319,  334,  316,  319,  315,
      331,  315,  320,  320,  495,  315,  320,  321,  321,  322,
      322,  321,  494,  322,  323,  323,  319,  317,  323,  324,
      324,  315,  334,  324,  493,  315,  325,  325,  341,  492,
      325,  341,  321,  326,  326,  320,  324,  326,  327,  327,
      323,  491,  327,  329,  329,  328,  328,  329,  322,  328,
      490,  330,  330,  325,  332,  330,  333,  332,  489,  333,
      335,  326,  341,  335,  488,  325,  329,  328,  350,  350,
      350,  336,  327,  330,  336,  337,  487,  486,  337,  338,
      338,  338,  333,  335,  338,  340,  340,  340,  342,  343,

      340,  342,  343,  332,  333,  344,  336,  345,  344,  347,
      345,  346,  347,  348,  346,  342,  348,  351,  351,  351,
      484,  483,  343,  353,  353,  353,  369,  375,  344,  369,
      375,  337,  355,  355,  355,  344,  435,  432,  348,  357,
      357,  357,  431,  429,  345,  347,  346,  344,  359,  359,
      359,  364,  370,  364,  364,  370,  411,  364,  364,  411,
      428,  369,  364,  364,  427,  364,  375,  371,  371,  371,
      426,  364,  371,  370,  373,  373,  373,  411,  425,  373,
      374,  374,  374,  376,  376,  374,  424,  376,  377,  377,
      378,  378,  377,  422,  378,  379,  379,  380,  380,  379,

      421,  380,  382,  382,  383,  383,  382,  418,  383,  384,
      384,  368,  378,  384,  373,  398,  385,  385,  398,  380,
      385,  362,  376,  386,  386,  361,  349,  386,  387,  387,
      383,  396,  387,  377,  396,  379,  381,  381,  463,  304,
      381,  463,  382,  388,  388,  385,  384,  388,  386,  381,
      398,  381,  389,  389,  294,  381,  389,  390,  390,  389,
      396,  390,  463,  381,  391,  391,  387,  394,  391,  395,
      394,  381,  395,  388,  293,  381,  392,  392,  251,  390,
      392,  393,  393,  397,  410,  393,  397,  410,  400,  400,
      400,  408,  391,  400,  408,  394,  247,  395,  401,  401,

      401,  246,  392,  401,  403,  403,  403,  404,  404,  403,
      404,  405,  405,  405,  245,  412,  405,  397,  412,  410,
      393,  407,  407,  407,  409,  413,  407,  409,  413,  423,
      408,  414,  415,  244,  414,  415,  416,  436,  241,  416,
      436,  417,  417,  417,  403,  404,  417,  419,  419,  419,
      412,  240,  437,  409,  413,  437,  423,  416,  423,  441,
      239,  407,  441,  414,  415,  438,  438,  438,  238,  194,
      438,  436,  440,  440,  440,  442,  442,  440,  190,  442,
      461,  443,  443,  461,  441,  443,  444,  444,  446,  446,
      444,  437,  446,  445,  445,  445,  189,  443,  445,  447,

      447,  448,  448,  447,  442,  448,  449,  449,  470,  188,
      449,  470,  440,  450,  450,  452,  452,  450,  461,  452,
      444,  453,  453,  446,  187,  453,  482,  482,  482,  447,
      448,  449,  451,  451,  451,  450,  185,  451,  454,  454,
      455,  455,  454,  184,  455,  462,  456,  456,  462,  183,
      456,  182,  452,  469,  457,  457,  469,  453,  457,  458,
      458,  459,  459,  458,  139,  459,  460,  460,  460,  464,
      135,  460,  464,  454,  456,  465,  465,  134,  465,  462,
      457,  466,  466,  466,  133,  471,  466,  458,  471,  468,
      468,  468,  472,  459,  468,  472,  473,  132,  474,  473,

      469,  474,  475,  464,  476,  475,  477,  476,  478,  477,
      485,  478,  131,  465,  479,  479,  479,  496,  130,  479,
      481,  481,  481,  129,  472,  481,  475,  474,  499,  468,
      471,  499,  473,  476,  500,  485,  128,  500,  496,  485,
      496,  477,  501,  501,  501,  478,  127,  501,  502,  502,
      502,  503,  503,  502,  126,  503,   94,  504,  504,  500,
      481,  504,   89,  505,  505,  505,  526,  499,  505,  526,
      508,  508,   88,  503,  508,  509,  509,  511,  511,  509,
      556,  511,   87,  504,  507,  507,  507,  559,   86,  507,
      559,  510,  510,  510,  526,  508,  510,   85,  507,  556,

      507,  512,  512,  556,  507,  512,  513,  513,  513,   83,
      509,  513,  516,  516,  511,   79,  516,  517,  517,   46,
      507,  517,  528,   43,  507,  528,  518,  518,  519,  519,
      518,   38,  519,   36,  516,  520,  520,  534,   35,  520,
      534,  512,  515,  515,  515,  521,  521,  515,  528,  521,
      517,  518,  521,  522,  522,   34,  515,  522,  515,  523,
      523,  520,  515,  523,   33,   32,  523,  519,  524,  524,
      524,   29,  534,  524,  525,  525,  525,  527,  515,  525,
      527,  529,  515,  522,  529,  530,   28,   13,  530,  531,
      531,  531,  532,  533,  531,  532,  533,  535,  535,  535,

      536,  527,  535,  536,  537,  538,   12,  537,  538,  539,
      540,   11,  539,  540,  525,  541,  541,  541,  533,  529,
      544,  544,  544,  548,  548,  548,  595,    8,    7,  595,
      532,  540,  530,    0,  536,  560,  560,  560,  538,    0,
      560,  566,  566,  537,    0,  566,  539,  561,  561,  561,
        0,  595,  561,  563,  563,  563,    0,    0,  563,  564,
      564,  564,    0,    0,  564,  565,  565,  565,    0,    0,
      565,  567,  567,  567,    0,  566,  567,  568,  568,  569,
      569,  568,    0,  569,  570,  570,  570,  573,  573,  570,
        0,  573,    0,  563,  574,  574,  575,  575,  574,  568,

      575,  606,  606,  606,  569,  565,  572,  572,  572,  573,
        0,  572,  576,  576,  577,  577,  576,    0,  577,    0,
      572,    0,  572,  574,  578,  578,  572,    0,  578,  580,
      580,  581,  581,  580,  587,  581,  575,  587,    0,  582,
      582,  577,  572,  582,  588,    0,  572,  588,  576,  583,
      583,  584,  584,  583,    0,  584,  583,  585,  585,  586,
      586,  585,    0,  586,  589,  582,    0,  589,  580,  587,
      588,    0,  590,    0,  584,  590,  591,  591,  591,    0,
        0,  591,  586,  592,  592,  592,    0,    0,  592,  594,
      594,  594,  585,    0,  594,  596,  596,  596,  597,  589,

      596,  597,  598,  598,  598,    0,    0,  598,  600,  600,
      600,  590,    0,  600,  601,  601,  601,  602,  603,  601,
      602,  603,  604,  604,  604,  605,    0,  604,  605,  594,
      607,  607,  607,    0,    0,  597,  610,  610,  610,  612,
      612,  612,    0,  624,    0,  602,  624,  603,  600,  625,
      625,  625,    0,    0,  625,  627,  627,  627,  605,    0,
      627,  628,  628,    0,    0,  628,  629,  629,  629,  632,
      632,  629,    0,  632,  647,  633,  633,  647,    0,  633,
        0,  624,  634,  634,    0,    0,  634,  628,  635,  635,
      635,  752,    0,  635,  752,  627,  631,  631,  631,  636,

      636,  631,  633,  636,    0,  637,  637,  632,  647,  637,
      631,    0,  631,  638,  638,  645,  631,  638,  645,  639,
      639,  646,  634,  639,  646,  640,  640,    0,  636,  640,
      641,  641,  631,  637,  641,    0,  631,  642,  642,  648,
        0,  642,  648,  639,    0,  643,  643,  643,    0,  638,
      643,  644,  644,  641,    0,  644,  646,  645,  639,  649,
      649,  649,    0,  642,  649,  640,  651,  651,  651,  652,
        0,  651,  652,  653,  653,  653,  648,  644,  653,  655,
      655,  655,    0,    0,  655,  656,  656,  656,    0,    0,
      656,  657,  657,  657,    0,    0,  657,  659,  659,  659,

      661,    0,  659,  661,  665,    0,  651,  665,  652,  660,
      660,  660,    0,    0,  660,  662,  662,  662,    0,  655,
      662,  664,  664,  664,    0,    0,  664,  666,  666,  666,
      669,  669,  669,  674,  674,  674,    0,  659,  682,  661,
        0,  682,  665,  675,  675,  675,  678,  678,  678,  683,
      683,  683,  684,  684,  683,    0,  684,  702,  685,  685,
      702,  664,  685,  682,  686,  686,    0,    0,  686,  687,
      687,  687,  691,  691,  687,    0,  691,  684,  690,  690,
      690,  692,  692,  690,    0,  692,  693,  693,  694,  694,
      693,  702,  694,  686,  685,  689,  689,  689,  695,  695,

      689,    0,  695,    0,  696,  696,  700,  700,  696,  689,
      700,  689,    0,  694,    0,  689,  692,  697,  697,  697,
      703,    0,  697,  703,  695,  699,  699,  699,  693,    0,
      699,  689,  696,    0,  700,  689,  701,  701,  701,  704,
        0,  701,  704,  705,    0,    0,  705,  706,  706,  706,
        0,    0,  706,  708,  708,  708,    0,    0,  708,  703,
      704,  716,  716,  716,    0,  699,  701,  705,    0,  705,
      709,  709,  709,    0,    0,  709,  711,  711,  711,    0,
        0,  711,  712,  712,  712,  727,    0,  712,  727,  713,
      713,  713,    0,  708,  713,  718,  718,  718,  720,  720,

      720,  724,  724,  724,  728,  728,  728,  731,  731,  728,
        0,  731,  750,  732,  732,  750,  711,  732,  733,  733,
      733,    0,    0,  733,  727,  730,  730,  730,    0,    0,
      730,  734,  734,  734,  737,  737,  734,  750,  737,  730,
        0,  730,  739,  739,  783,  730,  739,  783,  732,  740,
      740,  741,  741,  740,    0,  741,  743,  743,  742,  742,
      743,  730,  742,    0,    0,  730,  736,  736,  736,  744,
      744,  736,    0,  744,  753,  745,  745,  753,  743,  745,
      736,  739,  736,  746,  746,  751,  736,  746,  751,  785,
        0,  741,  785,  742,  747,  747,  747,  744,  754,  747,

        0,  754,  736,  753,    0,  745,  736,  749,  749,  749,
        0,    0,  749,  746,  755,  755,  755,    0,    0,  755,
      757,  757,  757,  785,  751,  757,  758,  758,  758,  768,
        0,  758,  768,  754,  760,  760,  760,    0,    0,  760,
      762,  762,  762,  805,  770,  770,  805,  749,  770,  771,
      771,  771,    0,  768,  771,  768,  832,  774,  774,  832,
      757,  774,  775,  775,  776,  776,  775,    0,  776,  777,
      777,    0,    0,  777,  760,  769,  769,  779,  779,  769,
        0,  779,  782,  774,  770,  782,  775,    0,  769,    0,
      769,  778,  778,  786,  769,  778,  786,    0,    0,  780,

      780,  775,  769,  780,  781,  781,    0,  779,  781,  784,
      769,    0,  784,    0,  769,  773,  773,  773,    0,    0,
      773,  790,  790,  790,    0,  782,    0,  786,  784,  773,
      778,  773,    0,  792,  780,  773,  792,  793,  793,  781,
        0,  793,  794,  794,  795,  795,  794,  784,  795,  796,
      796,  773,    0,  796,    0,  773,  797,  797,  798,  798,
      797,    0,  798,  799,  799,  800,  800,  799,  792,  800,
      801,  801,  801,  793,    0,  801,  797,  802,  802,  802,
      804,    0,  802,  804,  795,  798,    0,    0,  803,  803,
      803,  796,  799,  803,    0,  797,    0,  798,  806,  804,

      800,  806,  807,    0,    0,  807,  811,  811,  811,  814,
      815,  815,  814,    0,  815,  817,  817,    0,  804,  817,
      818,  818,  819,  819,  818,    0,  819,  820,  820,    0,
        0,  820,    0,  821,  821,  821,    0,  806,  821,  833,
      817,  807,  833,  814,    0,  815,  816,  816,    0,    0,
      816,  822,  822,  822,    0,  818,  822,  820,    0,  816,
        0,  816,  823,  823,  823,  816,  816,  823,  825,  825,
      825,    0,    0,  825,  826,  826,  826,  833,    0,  826,
        0,  816,  828,  828,  828,  816,    0,  828,  829,  829,
      829,    0,    0,  829,  831,  831,  831,  834,    0,  831,

      834,  835,  835,  835,  840,    0,  835,  840,  825,  841,
      841,  842,  842,  841,    0,  842,  843,  843,    0,    0,
      843,    0,  828,  844,  844,  845,  845,  844,  853,  845,
        0,  853,  846,  846,  831,  834,  846,    0,  843,  847,
      847,  847,    0,  840,  847,  849,  849,  849,    0,  841,
      849,  850,  850,  850,    0,    0,  850,  852,  852,  852,
        0,    0,  852,    0,  845,    0,  853,  846,  854,  854,
      854,    0,    0,  854,  855,  855,  855,    0,    0,  855,
        0,  857,  857,  857,    0,  849,  857,  859,  859,  859,
      862,  862,  862,    0,    0,  862,    0,  852,  863,  863,

      863,  865,  865,  863,    0,  865,  866,  866,    0,    0,
      866,  867,  867,    0,    0,  867,  871,  871,  871,    0,
        0,  857,  864,  864,    0,    0,  864,  868,  868,  868,
      898,  898,  868,  866,  898,  864,  867,  864,    0,    0,
      865,  864,  870,  870,  870,  866,    0,  870,  872,  872,
      872,  876,  876,  876,    0,  898,  876,  864,  878,  878,
      878,  864,    0,  878,  879,  879,  879,  882,  882,  879,
        0,  882,  883,  883,  891,  891,  883,    0,  891,  884,
      884,    0,  870,  884,  885,  885,  885,  886,  886,  886,
      890,  890,  890,  892,  892,  890,  882,  892,  878,  881,

      881,  881,  883,    0,  881,    0,  884,  899,  899,  891,
        0,  899,    0,  881,    0,  881,  895,  895,  895,  881,
        0,  895,  897,  897,  897,    0,    0,  897,    0,  892,
      902,  902,  903,  903,  902,  881,  903,  905,  905,  881,
        0,  905,  899,  906,  906,  908,  908,  906,    0,  908,
      909,  909,  911,  911,  909,    0,  911,  902,    0,  912,
      912,    0,  897,  912,  914,  914,    0,    0,  914,    0,
      909,    0,  903,  905,  915,  915,    0,    0,  915,    0,
      908,  917,  917,  919,  919,  917,    0,  919,    0,  909,
      921,  921,  911,    0,  921,  929,  929,  929,  930,  930,

      930,  917,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  915,    0,    0,    0,    0,    0,    0,
      917,    0,    0,    0,    0,    0,    0,    0,    0,  921,
      933,  933,  933,  933,  933,  934,  934,  934,  934,  934,
      935,  935,  935,  935,  935,  936,  936,  936,  936,  936,
      937,  937,  937,  937,  937,  938,    0,  938,  938,  938,
      939,  939,  939,  939,  939,  940,    0,  940,  940,  940,
      941,  941,  941,  941,  941,  942,    0,  942,  943,  943,
      943,  943,  943,  944,  944,  945,  945,  945,  945,  945,
      946,  946,  946,  946,  946,  947,    0,  947,  947,  947,

      948,  948,  948,  948,  948,  949,  949,  949,  949,  949,
      932,  932,  932,  932,  932,  932,  932,  932,  932,  932,
      932,  932,  932,  932,  932,  932,  932,  932,  932,  932,
      932,  932,  932,  932,  932,  932,  932,  932,  932,  932,
      932,  932,  932,  932,  932,  932,  932,  932,  932,  932,
      932,  932,  932,  932,  932,  932,  932,  932,  932,  932,
      932,  932
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#define INITIAL 0
//debug static int DC = 0; 
/*
   makeedit.l : This file is part of pstoedit
   Simple parser to parse the intermediate flat PostScript and call the backend
   output routines.

   Copyright (C) 1993 - 2005 Wolfgang Glunz, wglunz34_AT_pstoedit.net

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

*/
#include "cppcomp.h"
#include I_iostream
#include I_fstream

#include I_string_h

#include <math.h>

USESTD

#include "psfront.h"
#include "miscutil.h"

static float  origx, origy;
static char   *start_of_text;
static char   *end_of_text;
static float  number;

#define YY_SKIP_YYWRAP
static int yywrap() { return 1;}

static inline int toInt(const float f) { 
	return (f > 0.0f) ? (int)(f+0.5f) : (int)(f-0.5f);
}



static inline float minf(float f1, float f2) { return (f1<f2) ? f1:f2; }
static const int debuglexer = 0;

#define YY_NEVER_INTERACTIVE 1
// to avoid usage of isatty

#define YY_NO_UNPUT
// to avoid compiler warning

// define YY_DECL int yylex YY_PROTO(( *outputdriver ))
#define YY_DECL int PSFrontEnd::yylex()

#define CHECKconstraints if (!constraintsChecked) { errf << "input file did not contain a backendconstraints directive. Cannot proceed. " << endl; return 1; }

//lint -esym(773, BEGIN)
// Expression-like macro 'BEGIN' not parenthe sized

#define READPATH 1

#define READIMAGE 2

#define READPROLOG 3

#define READBBOXNUMBERS 4

#define READBBOX 5


/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;



	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 933 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3111 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
{ 
	// not in READPROLOG !!
// Work around for Linux libg++ bug
			 number = (float) atof(yytext);
// Original
//			 istrstream s(yytext);
//			 s >> number;

 // cout << "adding number   : " << number << " " << yytext << endl;
			 
			 addNumber(number );
			}
	YY_BREAK
case 2:
YY_RULE_SETUP
{}
	YY_BREAK
case 3:
YY_RULE_SETUP
{ BEGIN(READBBOXNUMBERS); }
	YY_BREAK
case 4:
YY_RULE_SETUP
{ 
	const float ury = popUnScaled(); 
	const float urx = popUnScaled(); 
	bboxes_ptr[currentPageNumber].ur = Point(urx,ury);	
	
	const float lly = popUnScaled(); 
	const float llx = popUnScaled();
	bboxes_ptr[currentPageNumber].ll = Point(llx,lly);

//	cerr << llx <<  " " << lly <<  " " << urx <<  " " << ury << endl;
	currentPageNumber++;
	BEGIN(READBBOX);
}
	YY_BREAK
case 5:
YY_RULE_SETUP
{ }
	YY_BREAK
case 6:
YY_RULE_SETUP
{ 
//	cout << " <READBBOXNUMBERS> " << yytext << endl;
}
	YY_BREAK
case 7:
YY_RULE_SETUP
{
			const int flattened = toInt(popUnScaled());
			const int textastext = toInt(popUnScaled());
			if (!driverDesc->backendSupportsText    && textastext) {
				errf << "Warning: this preprocessed input file contains text but the selected backend does NOT support this - Hint: use -dt option for preprocessing" << endl;
			}
			if (!driverDesc->backendSupportsCurveto && !flattened) {
				errf << "Warning: this preprocessed input file possibly contains curves but the selected backend does NOT support this. Curves will be converted to a set of straight lines." << endl;
				// return(1);
			}
			constraintsChecked=true;
			}
	YY_BREAK
case 8:
YY_RULE_SETUP
{ 
			CHECKconstraints
			backend->showpage();

			currentPageNumber++;
			if (currentPageNumber <= drvbase::totalNumberOfPages) {
			if ( splitpages ) {
				if(outfilename) {
					if (strstr(outfilename,"%d") == NIL) {
						errf << "Warning: no %d found in name of output file and page feed found in input and either the selected format does not support multiple pages or the -split option was specified.\nPlease insert a %d in the name of the output file if you want to split pages into different files" << endl;
						// we cannot close the output file in this case otherwise
						// we would overwrite the previous results
					} else  {
						delete backend; backend = 0; // 
						ofstream * outputFilePtr = (ofstream *) &outFile;
						char * newname = new char[strlen(outfilename) + 30 ];
						sprintf(newname,outfilename,currentPageNumber);
						// not needed here since done in main program convertBackSlashes(nameOfOutputFile);
						if (driverDesc->backendFileOpenType != DriverDescription::noopen ){ 
							outputFilePtr->close();
							if (driverDesc->backendFileOpenType == DriverDescription::binaryopen ) { 
#if (defined(unix) || defined(__unix__) || defined(_unix) || defined(__unix) || defined(__EMX__) || defined (NetBSD) ) && !defined(DJGPP)
// binary is not available on UNIX, only on PC
								outputFilePtr->open(newname,ios::out);
#else
								// use redundant ios::out because of bug in djgpp
								outputFilePtr->open(newname,ios::out | ios::binary);
#endif
								// errf << "opened " << newname << " for binary output" << endl;
							} else {
								outputFilePtr->open(newname);
								// errf << "opened " << newname << " for output" << endl;
							}
							if (outFile.fail() ) {
								errf << "Could not open file " << newname << " for output" << endl;
								delete [] newname;
								return 1;
							} // fail
						} // backend opens file by itself
						backend =  driverDesc->CreateBackend(driveroptions,*outputFilePtr,errf,infilename,newname,globaloptions);
						delete [] newname;
						if (!backend->driverOK()) {
							errf << "Creation of driver for new page failed " << endl;
							return (1);
						}
						backend->currentPageNumber = currentPageNumber - 1; // backend will add one again in open_page
					} // file name contains %d
				} else {
					errf << "Cannot split pages if output is standard output" << endl;
					return(1);
				} // outfilename
			} // splitpages
			} else {
				// ignore any showpage for pages greater than totalNumberOfPages
				if (backend->verbose) errf << "page " << currentPageNumber << " is greater than expected maximum number of pages " << drvbase::totalNumberOfPages << endl;
				return 0; // normal return code;
			}
		      }
	YY_BREAK
case 9:
YY_RULE_SETUP
{ 
			if (backend->numberOfElementsInPath() != 0) {
				errf << "Error, path number " << pathnumber << " was not cleared correctly" << endl;
			}

			pathnumber++;
			BEGIN(READPATH); 
			backend->setIsPolygon(false);
			backend->setPathNumber(pathnumber);
			}
	YY_BREAK
case 10:
YY_RULE_SETUP
{
			/* old version: /Helvetica findfont 14 scalefont setfont */
			/* (Helvetica) cvn findfont  [  3.0 8.31384 -5.19615 4.8 106.699 455.692 ] makefont setfont */
			/* new version because sometimes the new name contains a % */
			if (!non_standard_font) {
			// in the case of a non standard font, the setCurrentFontName was
			// done during handling of nonstandard font
				start_of_text = strchr (yytext,(int)'(') + 1 ;
				end_of_text = strrchr (yytext,(int)')') ;
				if (end_of_text) *end_of_text = (char) 0;
				backend->setCurrentFontName(start_of_text,0);
			}
			non_standard_font = 0; // reset 
			}
	YY_BREAK
case 11:
YY_RULE_SETUP
{
				//may lead to a lot of messages : 
				if (backend->verbose) errorMessage(yytext);
				// wogl;
			}
	YY_BREAK
case 12:
YY_RULE_SETUP
{
				BEGIN(READPROLOG);
			}
	YY_BREAK
case 13:
YY_RULE_SETUP
{
				BEGIN(INITIAL);
			}
	YY_BREAK
case 14:
YY_RULE_SETUP
{ 
			/* fprintf(stderr,"%s\n",yytext);  */
			start_of_text = yytext+2;
			end_of_text =  strrchr (yytext,(int)' ') ;
			if (end_of_text) *end_of_text = (char) 0;
			backend->setCurrentFontFamilyName(start_of_text);
			}
	YY_BREAK
case 15:
YY_RULE_SETUP
{ 
			/* fprintf(stderr,"%s\n",yytext);  */
			start_of_text = yytext+2;
			end_of_text =  strrchr (yytext,(int)' ') ;
			if (end_of_text) *end_of_text = (char) 0;
			backend->setCurrentFontFullName(start_of_text);
			}
	YY_BREAK
case 16:
YY_RULE_SETUP
{ 
			/* fprintf(stderr,"%s\n",yytext);  */
			start_of_text = yytext+2;
			end_of_text =  strrchr (yytext,(int)' ') ;
			if (end_of_text) *end_of_text = (char) 0;
			backend->setCurrentFontWeight(start_of_text);
			}
	YY_BREAK
case 17:
YY_RULE_SETUP
{
			/* % Times-Roman Times-Roman@0 nonstandard font */
			/* % Bla Bla nonstandard font */ /* if it is not derived from a standard font */
			start_of_text = yytext+2;
			end_of_text =  strchr (start_of_text,(int)' ') ;
			if (end_of_text) *end_of_text = (char) 0;
			char   *start_of_secondname = end_of_text +1;
			char   *end_of_secondname = strchr (start_of_secondname,(int)' ') ;
			if (end_of_secondname) *end_of_secondname = (char) 0;
			non_standard_font = 1; // this avoids a further setting of CurrentFontName
			if (strcmp(start_of_text,start_of_secondname) == 0 ) {
				// both names are equal, so it's not a derived font
				backend->setCurrentFontName(start_of_text,1);
			} else {
				// it's a derived font, so use the base name
				backend->setCurrentFontName(start_of_text,0);
			}
			}
	YY_BREAK
case 18:
YY_RULE_SETUP
{

			backend->beginClipPath();

			}
	YY_BREAK
case 19:
YY_RULE_SETUP
{
			backend->setCurrentShowType(drvbase::eofill);
			}
	YY_BREAK
case 20:
YY_RULE_SETUP
{
			backend->setCurrentShowType(drvbase::fill);
			}
	YY_BREAK
case 21:
YY_RULE_SETUP
{
			backend->setCurrentShowType(drvbase::stroke);
			}
	YY_BREAK
case 22:
YY_RULE_SETUP
{
				errf << yytext;
			}
	YY_BREAK
case 23:
YY_RULE_SETUP
{
			 addNumber(0.0f ); // pseudo false
			}
	YY_BREAK
case 24:
YY_RULE_SETUP
{
			 addNumber(1.0f ); // pseudo true
			 }
	YY_BREAK
case 25:
YY_RULE_SETUP
{ // begin of some Data Comment, just ignore the marker
			}
	YY_BREAK
case 26:
YY_RULE_SETUP
{
/*
sequence:

../tests/image/colorimage.ps.ps:%colorimage:begin
../tests/image/colorimage.ps.ps:%colorimage:ncomp
../tests/image/colorimage.ps.ps:%colorimage:multi
../tests/image/colorimage.ps.ps:%colorimage:imagematrix
../tests/image/colorimage.ps.ps:%colorimage:normalized image currentmatrix
../tests/image/colorimage.ps.ps:%colorimage:bits
../tests/image/colorimage.ps.ps:%colorimage:height
../tests/image/colorimage.ps.ps:%colorimage:width
../tests/image/colorimage.ps.ps:%colorimage:data
../tests/image/colorimage.ps.ps:%colorimage:end 

../tests/image/hw.ps.ps:%image:begin
../tests/image/hw.ps.ps:%image:imagematrix
../tests/image/hw.ps.ps:%image:normalized image currentmatrix
../tests/image/hw.ps.ps:%image:bits 
../tests/image/hw.ps.ps:%image:height
../tests/image/hw.ps.ps:%image:width
../tests/image/hw.ps.ps:%image:data
../tests/image/hw.ps.ps:%image:data
../tests/image/hw.ps.ps:%image:end

../tests/image/hwuse.eps.ps:%imagemask:begin
../tests/image/hwuse.eps.ps:%imagemask:imagematrix
../tests/image/hwuse.eps.ps:%imagemask:normalized image currentmatrix
../tests/image/hwuse.eps.ps:%imagemask:polarity
../tests/image/hwuse.eps.ps:%imagemask:height
../tests/image/hwuse.eps.ps:%imagemask:width
../tests/image/hwuse.eps.ps:%imagemask:data
../tests/image/hwuse.eps.ps:%imagemask:data
../tests/image/hwuse.eps.ps:%imagemask:end

%begin dealing with image from dict
%fileimage:begin
% DC  640 0 0 -480 0 480
%fileimage:imagematrix
%fileimage:filename but.dump_1.png
% DC  640
%fileimage:width
% DC  480
%fileimage:height
%fileimage:end
grestore %}
%end dealing with image from dict


*/
				if (debuglexer) { 
					cerr << "handling " << yytext ;
					pstack();
				}
				backend->imageInfo.isFileImage = false ;
				backend->imageInfo.type = colorimage;
				// ncomp will be written later
				// bits will be written later
				backend->imageInfo.polarity = true; 
				BEGIN(READIMAGE); 
			}
	YY_BREAK
case 27:
YY_RULE_SETUP
{
				if (debuglexer) { 
					cerr << "handling " << yytext ;
					pstack();
				}
				backend->imageInfo.isFileImage = true ;
				backend->imageInfo.type = normalimage;
				backend->imageInfo.ncomp = 1;
				// bits will be written later
				backend->imageInfo.polarity = true; 
				BEGIN(READIMAGE); 
			}
	YY_BREAK
case 28:
YY_RULE_SETUP
{
				if (debuglexer) { 
					cerr << "handling " << yytext ;
					pstack();
				}
				backend->imageInfo.isFileImage = false ;
				backend->imageInfo.type = normalimage;
				backend->imageInfo.ncomp = 1;
				// bits will be written later
				backend->imageInfo.polarity = true; 
				BEGIN(READIMAGE); 
			}
	YY_BREAK
case 29:
YY_RULE_SETUP
{
				if (debuglexer) { 
					cerr << "handling " << yytext ;
					pstack();
				}
				backend->imageInfo.isFileImage = false ;
				backend->imageInfo.type = imagemask;
				backend->imageInfo.ncomp = 1;
				// polarity will be written later
				backend->imageInfo.bits = 1;
				BEGIN(READIMAGE); 
			}
	YY_BREAK
case 30:
YY_RULE_SETUP
{
				if (debuglexer) { 
					cerr << "handling " << yytext ;
					pstack();
				}

				// replace newline with eos
				yytext[strlen(yytext)-1] = '\0';
				//cout << "filename: {" << yytext << "}" << endl;
				backend->imageInfo.FileName = yytext+strlen("%fileimage:filename")+1;
			}
	YY_BREAK
case 31:
YY_RULE_SETUP
{
				if (debuglexer) { 
					cerr << "handling " << yytext ;
					pstack();
				}
				backend->imageInfo.ncomp = (short) toInt(popUnScaled());
			}
	YY_BREAK
case 32:
YY_RULE_SETUP
{ // only set for imagemask
				if (debuglexer) { 
					cerr << "handling " << yytext ;
					pstack();
				}
				backend->imageInfo.polarity = toInt(popUnScaled()) > 0.5 ;  // convert from float to bool
			}
	YY_BREAK
case 33:
YY_RULE_SETUP
{
				if (debuglexer) { 
					cerr << "handling " << yytext ;
					pstack();
				}
				pop(); // not used so far
			}
	YY_BREAK
case 34:
YY_RULE_SETUP
{
				if (debuglexer) { 
					cerr << "handling " << yytext ;
					pstack();
				}
				for (unsigned int i = 0; i < 6 ; i++ ) {
					backend->imageInfo.imageMatrix[5-i] = popUnScaled();
				}
			}
	YY_BREAK
case 35:
YY_RULE_SETUP
{
				if (debuglexer) { 
					cerr << "handling " << yytext ;
					pstack();
				}
				for (unsigned int i = 0; i < 6 ; i++ ) {
					backend->imageInfo.normalizedImageCurrentMatrix[5-i] = popUnScaled();
				}
			}
	YY_BREAK
case 36:
YY_RULE_SETUP
{ // only set for normalimage and colorimage
				if (debuglexer) { 
					cerr << "handling " << yytext ;
					pstack();
				}
				backend->imageInfo.bits = (short) toInt(popUnScaled());
			}
	YY_BREAK
case 37:
YY_RULE_SETUP
{
				if (debuglexer) { 
					cerr << "handling " << yytext ;
					pstack();
				}
				backend->imageInfo.height = toInt(popUnScaled());
			}
	YY_BREAK
case 38:
YY_RULE_SETUP
{
				if (debuglexer) { 
					cerr << "handling " << yytext ;
					pstack();
				}
				backend->imageInfo.width = toInt(popUnScaled());
			}
	YY_BREAK
case 39:
YY_RULE_SETUP
{
			CHECKconstraints
				if (debuglexer) { 
					cerr << "handling " << yytext ;
					pstack();
				}
//cerr << "handling DC " << DC++ << endl;
//cerr << "handling " << yytext ;
//cerr << "strlen " << strlen(yytext) << endl ;
				unsigned int size = backend->imageInfo.height * ((backend->imageInfo.ncomp * backend->imageInfo.width  * backend->imageInfo.bits + 7 ) / 8);
				if (backend->imageInfo.data == 0) {
// cerr << " allocating " << size << " for image data " << endl;
					backend->imageInfo.data = new unsigned char[size];
					if (backend->imageInfo.data==0) {
						cerr << "out of memory for image data" << endl;
						return(1);
					}
					backend->imageInfo.nextfreedataitem = 0;
					// init
//					for (unsigned int i = 0 ; i < size; i++) {
//						backend->imageInfo.data[i] = 0;
//					}
				}
				const char * cp = yytext;
				// search for ' '
				while (cp && (*cp != ' ')) cp++; 
				// now cp points to blank
				cp++;
//cerr << "effective length " << strlen(cp) << endl;
				do {
					const char chigh = *cp;
					const unsigned int high = hextoint(*cp);
					cp++;
					if (*cp == '\0') {
						cerr << "data format error " << endl;
						return(1);
					}
					const char clow = *cp;
					const unsigned int low = hextoint(*cp);
					cp++; 
					if ( backend->imageInfo.nextfreedataitem < size ) {
						backend->imageInfo.data[backend->imageInfo.nextfreedataitem] = (unsigned char) (high * 16 + low);
//						cerr << backend->imageInfo.nextfreedataitem << ":" << chigh<< clow << endl;
						backend->imageInfo.nextfreedataitem++;
					}  else {
						cerr << "too much data: ignoring " << chigh << clow << endl;
					}
				} while (cp && (*cp != '\0'));

			}
	YY_BREAK
case 40:
YY_RULE_SETUP
{
				if (debuglexer) { 
					cerr << "handling " << yytext ;
					pstack();
				}

				backend->dumpImage();
			 	BEGIN(INITIAL);
			}
	YY_BREAK
case 41:
YY_RULE_SETUP
{ 
				if (debuglexer) cerr << "comment ignored " << yytext;
			}
	YY_BREAK
case 42:
YY_RULE_SETUP
{
			// setCurrentFontSize(number );
			float matrix[6];
			matrix[5] = pop();
			matrix[4] = pop();
			matrix[3] = pop(); // sy * cos(phi)
			matrix[2] = pop(); // sy * -sin(phi)
			matrix[1] = pop(); // sx * sin(phi)
			matrix[0] = pop(); // sx * cos(phi)
			backend->setCurrentFontMatrix(matrix);
			const float fsizex = (float) sqrt((matrix[0] * matrix[0]) + (matrix[1] * matrix[1]));
			const float fsizey = (float) sqrt((matrix[2] * matrix[2]) + (matrix[3] * matrix[3]));
			const float todegrees =   180.0f / 3.14159265358979323846f ;
			float phix = (matrix[0] != 0.0f) ? (todegrees * (float) atan(matrix[1] / matrix[0]) ) : (matrix[1] > 0 ? 90.0f : -90.0f );
//			float phiy = todegrees * atan(-1.0 * matrix[2] / matrix[3]);
			if (matrix[0] < 0.0f ) phix = 180 + phix; // if cos (phi) < 0 than add 180
//			if (matrix[3] < 0.0f ) phiy = 180 + phiy;
			if (phix < 0.0f ) phix = 360 + phix;
//			if (phiy < 0.0f ) phiy = 360 + phiy;
//			for (int i = 0; i < 6; i++ ) cout << "matrix [" << i << "] " << matrix[i] << " ";
//			cout << fsizex << " " << fsizey  << " " << endl;
//			cout << phix << " " << phiy  << " "  << endl;
			backend->setCurrentFontSize((fsizex + fsizey)/2.0f);
			backend->setCurrentFontAngle(phix);
			}
	YY_BREAK
case 43:
YY_RULE_SETUP
{
//obsolete
			// setCurrentFontSize(number );
			backend->setCurrentFontSize(pop());
			// pop(); 
			}
	YY_BREAK
case 44:
YY_RULE_SETUP
{
			const float B = popUnScaled();
			const float G = popUnScaled();
			const float R = popUnScaled();
			/* printf("%s %f %f %f\n","setting RGB to ",R,G,B); */
			backend->setRGB(R,G,B);
			}
	YY_BREAK
case 45:
YY_RULE_SETUP
{
			const float K = popUnScaled();
			const float Y = popUnScaled();
			const float M = popUnScaled();
			const float C = popUnScaled();
			const unsigned int colormodel = 3;
			// http://www.efg2.com/Lab/Library/Color/AndComputers.htm
			switch (colormodel) {
			case 1: {
			const float R = 1.0f - minf(1.0f,C+K); // according to PLRM page 307
			const float G = 1.0f - minf(1.0f,M+K);
			const float B = 1.0f - minf(1.0f,Y+K);
	//		printf("%s %f %f %f\n","setting RGB to ",R,G,B);
						backend->setRGB(R,G,B);
						}
						break;
			case 2: {
			
			/* alternative formula
	http://research.microsoft.com/~hollasch/cgindex/color/cmyk.html
	http://www.ghostscript.com/pipermail/gs-cvs/2002-November/002588.html
	
	
	http://www.paris-pc-gis.com/MI_Enviro/Colors/color_models.htm
			  R = (1.0 - C) * (1.0 - K), etc. 
			*/

			const float R = (1.0f - C)*(1.0f - K); 
			const float G = (1.0f - M)*(1.0f - K);
			const float B = (1.0f - Y)*(1.0f - K);
	//		printf("%s %f %f %f\n","setting RGB to ",R,G,B);
						backend->setRGB(R,G,B);
			}
			break;
			case 3: {
			
/*

	http://www.neuro.sfc.keio.ac.jp/~aly/polygon/info/color-space-faq.html

RGB -> CMYK				            | CMYK -> RGB
Black=minimum(1-Red,1-Green,1-Blue)	| Red=1-minimum(1,Cyan*(1-Black)+Black)
Cyan=(1-Red-Black)/(1-Black)	    | Green=1-minimum(1,Magenta*(1-Black)+Black)
Magenta=(1-Green-Black)/(1-Black)	| Blue=1-minimum(1,Yellow*(1-Black)+Black)
Yellow=(1-Blue-Black)/(1-Black)	    |
*/

			const float R = 1.0f - minf(1.0f,C*(1-K)+K); 
			const float G = 1.0f - minf(1.0f,M*(1-K)+K);
			const float B = 1.0f - minf(1.0f,Y*(1-K)+K);
	//		printf("%s %f %f %f\n","setting RGB to ",R,G,B);
						backend->setRGB(R,G,B);
				}
			break;
			default: break;
			}
			
			}
	YY_BREAK
case 46:
YY_RULE_SETUP
{
				yytext[strlen(yytext) -9] = '\0'; // strip of trailing setdash
				backend->setDash(yytext+1); // don't copy leading space
			}
	YY_BREAK
case 47:
YY_RULE_SETUP
{
			backend->setCurrentMiterLimit(number);
			pop(); 
			}
	YY_BREAK
case 48:
YY_RULE_SETUP
{
			backend->setCurrentLineJoin((int) (number +0.5));
			pop(); 
			}
	YY_BREAK
case 49:
YY_RULE_SETUP
{
			backend->setCurrentLineCap((int) (number +0.5));
			pop(); 
			}
	YY_BREAK
case 50:
YY_RULE_SETUP
{
			backend->setCurrentLineWidth(pop() );
//			setCurrentLineWidth(number  );
//			pop(); 
			}
	YY_BREAK
case 51:
YY_RULE_SETUP
{
			float height = pop(); 
			if (height < 1.0 ) { height = 792 * backend->getScale() ; }
			backend->setCurrentDeviceHeight(height);
			float width  = pop(); 
			if (width < 1.0 ) { width = 612 * backend->getScale() ; }
			backend->setCurrentDeviceWidth(width);
			if (backend->verbose) errf << "handling setPageSize " << height << " " << width << endl;
			}
	YY_BREAK
case 52:
YY_RULE_SETUP
{
			const bool  mappedtoisolatin1 = pop() > 0.5; // float to bool
			const float y_end = pop();
			const float x_end = pop();
			const float ay = pop();
			const float ax = pop();
			const int   Char = (int) (popUnScaled()   +0.5);	
			const float cy = pop();
			const float cx = pop();
			backend->setMappedtoisolatin1(mappedtoisolatin1);
			backend->setCurrentWidthParams(ax,ay,Char,cx,cy,x_end,y_end);
			}
	YY_BREAK
case 53:
YY_RULE_SETUP
{ 
			CHECKconstraints
			start_of_text = strchr (yytext,(int)'(') + 1 ;
			end_of_text = strrchr (yytext,(int)')') ;
			if (end_of_text) *end_of_text = (char) 0;
			const float y = pop(); /* just the last moveto (0 0 in case of makefont) */
			const float x = pop(); /* just the last moveto (0 0 in case of makefont) */
			/* backend->dumpText(start_of_text,x,y); */
			backend->pushHEXText(start_of_text,x + backend->getCurrentFontMatrix()[4],y + backend->getCurrentFontMatrix()[5]);
			}
	YY_BREAK
case 54:
YY_RULE_SETUP
{ 
			CHECKconstraints
			start_of_text = strchr (yytext,(int)'(') + 1 ;
			end_of_text = strrchr (yytext,(int)')') ;
			if (end_of_text) *end_of_text = (char) 0;
			const float y = pop(); /* just the last moveto (0 0 in case of makefont) */
			const float x = pop(); /* just the last moveto (0 0 in case of makefont) */
			/* backend->dumpText(start_of_text,x,y); */
			backend->pushText(start_of_text,x + backend->getCurrentFontMatrix()[4],y + backend->getCurrentFontMatrix()[5]);
			}
	YY_BREAK
case 55:
YY_RULE_SETUP
{
// obsolete
			backend->setCurrentFontAngle(number);
			pop();
			}
	YY_BREAK
case 56:
YY_RULE_SETUP
{
//obsolete
			/* Because this is in the preamble, only pop 
			   this has put something on the stack. */
			if (nextFreeNumber >= 2)
				{ pop(); pop(); }
			}
	YY_BREAK
case 57:
YY_RULE_SETUP
{
//obsolete
			/* Because this is in the preamble, only pop 
			   this has put something on the stack. */
			if (nextFreeNumber >= 2)
				{ pop(); pop(); }
			}
	YY_BREAK
case 58:
YY_RULE_SETUP
{ /* ignore any other stuff */ }
	YY_BREAK
case 59:
YY_RULE_SETUP
{ 
			CHECKconstraints
			// save coordinates for possible closepath
			origy = pop();
			origx = pop();
			if (backend->numberOfElementsInPath() > 1) {
				// this is an intermediate moveto
				// if backend supports subpaths add it
				// else dump last path and start a new one
				if (backend->globaloptions.simulateSubPaths || backend->Pdriverdesc->backendSupportsSubPathes) {
//					Point p(origx,origy);
					backend->addtopath(new Moveto(origx,origy));  
				} else {
					// dumppath
					backend->dumpPath();
					// start new path
//					Point p(origx,origy);
					backend->addtopath(new Moveto(origx,origy));  
					
				}
			} else {
				// it is a starting moveto
//				Point p(origx,origy);
				backend->addtopath(new Moveto(origx,origy));  
			}
			currentpoint = Point(origx,origy);
		   }
	YY_BREAK
case 60:
YY_RULE_SETUP
{
			float y = pop();
			float x = pop();
//			Point p(x,y);
			backend->addtopath(new Lineto(x,y)); 
			currentpoint = Point(x,y);
			}
	YY_BREAK
case 61:
YY_RULE_SETUP
{ 

			Point p[3];
			for (unsigned int i = 3; i > 0; i--) { 
				// !!! i = 2 to i>= 0 does not work for unsigned
				float y = pop();
				float x = pop();
				p[i-1] = Point(x,y);
			}

			if (backend->Pdriverdesc->backendSupportsCurveto) {
				backend->addtopath(new Curveto(p)); // pass p as array
			} else {

				const unsigned int sections = 10;

				const Point & cp1 = p[0];
				const Point & cp2 = p[1];
				const Point & ep  = p[2];

				for (unsigned int s = 0; s <= sections; s++) {
					const float t = 1.0f * s / sections;
					const Point pt = PointOnBezier(t, currentpoint, cp1, cp2, ep);
					backend->addtopath(new Lineto(pt.x_,pt.y_)); 
				}
//				errf << "illegal input received. curveto not expected by this backend\n";
//				return(1);			
			}
			currentpoint = Point(p[2].x_,p[2].y_);

			}
	YY_BREAK
case 62:
YY_RULE_SETUP
{
			 Point startPoint(origx,origy);
			 const basedrawingelement & lastelem = backend->pathElement(backend->numberOfElementsInPath() -1 );
			// check for last == first. Then no additional
			// lineto is needed. and isPolygon can be set to true
			 if  ( (lastelem.getType() == lineto) && (lastelem.getPoint(0) == startPoint) ) {
				// remove last lineto - 
				// a closepath is sometimes nicer than a lineto (see closevsline.ps)
				if (backend->verbose) errf << "removing obsolete lineto " << endl; 
				backend->removeFromElementFromPath();
				// no need to close the path, it's already closed
			 } /* else */ {
				if (backend->globaloptions.simulateSubPaths || backend->Pdriverdesc->backendSupportsSubPathes) {
			 		backend->addtopath(new Closepath()); 
				} else {
			 		backend->addtopath(new Lineto(origx,origy)); // pass p as array
				}

			 }
			 backend->setIsPolygon(true);
			 /* show is done by next stroke, fill or moveto */
 			 currentpoint = startPoint;
			}
	YY_BREAK
case 63:
YY_RULE_SETUP
{ 
			CHECKconstraints
			 BEGIN(INITIAL);
			 backend->dumpPath();
                       	};
	YY_BREAK
case 64:
YY_RULE_SETUP
{ 
			CHECKconstraints
			 BEGIN(INITIAL);
			 backend->dumpPath(); 
                       	};
	YY_BREAK
case 65:
YY_RULE_SETUP
{ 
			CHECKconstraints
			 BEGIN(INITIAL);
			 backend->dumpPath(); 
                       	};
	YY_BREAK
case 66:
YY_RULE_SETUP
{ 
				 backend->Save();
                       	};
	YY_BREAK
case 67:
YY_RULE_SETUP
{ 
				 backend->Save();
                       	};
	YY_BREAK
case 68:
YY_RULE_SETUP
{ 
				 backend->Restore();
                       	};
	YY_BREAK
case 69:
YY_RULE_SETUP
{ 
				 backend->Restore();
                       	};
	YY_BREAK
case 70:
YY_RULE_SETUP
{ 
				 backend->endClipPath(drvbase::clip);
				 BEGIN(INITIAL);
                    	};
	YY_BREAK
case 71:
YY_RULE_SETUP
{ 
				 backend->endClipPath(drvbase::eoclip);
				 BEGIN(INITIAL);
                    	};
	YY_BREAK
case 72:
YY_RULE_SETUP
{}
	YY_BREAK
case 73:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(READPATH):
case YY_STATE_EOF(READIMAGE):
case YY_STATE_EOF(READPROLOG):
case YY_STATE_EOF(READBBOXNUMBERS):
case YY_STATE_EOF(READBBOX):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 933 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 933 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 932);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif

void PSFrontEnd::yylexcleanup()
{
//	if (yy_state_buf) yy_flex_free(yy_state_buf);
	yy_delete_buffer( yy_current_buffer );

// reset the global initialized statics to their initial value
// so the lexer can be called again.
	yy_c_buf_p	= (char *) 0;
	yy_init		= 1;	/* whether we need to initialize */
	yy_start	= 0;	/* start state number */
}

unsigned int PSFrontEnd::readBBoxes(BBox * bboxes)
{
	BEGIN(READBBOX);
	bblexmode = true;
	currentPageNumber = 0;
	nextFreeNumber=0;
	bboxes_ptr = bboxes;
	yy_init = 1;
	yylex();
	yylexcleanup();
	return currentPageNumber;
}
void PSFrontEnd::run(bool mergelines)
{
	BEGIN(INITIAL);
	bblexmode = false;
	currentPageNumber = 1;
	nextFreeNumber=0;
	yy_init = 1;
	backend->startup(mergelines);
	if (!yylex()) {
		// yylex returns 0 on normal EOF
		// 1 in case of errors
		backend->finalize();
	}
	delete backend;
	backend = 0;
}

void PSFrontEnd::addNumber(float a_number)
{
  // printf("Adding %f\n",number);
 if (nextFreeNumber < maxPoints) { 
	// cout << "adding number : " << a_number << endl;
     	numbers[nextFreeNumber++] = a_number; 
     	// nextFreeNumber always points to the next free number
 } else { 
   	errf << "Too many numbers on stack. Please increase maxPoints in drvbase.h \n"; 
   	exit(1); 
 }
}

PSFrontEnd::PSFrontEnd(ostream& outfile_p, 
		ostream & errstream,
		const PsToEditOptions & globaloptions_p,
		const char * infilename_p,
		const char * outfilename_p,
		const DriverDescription * driverDesc_p,
		const char * driveroptions_p,
		const bool splitpages_p, 
		drvbase * backend_p)
	: outFile(outfile_p),
	  errf(errstream),
	  infilename(infilename_p),
	  outfilename(outfilename_p),
	  globaloptions(globaloptions_p),
	  driverDesc(driverDesc_p),
	  driveroptions(driveroptions_p),
	  splitpages(splitpages_p),
	  backend(backend_p),
	  currentPageNumber(1),
	  numbers((float*) 0),
      nextFreeNumber(0),
      pathnumber(0),
	  non_standard_font(false),
	  constraintsChecked(false),
	  bblexmode(false),
	  bboxes_ptr(0)
{
    numbers = new float[maxPoints]; // The number stack
    if ((numbers == 0)){
		errf << "new failed in PSFrontEnd::PSFrontEnd " << endl;
		exit(1);
    }
}

PSFrontEnd::~PSFrontEnd() {
#ifdef __INSURE__
	errf << "Deleting PSFrontEnd object and thus the numbers as well" << endl;
#endif
	delete [] numbers;
	numbers = 0;
	yylexcleanup();
}

float PSFrontEnd::pop() 
{ 
  if (nextFreeNumber > 0) {
  	nextFreeNumber--;
  	return numbers[nextFreeNumber] * backend->getScale(); // the value we just pushed
  } else {
	errf << "Fatal error in PSFrontEnd::pop : nextFreeNumber would get < 0" << endl;
	assert(false);
	//exit(1);
  }
  return 0.0f; // never reached, just to make compiler quiet
}


float PSFrontEnd::popUnScaled() 
{
  if (nextFreeNumber > 0) {
  	nextFreeNumber--;
  	return numbers[nextFreeNumber]; // the value we just pushed
  } else {
	errf << "Fatal error in PSFrontEnd::popUnScaled : nextFreeNumber would get < 0" << endl;
	assert(false); //exit(1);
  }
  return 0.0f; // never reached, just to make compiler quiet
}

void PSFrontEnd::pstack()  const {
	for (unsigned int i = 0 ; i < nextFreeNumber ; i++ ) {
		cerr << "[" << i << "] " << numbers[i] << " " << numbers[i]* backend->getScale() << endl;
	}
}
