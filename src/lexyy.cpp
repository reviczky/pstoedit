
#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 75
#define YY_END_OF_BUFFER 76
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[979] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   76,   60,   60,   60,   60,   60,   60,   60,
        1,   60,   60,   60,   60,   60,   74,   74,   74,    1,
       74,   74,   74,   74,   74,   74,   60,   60,    1,   74,
        6,    4,    6,    1,    5,    5,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   41,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    1,    1,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    1,
        1,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   25,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   72,    0,    0,    0,    0,    0,   66,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       22,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       73,    0,   67,    0,   62,    0,   61,    0,   65,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       57,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    9,    0,    0,    0,   68,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       63,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   47,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   69,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    8,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   16,    0,
        0,    0,    0,    0,    0,    0,   41,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   64,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   58,    0,    0,    0,
        0,    0,    0,    0,    0,   18,    0,    0,    0,    0,
        0,    0,    0,   11,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,   70,
        0,    0,    0,    0,    0,   50,    0,    0,    0,    0,
        0,    0,    0,    0,   24,    0,    0,    0,    0,   40,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   59,    0,    0,    0,   15,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   71,    0,
        0,    0,   52,    0,    0,    0,   49,    0,    0,    0,
        0,   45,    0,    0,    0,   23,    0,    0,   36,   39,
        0,    0,    0,    0,    0,    0,    0,    0,   13,    0,

        0,    0,    0,    0,    0,    0,   20,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   28,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   46,    0,    0,
       51,    0,    0,    0,    0,   39,    0,    0,    0,   33,
        0,   31,    0,    0,    0,   38,    0,    0,    0,   14,
        0,    0,    0,    0,    0,   21,    0,    0,   12,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   56,
        0,    0,    0,    0,    0,    0,    0,    0,   48,    0,
        0,   53,    0,    0,    0,   37,    0,    0,    0,    0,
        0,    0,    0,    0,   19,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    3,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   32,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       27,    0,    0,   29,    0,    0,    0,   54,    0,    0,
        0,   10,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   10,    0,    0,   11,    0,    0,   26,
        0,    0,   10,    0,    0,    0,   43,    0,    0,    0,
        0,    0,    0,    0,   10,    0,    0,    0,    0,    0,

       44,    0,    0,    7,    0,    0,    0,   34,    0,    0,
        0,   42,    0,    0,   17,    0,    0,    0,    0,    0,
        0,    0,   30,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   12,    0,    0,    0,    0,    0,    2,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   10,    0,    0,    0,
        0,   55,    0,    0,    0,    0,   10,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   35,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    1,    1,    1,    5,    1,    1,    6,
        7,    1,    8,    1,    9,   10,    1,   10,   10,   11,
       10,   10,   10,   10,   10,   10,   10,   12,    1,    1,
        1,    1,    1,    1,   13,   14,   15,   16,   17,   18,
       19,   13,   13,   13,   13,   13,   20,   21,   13,   22,
       13,   13,   23,   13,   13,   13,   24,   13,   13,   13,
       25,    1,   26,    1,    1,    1,   27,   28,   29,   30,

       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   13,   43,   44,   45,   46,   47,   48,   49,
       50,   51,   52,    1,   53,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[54] =
    {   0,
        1,    1,    2,    3,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    1,    1,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    1,    1
    } ;

static const flex_int16_t yy_base[996] =
    {   0,
        0,   42,   82,  122,    3,   10, 1668, 1655,   13,   26,
     1651, 1645, 1643,   23, 3284,   34,  164,   27,   35,   51,
      196,   61,   52,   50,   59,   76, 3284, 1633,    7,   91,
       26, 1574, 1579, 1566, 1542, 1533,   80,   15,  108,   64,
     3284, 3284,   87,  126, 3284, 1567,   69,  102,  134,  138,
      140,  145,  151,  152,  169, 3284,  180,  187,  171,  211,
      213,  218,  225,  158,  219,  173,  226,  267,  295,  227,
      235,  233,  237,  239,  243,  245,  244,  254, 1565,  283,
      299,   88, 1521,  160, 1524, 1513, 1500, 1497, 1517,  144,
      146,  276,  256, 1513,  313,  258,  314,  315,  320,  325,

      330,  367,  332,  337,  339,  346,  351,  358,  369,  360,
      390,  397,  402,  275,  379,  388,  341,  412,  395,  414,
      416,  418,  420,  427,  462,  429, 1475, 1466, 1461, 1461,
     1457, 1452, 1454, 1447, 1433, 1453,  408,  433,  195, 1420,
      437,  446,  448,  441,  450,  476,  482,  489,  491,  507,
      512,  546,  517,  522,  527,  529,  534,  552,  554,  564,
      569,  575,  580,  455,  463,  540,  556,  535,  585,  587,
      589,  591,  593,  595,  601,  607,  605,  612,  617,  619,
      623,  624,  633,  265, 1417, 1413, 1407, 1398,  284, 1385,
     1381, 1385, 1405,  611,  629,  167, 1358,  637,  641,  643,

      653,  659,  664,  666,  675,  680,  682,  687,  689,  697,
      703,  708,  715,  717,  722,  727,  737,  744,  746,  752,
      728,  756,  757,  758,  762,  691,  764,  766,  770,  771,
      775,  784,  790,  792,  796,  798,  802,  804,  808,  806,
      375, 3284, 1351, 1326, 1318, 1310,  500, 3284, 1301, 1287,
     1291, 1313,  321,  786,  475, 1275,  819,  820,  827,  832,
      833,  838,  848,  850,  858,  863,  870,  875,  877,  882,
      887,  894,  896,  901,  903,  909,  919,  921,  927,  852,
      865,  925,  931,  933,  938,  939,  940,  946,  952,  954,
      958,  960,  964,  968,  969,  977,  984,  985,  989, 1284,

     1262,  976,  995, 1000, 1012, 1015,  306,  698,   59,  121,
     1266, 1002, 1016, 1022, 1023, 1024, 1032, 1034, 1039, 1045,
     3284, 1071, 1058, 1060, 1073, 1079, 1081, 1090, 1095, 1097,
     1105, 1110, 1118, 1126, 1128, 1133, 1140, 1049, 1119, 1051,
     1134, 1103, 1083, 1141, 1142, 1064, 1155, 1062, 1172, 1146,
     1164, 1165, 1173, 1177, 1178, 1184, 1185, 1245, 1193, 1196,
     3284, 1201, 3284, 1204, 3284, 1208, 3284, 1211, 3284, 1261,
     1234, 1197, 1205,  128,  637,  216, 1240, 1186, 1221, 1227,
     3284, 1239, 1247, 1248, 1253, 1255, 1260, 1262, 1267, 1305,
     1269, 1275, 1277, 1282, 1288, 1295, 1297, 1323, 1317, 1336,

     1343, 1348, 1327, 1329, 1349, 1306, 1350, 1354, 1355, 1360,
     1373, 1382, 3284, 1395, 1361, 1404, 3284, 1410, 1374, 1366,
     1375, 1383, 1384, 1396, 1411, 1417, 1416, 1425, 1234, 1431,
     3284, 1199, 1177,  719, 1187, 1191, 1177, 1152, 1125, 1110,
      397, 1111, 1089,  808,  293, 1063, 1433, 1434, 1443, 3284,
     1449, 1453, 1455, 1460, 1462, 1468, 1473, 1479, 1484, 1491,
     1493, 1500, 1502, 1508, 1519, 1521, 1527, 1532, 1534, 1539,
     1541, 1548, 1512, 1525, 1550, 1554, 1562, 1566, 1578, 3284,
     1584, 1570, 1585, 1586, 1591, 1590, 1592, 1596, 1600, 1601,
     1602, 1609, 3284, 1615, 1636, 1037, 1039, 1616, 1005, 1000,

     1002,  977,  984,  969,  953,  944,  936,  933, 1613,  510,
      924, 1617, 1626, 1651, 1661, 1663, 1668, 1674, 3284, 1698,
     1676, 1681, 1689, 1691, 1700, 1706, 3284, 1744, 1708, 1716,
     1722, 1727, 1736, 1746, 1752, 1762, 1645, 1773, 1779, 1627,
     1766, 1720, 1637, 1753, 1710, 1787, 1788, 1794, 1737, 1800,
     1802, 1804, 1806, 1808, 1810, 1816, 3284,  921, 1824,  505,
      904,  909, 1827,  894,  884,  866,  870,  863,  868,  848,
     1009,  439,  861, 1817, 1831, 1837, 3284, 1850, 1856, 1862,
     1843, 1868, 1870, 1877, 1883, 3284, 1906, 1885, 1895, 1897,
     1911, 1913, 1918, 3284, 1924, 1929, 1931, 1936, 1950, 1952,

     1957, 1889, 1940, 1959, 1963, 1965, 1967, 1973, 1980, 3284,
     1986, 1872, 1992, 1993, 2000, 3284, 2006, 2012, 2013, 2014,
     2020, 2021, 2029, 2035, 3284,  831, 2038,  844, 2041, 3284,
      810,  799,  794,  777,  787,  758,  761, 1226,  782,  743,
     2022, 2049, 3284, 2055, 2060, 2066, 3284, 2098, 2068, 2074,
     2076, 2082, 2089, 2091, 2100, 2105, 2110, 2122, 2128, 2141,
     2133, 2126, 2147, 2149, 2153, 2158, 2154, 2166, 3284, 2172,
     2083, 2178, 3284, 2184, 2197, 2203, 3284, 2210, 2216, 2185,
     2222, 3284, 2229, 2159, 2235, 3284,  745, 2238, 3284,    0,
      698,  703, 2241, 2244,  690,  681, 2247,  711, 3284,  659,

     2204, 2253, 2255, 2260, 2262, 2268, 3284, 2300, 2274, 2276,
     2283, 2285, 2291, 2302, 2308, 2323, 3284, 2332, 2310, 2312,
     2343, 2324, 2344, 2189, 2345, 2349, 2355, 3284, 2363, 2371,
     3284, 2381, 2387, 2393,  659,    0, 2399,  650, 2402, 3284,
     2406, 3284,  630,  616, 2409, 3284,  647, 2293, 2412, 3284,
     2424, 2414, 2426, 2432, 2443, 3284, 2467, 2434, 3284, 2448,
     2450, 2455, 2469, 2474, 2479, 2486, 2491, 2364, 2501, 3284,
     2511, 2436, 2416, 2456, 2495, 2512, 2513, 2520, 3284, 2526,
     2532, 3284, 2538,  624, 2546, 3284,  608,  592,  589,  631,
     2539, 2580, 2549, 2555, 3284, 2623, 2557, 2570, 2572, 2582,

     2588, 2598, 2604, 2606, 2559, 2574, 2561, 2589, 2611, 2599,
     2624,  589,  574,  576, 2646,  575, 2615, 2631, 2650, 2655,
     2662, 2667, 2672, 2674, 2679, 2686, 2692, 2638, 2699, 2703,
     2710, 2633, 2708, 2714,  553,  534,  532, 2720, 3284,  518,
     2723, 2728, 2766, 2730, 2735, 2737, 2747, 2754, 2774, 2785,
     3284, 2791, 2797, 3284, 2805, 2748, 2811, 3284, 2817, 2739,
     2741, 2758, 2767, 2823,  496,  478,  519,  473, 2760, 2825,
     2776, 2830, 2835, 2837, 2843, 2849, 3284, 2856, 2862, 3284,
     2869, 2870, 2841, 2884, 2890, 2899, 3284, 2905,  457, 2876,
      452,  445, 2912, 2918, 2947, 2892, 2920, 2925, 2927, 2935,

     3284, 2954, 2941, 3284, 2966, 2972, 2975, 3284,  435,  416,
     2979, 3284, 2986, 2992, 3284, 3029, 3000, 3002, 3008, 2926,
     2998, 3014, 3284,  413,  378, 3017, 3019, 3035, 2959,  357,
      377, 3041, 3284, 3048, 3053, 3058, 3059,  337, 3284, 3064,
     3071, 3073,  362, 3078, 3083, 2955,  294, 3096, 3101, 3084,
      267, 3103, 3108, 3110,  254, 3117, 3124, 3130,  238, 3135,
     3148, 3284, 3154,  205, 3137,  170, 3159,  163,  163,  103,
       83,   61,   54,    1, 3025, 3091, 3284, 3284, 3203, 3208,
     3213, 3218, 3223, 3228, 3233, 3238, 3243, 3246, 3251, 3253,
     3258, 3263, 3268, 3273, 3278

    } ;

static const flex_int16_t yy_def[996] =
    {   0,
      979,  979,  980,  980,  981,  981,  980,  980,  982,  982,
      983,  983,  978,  984,  978,  984,  985,  986,  984,  984,
      984,  984,  984,  984,  984,  984,  978,  987,  978,  978,
      978,  978,  978,  978,  978,  978,  988,  978,  978,  987,
      978,  978,  978,  978,  978,  978,  984,  984,  984,  984,
      984,  984,  984,  984,  985,  978,  989,  985,  985,  985,
      985,  985,  985,  986,  986,  986,  984,  984,  984,  984,
      984,  984,  984,  984,  984,  984,  984,  984,  987,  978,
      978,  978,  978,  978,  978,  978,  978,  978,  978,  988,
      988,  988,  987,  978,  984,  984,  984,  984,  984,  985,

      989,  989,  989,  989,  989,  989,  989,  985,  985,  985,
      985,  985,  985,  986,  986,  986,  984,  984,  984,  984,
      984,  984,  984,  984,  984,  984,  978,  978,  978,  978,
      978,  978,  978,  978,  978,  978,  988,  988,  987,  978,
      984,  984,  984,  984,  984,  985,  989,  989,  989,  989,
      989,  989,  989,  989,  989,  989,  989,  985,  985,  985,
      985,  985,  985,  986,  986,  986,  986,  986,  984,  984,
      984,  984,  984,  984,  984,  984,  984,  984,  984,  984,
      984,  984,  984,  978,  978,  978,  978,  978,  978,  978,
      978,  978,  978,  988,  988,  987,  978,  984,  984,  984,

      984,  984,  985,  989,  989,  989,  989,  989,  989,  989,
      989,  989,  989,  989,  985,  985,  985,  985,  985,  985,
      986,  986,  986,  986,  986,  984,  984,  984,  984,  984,
      984,  984,  984,  984,  984,  984,  984,  984,  984,  984,
      978,  978,  978,  978,  978,  978,  978,  978,  978,  978,
      978,  978,  988,  988,  987,  978,  984,  984,  984,  984,
      984,  985,  989,  989,  989,  989,  989,  989,  989,  989,
      989,  989,  989,  985,  985,  985,  985,  985,  985,  986,
      986,  986,  986,  986,  984,  984,  984,  984,  984,  984,
      984,  984,  984,  984,  984,  984,  984,  984,  984,  978,

      978,  978,  978,  978,  978,  978,  978,  988,  990,  987,
      978,  984,  984,  984,  984,  984,  985,  989,  989,  989,
      978,  989,  989,  989,  989,  989,  989,  989,  989,  989,
      985,  985,  985,  985,  985,  985,  985,  986,  986,  986,
      986,  986,  984,  984,  984,  984,  984,  984,  984,  984,
      984,  984,  984,  984,  984,  984,  984,  978,  978,  978,
      978,  978,  978,  978,  978,  978,  978,  978,  978,  978,
      978,  988,  978,  990,  990,  987,  978,  984,  984,  984,
      978,  984,  984,  984,  985,  989,  989,  989,  989,  989,
      989,  989,  989,  989,  989,  985,  985,  985,  985,  985,

      985,  985,  986,  986,  986,  986,  986,  984,  984,  984,
      984,  984,  978,  984,  984,  984,  978,  984,  984,  984,
      984,  984,  984,  984,  984,  984,  984,  984,  978,  978,
      978,  978,  978,  988,  978,  978,  978,  978,  978,  978,
      978,  978,  978,  990,  987,  978,  984,  984,  984,  978,
      984,  984,  985,  989,  989,  989,  989,  989,  989,  989,
      989,  989,  989,  985,  985,  985,  985,  985,  985,  985,
      986,  986,  986,  986,  986,  984,  984,  984,  984,  978,
      984,  984,  984,  984,  984,  984,  984,  984,  984,  984,
      984,  984,  978,  984,  978,  978,  978,  988,  978,  978,

      978,  978,  978,  978,  978,  978,  978,  978,  990,  987,
      978,  984,  984,  984,  985,  989,  989,  989,  978,  989,
      989,  989,  989,  989,  989,  989,  978,  989,  989,  985,
      985,  991,  985,  985,  985,  985,  986,  986,  986,  986,
      986,  986,  984,  984,  984,  984,  984,  984,  984,  984,
      984,  984,  984,  984,  984,  978,  978,  978,  978,  990,
      978,  978,  978,  978,  978,  978,  978,  978,  978,  978,
      990,  987,  978,  984,  984,  984,  978,  984,  985,  985,
      989,  989,  989,  989,  989,  978,  989,  989,  989,  989,
      985,  985,  991,  978,  991,  991,  991,  985,  985,  985,

      985,  986,  986,  986,  986,  984,  984,  984,  984,  978,
      984,  984,  984,  984,  984,  978,  984,  984,  984,  984,
      984,  984,  978,  978,  978,  373,  978,  978,  978,  978,
      978,  978,  978,  978,  978,  978,  978,  990,  992,  978,
      984,  984,  978,  984,  989,  989,  978,  989,  989,  989,
      989,  989,  989,  985,  985,  991,  991,  985,  985,  985,
      985,  986,  986,  986,  986,  984,  984,  984,  978,  984,
      984,  984,  978,  984,  984,  984,  978,  984,  984,  984,
      984,  978,  984,  984,  978,  978,  978,  978,  978,  993,
      978,  978,  978,  978,  978,  978,  978,  992,  978,  978,

      984,  989,  989,  989,  989,  989,  978,  989,  989,  994,
      985,  991,  991,  985,  985,  985,  978,  985,  985,  986,
      986,  986,  986,  984,  984,  984,  984,  978,  984,  984,
      978,  984,  984,  984,  978,  993,  978,  978,  978,  978,
      978,  978,  978,  978,  978,  978,  978,  984,  989,  978,
      989,  989,  989,  989,  989,  978,  989,  994,  978,  994,
      994,  985,  991,  991,  985,  985,  985,  986,  986,  978,
      986,  986,  986,  986,  984,  984,  984,  984,  978,  984,
      984,  978,  984,  978,  978,  978,  978,  978,  978,  978,
      984,  989,  989,  989,  978,  989,  994,  994,  985,  991,

      991,  985,  985,  985,  986,  986,  986,  986,  984,  984,
      984,  978,  978,  978,  978,  978,  984,  989,  989,  994,
      994,  985,  991,  991,  985,  985,  985,  986,  986,  986,
      986,  984,  984,  984,  978,  978,  978,  978,  978,  978,
      984,  989,  989,  994,  994,  985,  991,  991,  985,  985,
      978,  985,  985,  978,  985,  986,  986,  978,  986,  986,
      986,  984,  984,  984,  978,  978,  978,  978,  984,  989,
      989,  994,  994,  985,  991,  991,  978,  991,  985,  978,
      985,  986,  986,  986,  984,  984,  978,  984,  978,  978,
      978,  978,  984,  989,  989,  994,  994,  991,  986,  986,

      978,  986,  984,  978,  984,  995,  978,  978,  978,  978,
      984,  978,  984,  989,  978,  989,  994,  994,  991,  986,
      995,  995,  978,  978,  978,  994,  994,  991,  986,  978,
      978,  994,  978,  994,  994,  991,  986,  978,  978,  994,
      991,  986,  978,  994,  991,  986,  978,  994,  991,  986,
      978,  994,  991,  986,  978,  994,  991,  986,  978,  994,
      986,  978,  986,  978,  994,  978,  994,  978,  978,  978,
      978,  978,  978,  978,  978,  978,  978,    0,  978,  978,
      978,  978,  978,  978,  978,  978,  978,  978,  978,  978,
      978,  978,  978,  978,  978

    } ;

static const flex_int16_t yy_nxt[3338] =
    {   0,
      978,  978,   15,   16,   17,   18,   19,   37,   20,   21,
       21,   38,   39,   39,   37,   42,   80,   80,   38,   39,
       39,   43,   44,   44,   80,   80,   48,   22,   42,   49,
       65,  978,   23,   66,   43,   44,   44,   48,   67,   24,
       49,   49,   25,   26,   15,   16,   17,   18,   19,  975,
       20,   21,   21,   48,   48,   48,   49,   49,   49,   50,
       68,   68,   48,   82,   48,   49,   56,   49,   93,   22,
      373,   83,   48,   51,   23,   49,   52,   53,   54,   48,
       73,   24,   49,   89,   25,   26,   28,   70,  974,   74,
       29,   30,   30,  375,   71,   72,   80,   80,   81,   81,

       81,   81,   75,  973,   76,   48,   77,   81,   49,   78,
       31,   91,   32,   33,   92,   81,   81,   81,   81,   34,
       35,   81,  127,   56,   81,   36,   28,  972,  128,  971,
       29,   30,   30,   81,   81,   81,   81,   67,   81,  373,
       49,   95,   81,   48,   49,   53,   49,  978,   48,  978,
       31,   49,   32,   33,   48,   48,   81,   49,   49,   34,
       35,   65,  375,  376,   66,   36,   56,   57,   58,   56,
       59,   56,  100,   56,  109,   59,  116,   59,   92,   66,
      137,   98,   56,  102,   96,   97,  103,   60,  130,   56,
      100,  131,   61,   59,   99,   62,  255,   56,   63,   48,

      108,  970,   49,   69,   69,   69,   69,  969,  104,  968,
      105,  106,   69,   56,  100,   56,  100,   59,   56,   59,
       56,  100,   65,  107,   59,   66,   69,   56,  100,   48,
       48,   59,   49,   49,  196,  966,   48,  110,   48,   49,
       48,   49,   48,   49,  114,   49,   48,   48,   48,   49,
       49,   49,  112,  111,  117,  118,  445,   48,   56,  120,
       49,   48,  115,  113,   49,  119,  241,  242,  241,   53,
       48,  124,  139,   49,   69,   69,   69,   69,  164,  978,
      964,   66,  122,   69,  121,  247,  248,  247,  125,  123,
       81,   81,   81,   81,  126,   56,  959,   69,   48,   81,

      142,   49,   69,   69,   69,   69,   81,   81,   81,   81,
       92,   69,  955,   81,  138,   81,   48,   48,   48,   49,
       49,   49,  951,   48,  978,   69,   49,   56,  100,   81,
      510,   59,   56,  102,   56,  152,  103,  370,  103,   56,
      102,   56,  102,  103,   48,  103,  145,   49,   56,  102,
      371,  141,  103,   56,  102,  308,   53,  103,  143,  144,
       56,  100,   56,  100,   59,  947,   59,  943,  146,   56,
      102,   56,  100,  103,  153,   59,  241,  242,  241,  154,
      155,  156,   65,  939,  147,   66,  148,  169,  158,  938,
      149,   65,   56,  100,   66,  157,   59,  159,   48,   56,

      100,   49,  160,   59,   56,  100,  150,  931,   59,  165,
      151,  978,  146,  114,  166,   48,  167,   48,   49,   48,
       49,   48,   49,   48,   49,  505,   49,  161,  163,  168,
       48,  115,   48,   49,  162,   49,  978,  506,  171,  930,
       48,   56,   92,   49,   48,  194,  138,   49,  170,   48,
      175,   48,   49,   48,   49,  925,   49,  173,   65,  195,
      172,   66,  174,  198,  176,   48,   65,   92,   49,   66,
      201,  639,  199,  924,  200,  910,  183,   56,   56,  100,
      114,  221,   59,  177,   56,  102,  909,  906,  103,  202,
      178,   56,  102,   56,  102,  103,  310,  103,  115,  179,

      180,  247,  248,  247,  181,  182,  203,  222,  204,   56,
      102,  206,   56,  103,   56,  102,  626,  892,  103,   56,
      102,  207,  891,  103,   56,  102,  890,  205,  103,   56,
      102,   56,  102,  103,  889,  103,   56,  102,   65,  375,
      103,   66,  156,   65,  868,  225,   66,  208,   56,  102,
      572,  210,  103,  211,   56,  100,   56,  100,   59,   65,
       59,  867,   66,  147,  212,  148,   56,  100,  866,  149,
       59,   56,  100,  213,  209,   59,  214,   56,  100,  865,
      840,   59,   56,  100,  215,  150,   59,  223,   48,  151,
       48,   49,   48,   49,   48,   49,   48,   49,   48,   49,

      216,   49,  224,  217,  232,  219,  837,   49,   48,  218,
       48,   49,  220,   49,  978,   48,  836,  227,   49,  230,
       48,  229,   48,   49,  226,   49,   48,   48,  835,   49,
       49,  234,  978,  228,  816,  231,   48,  233,  815,   49,
       48,  253,  814,   49,   48,   92,   48,   49,  373,   49,
      235,  236,  813,  237,  812,  238,   48,  239,  790,   49,
      789,  254,   48,   92,  788,   49,   56,  100,   56,  102,
       59,  375,  103,  257,  240,  444,  787,   56,  102,  260,
      258,  103,   56,  102,   56,  102,  103,  259,  103,   56,
      102,   56,  102,  103,  285,  103,  784,   49,  265,   56,

      102,  978,  261,  103,  263,   56,  102,  747,  262,  103,
       56,  102,  264,  699,  103,  744,  266,   56,  102,   56,
      102,  103,  978,  103,   56,  100,  267,  743,   59,   56,
      100,   65,   92,   59,   66,  268,  372,  270,  269,   56,
      100,  738,  737,   59,  272,  271,   56,  100,   56,  100,
       59,  498,   59,   92,   56,  100,  274,  273,   59,   65,
       65,   65,   66,   66,   66,   65,  275,   48,   66,   48,
       49,  276,   49,  288,   48,  280,   49,   49,   48,  735,
      278,   49,  279,  700,  699,  281,  277,   48,  291,  978,
       49,  282,  284,   48,  697,   48,   49,  283,   49,   48,

      696,   48,   49,  286,   49,   48,  287,   48,   49,   48,
       49,   48,   49,  695,   49,  289,  309,  290,  694,  373,
       92,  292,   48,   48,  293,   49,   49,   53,  693,  692,
       48,  297,  299,   49,  509,   48,   48,  295,   49,   49,
       56,  100,  375,  691,   59,  294,  296,  690,  298,  312,
       56,  102,   56,  102,  103,   65,  103,  314,   66,  320,
      321,  322,  687,  313,  103,   56,  102,  317,   65,  103,
      316,   66,   56,  102,  640,  315,  103,   56,  102,   56,
      102,  103,  318,  103,   56,  102,  338,  319,  103,   56,
      102,  339,  637,  103,  636,  323,   56,  102,   56,  102,

      103,  635,  103,   56,  100,   56,  332,   59,  634,   59,
      633,   56,  100,  324,  325,   59,  632,  328,  326,  327,
      329,   56,  100,   56,  100,   59,  631,   59,   65,   56,
      100,   66,  330,   59,  341,  628,   65,   66,  336,   66,
      331,   48,   48,   48,   49,   49,   49,  627,  333,   48,
      346,  623,   49,  334,  340,   48,  573,   48,   49,  335,
       49,   48,  570,   48,   49,  337,   49,   48,  344,  343,
       49,   48,   48,  569,   49,   49,  342,  360,  361,  360,
       48,   53,  345,   49,  348,  347,  568,   48,   48,   53,
       49,   49,   48,  567,  351,   49,  362,  363,  362,  353,

      350,  364,  365,  364,  352,   48,  566,  354,   49,  349,
      565,  564,  355,  366,  367,  366,  368,  369,  368,   48,
      373,  357,   49,  380,  381,  382,   48,   48,   49,   49,
       49,  563,  356,  378,   56,  100,   56,  102,   59,  638,
      103,   56,  102,  375,  562,  103,  320,  321,  322,  561,
      384,  103,   65,  379,   65,   66,  383,   66,  385,  387,
       56,  102,   56,  102,  103,  415,  103,   48,   49,  559,
       49,  386,  320,  321,  322,   56,  390,  103,  403,  103,
      558,   56,  102,   56,  102,  103,   48,  103,  147,   49,
      148,  388,   56,  102,  149,  405,  103,   56,  102,   56,

      102,  103,  511,  103,  389,  391,   65,   56,  100,   66,
      150,   59,   56,  100,  151,  411,   59,  408,  392,  393,
       56,  100,   65,  508,   59,   66,  396,  395,   56,  100,
       56,  100,   59,  407,   59,   56,  100,   65,  394,   59,
       66,  397,   56,  100,   48,   48,   59,   49,   49,   48,
      398,  507,   49,  146,  400,  504,  412,  413,  414,  114,
      401,   49,  404,  503,  399,  406,  402,   48,   48,  409,
       49,   49,  410,  416,  417,  418,   48,  115,   49,   49,
       48,   48,  502,   49,   49,  419,  420,   48,   48,   48,
       49,   49,   49,  421,  430,  431,  430,  360,  361,  360,

      978,  422,  362,  363,  362,  364,  365,  364,  423,  366,
      367,  366,  368,  369,  368,  428,  501,  500,  426,  425,
      424,  499,  497,  434,   48,  427,  447,   49,  380,  381,
      382,   92,  435,   49,  436,  437,  496,  373,  438,  439,
      380,  381,  382,  440,  441,   49,  442,  448,  449,  450,
      451,   48,  443,   49,   49,   56,  100,   56,  102,   59,
      375,  103,   56,  102,   56,  102,  103,  495,  103,   56,
      102,   56,  102,  103,  446,  103,  433,   56,  102,   56,
      102,  103,   53,  103,   56,  102,  455,  432,  103,  429,
       56,  102,  452,  457,  103,  377,  453,   56,  100,   56,

      100,   59,  359,   59,  454,  460,  456,   56,  102,   65,
      358,  103,   66,  459,  311,  462,  307,  463,  461,   56,
      100,  306,  147,   59,  148,   56,  100,  305,  149,   59,
       65,  465,   65,   66,  466,   66,  458,  464,   56,  100,
      474,  304,   59,  467,  150,   56,  100,  303,  151,   59,
       56,  100,   65,   65,   59,   66,   66,   48,   48,  302,
       49,   49,  472,  478,   48,  482,   49,   49,  468,   48,
      301,  471,   49,  469,  479,  480,  481,   48,   48,   49,
       49,   49,  473,  412,  413,  414,   48,   48,   49,   49,
       49,  470,  300,  476,  475,  477,  412,  413,  414,   48,

      484,   49,   49,  256,   53,  416,  417,  418,  252,  486,
       49,  416,  417,  418,   48,  485,   49,   49,  483,   48,
       48,  251,   49,   49,  487,  250,  492,  493,  494,  249,
      488,   49,  430,  431,  430,  246,   48,   48,   53,   49,
       49,  245,  491,  244,  449,  450,  451,  243,  489,   49,
      449,  450,  451,   53,  490,   49,   48,   56,  100,   49,
      197,   59,   56,  102,   56,  102,  103,  193,  103,  518,
      519,  520,  512,  192,  103,   56,  102,  191,  513,  103,
      516,   56,  102,  514,  190,  103,   56,  102,  515,  189,
      103,  188,   53,   56,  102,   56,  102,  103,  187,  103,

      517,  526,  527,  528,   56,  102,  103,  186,  103,  185,
       56,  100,  521,  522,   59,   65,  184,  523,   66,  525,
      524,   56,  100,   56,  532,   59,  140,   59,   65,   56,
      100,   66,  136,   59,   56,  100,   56,  100,   59,  135,
       59,   56,  100,  529,   65,   59,  134,   66,  530,  538,
      450,  539,  133,   65,   66,  540,   66,   48,  531,  533,
       49,  132,  534,  129,  541,   48,  535,   56,   49,   48,
      545,   94,   49,   48,  537,  536,   49,   88,  542,  479,
      480,  481,   87,  543,   49,  479,  480,  481,  547,   48,
       49,   49,   49,   48,   48,   48,   49,   49,   49,   48,

       86,  544,   49,   48,   48,   48,   49,   49,   49,   53,
      492,  493,  494,   85,   84,   49,  492,  493,  494,  978,
       48,   49,  546,   49,  373,  552,  551,   53,  549,   48,
       65,  550,   49,   66,  553,   56,  548,  556,  557,  556,
       48,  554,  978,   49,  555,  571,  560,  375,   65,   46,
       92,   66,  576,  577,  578,   46,  575,   49,   53,   40,
      603,  574,  579,  527,  580,   56,  102,   59,  606,  103,
       56,  102,   40,  978,  103,  518,  519,  520,   56,  102,
      103,  978,  103,   56,  102,  978,  978,  103,  602,  581,
      585,  586,  587,   56,  102,  103,  978,  103,  582,  518,

      519,  520,   56,  102,  103,  583,  103,  526,  527,  528,
       56,  102,  103,   48,  103,  147,   49,  148,   56,  100,
      584,  149,   59,   65,   56,  100,   66,  978,   59,  594,
      595,  978,  588,  596,  590,  978,  978,  150,   56,  100,
       48,  151,   59,   49,  589,  526,  527,  528,   56,  100,
      103,  592,   59,  591,   56,  100,   48,  599,   59,   49,
      605,  147,  608,  148,   56,  100,  598,  149,   59,   65,
      597,  978,   66,  601,  538,  450,  539,  614,  978,   66,
      538,  450,  539,  150,  978,   66,  600,  151,  609,  610,
      611,   48,  978,   49,   49,  604,  607,   48,  978,  978,

       49,  615,  616,  617,  114,   48,   49,   48,   49,   48,
       49,   48,   49,   48,   49,  978,   49,  556,  557,  556,
      641,  978,  115,   49,  613,  624,  625,  624,  629,  630,
      629,  612,  642,  643,  644,  978,  622,   49,  576,  577,
      578,  618,  978,   49,  620,   56,  102,  978,  619,  103,
      621,  576,  577,  578,  978,  978,   49,  579,  527,  580,
      978,  978,   59,  579,  527,  580,  978,  978,   59,  646,
      647,  648,   56,  102,  103,   48,  103,  978,   49,   56,
      102,  645,  978,  103,  585,  586,  587,   56,  102,  103,
      978,  103,   65,   53,  978,   66,  649,   56,  102,   56,

      102,  103,  671,  103,  978,  146,  650,  585,  586,  587,
      978,  651,  103,   56,  100,   56,  100,   59,  978,   59,
      594,  595,  662,  147,  596,  148,  594,  595,  652,  149,
      596,  594,  656,  594,  595,  596,  978,  596,   56,  100,
      978,  653,   59,   65,  655,  150,   66,  658,  978,  151,
      978,  654,   56,  100,   56,  100,   59,  978,   59,   56,
      100,  657,   65,   59,  978,   66,   65,  597,   48,   66,
       48,   49,  978,   49,  668,  669,  670,  659,  978,   49,
      663,  609,  610,  611,  661,  978,   49,  609,  610,  611,
      664,  660,   49,  672,  673,  674,   48,  978,   49,   49,

      665,  615,  616,  617,  978,  666,   49,  615,  616,  617,
      978,  667,   49,  676,  677,  678,   48,   48,   49,   49,
       49,  681,  682,  683,   48,   48,   49,   49,   49,   53,
      685,  686,  685,  978,  978,  675,  624,  625,  624,  688,
      689,  688,  629,  630,  629,  978,  679,  978,  680,   53,
      642,  643,  644,  978,  978,   49,  642,  643,  644,  684,
      978,   49,   56,  102,  978,  701,  103,  646,  647,  648,
       56,  102,  103,  978,  103,  978,   56,  102,   56,  102,
      103,  978,  103,  706,  707,  708,   48,  978,  103,   49,
      702,   56,  102,   56,  100,  103,  978,   59,   53,  646,

      647,  648,   56,  100,  103,  704,   59,  594,  595,  978,
      703,  596,  594,  595,  978,  147,  596,  148,  978,  978,
      705,  149,  709,  710,   56,  100,  978,  726,   59,   65,
       56,  100,   66,  712,   59,   56,  100,  150,  978,   59,
      711,  151,  716,  717,  718,  978,  978,   59,  597,  714,
       65,  978,   65,   66,  713,   66,   65,   48,  715,   66,
       49,   48,   48,  719,   49,   49,  720,  668,  669,  670,
      978,  978,   49,  668,  669,  670,  978,  978,   49,  672,
      673,  674,  978,  978,   49,  672,  673,  674,   48,  722,
       49,   49,   48,  723,  721,   49,  725,  724,  727,  728,

      729,  978,  734,   49,  676,  677,  678,   48,  978,   49,
       49,  676,  677,  678,  978,   53,   49,  730,  731,  732,
      978,  978,   49,  681,  682,  683,  978,   53,   49,  733,
      681,  682,  683,  775,  748,   49,  685,  686,  685,  688,
      689,  688,  739,  740,  739,  741,  742,  741,  745,  746,
      745,  978,  978,   53,  749,  750,  751,   56,  102,  103,
      978,  103,   56,  102,   56,  102,  103,  978,  103,  706,
      707,  708,   53,  978,  103,  755,  756,  757,  759,  760,
      103,  978,  761,  978,  752,   56,  100,  594,  595,   59,
      978,  596,  978,  594,  595,  754,   48,  596,  978,   49,

      753,  706,  707,  708,   56,  100,  103,  978,   59,  978,
       56,  100,   56,  100,   59,   65,   59,  147,   66,  148,
      764,  978,  762,  149,  716,  717,  718,   65,  978,   59,
       66,  763,  765,  716,  717,  718,  978,  791,   59,  150,
      766,  978,  767,  151,  769,  770,  771,   65,   48,   66,
       66,   49,   48,  978,  978,   49,  727,  728,  729,  768,
      978,   49,  978,  773,  727,  728,  729,   65,  978,   49,
       66,  776,  730,  731,  732,  146,  772,   49,  201,  978,
      777,  978,  730,  731,  732,  978,  774,   49,  778,  779,
      780,  978,  978,   49,  781,  782,  783,  805,  978,   49,

      785,  786,  785,  739,  740,  739,   53,  741,  742,  741,
      745,  746,  745,  749,  750,  751,   56,  792,  103,   65,
      103,  978,   66,  978,   53,  749,  750,  751,   56,  102,
      103,  978,  103,  794,  795,  796,  759,  760,  103,   65,
      761,  147,   66,  148,  755,  756,  757,  149,  978,  103,
      759,  760,  759,  798,  761,  978,  761,   56,  100,   65,
      807,   59,   66,  150,  978,  793,  806,  151,  755,  756,
      757,  594,  595,  103,  978,  596,  594,  595,  978,  978,
      596,   56,  100,  978,  147,   59,  148,  978,   56,  100,
      149,  797,   59,   56,  100,  808,  978,   59,  809,  799,

      801,   49,  769,  770,  771,  978,  150,   66,  800,  978,
      151,  802,  769,  770,  771,   48,   48,   66,   49,   49,
      803,  778,  779,  780,  978,  804,   49,  778,  779,  780,
      978,  978,   49,  781,  782,  783,  114,  978,   49,  781,
      782,  783,   48,  978,   49,   49,  810,  785,  786,  785,
      978,   56,  102,  811,  115,  103,  794,  795,  796,  759,
      760,  103,   65,  761,  830,   66,  978,   66,  201,   53,
      817,  978,  759,  760,   56,  822,  761,   65,   59,  978,
       66,   53,   56,  102,  594,  823,  103,  820,  596,  828,
      594,  595,   65,  819,  596,   66,  978,  147,  821,  148,

       56,  100,   48,  149,   59,   49,   56,  100,   56,  100,
       59,  818,   59,  797,   48,  831,  978,   49,   48,  150,
      978,   49,  829,  151,  794,  795,  796,   48,  978,  103,
       49,  824,  825,   56,  102,  832,  862,  103,  833,   49,
      147,   65,  148,  826,   66,  827,  149,  838,  839,  838,
      978,  978,   56,  843,   53,  841,  103,  759,  760,  978,
      978,  761,  150,  834,  759,  760,  151,  978,  761,   56,
      100,  842,  978,   59,  594,  595,  594,  595,  596,  978,
      596,   56,  100,  978,  978,   59,  856,  850,  851,  852,
      978,  846,   59,  853,  854,  855,  978,  978,   59,  844,

      857,  858,  859,  847,  978,   66,   65,  848,  845,   66,
      146,   48,  978,   65,   49,  597,   66,   48,  849,  978,
       49,  838,  839,  838,  978,  978,   48,  860,  114,   49,
       56,  102,  759,  760,  103,  978,  761,  759,  760,   56,
      874,  761,  883,   59,   65,   66,  115,   66,  861,  594,
      595,   65,  863,  596,   66,  876,  877,  878,  864,  872,
      596,   48,  869,   48,   49,  978,   49,  870,   56,  102,
       48,  884,  103,   49,  873,  879,  880,  881,   56,  895,
       59,  875,  103,  147,  978,  148,  850,  851,  852,  149,
      871,   59,  850,  851,  852,  882,  978,   59,  853,  854,

      855,   53,  978,   59,  893,  150,  853,  854,  855,  151,
      885,   59,  857,  858,  859,  978,  978,   66,  857,  858,
      859,  978,  978,   66,  886,  887,  888,   56,  102,   49,
      978,  103,  759,  760,  146,  978,  761,  759,  897,   56,
      100,  761,  114,   59,   65,  594,  595,   66,  146,  596,
      876,  877,  878,  978,  978,  596,  896,  876,  877,  878,
      115,  978,  596,  879,  880,  881,  114,  978,   59,  894,
      879,  880,  881,   65,  978,   59,   66,  907,  908,  907,
      146,  978,  898,  978,  115,  900,  901,  902,  978,  978,
       66,  903,  904,  905,  759,  760,   49,  978,  761,  597,

      886,  887,  888,  978,  899,   49,  886,  887,  888,  978,
      978,   49,  146,  911,  912,  913,  978,  978,   49,  914,
      915,  916,  759,  760,  103,  978,  761,  594,  595,   65,
       65,  596,   66,   66,  978,  917,  900,  901,  902,  978,
      978,   66,  903,  904,  905,  978,  978,   49,   53,   56,
      102,  918,  978,  103,  919,  900,  901,  902,   65,  929,
       66,   66,   65,  797,  147,   66,  148,  903,  904,  905,
      149,  920,   49,  922,  923,  922,  907,  908,  907,  114,
      911,  912,  913,  978,  978,   49,  150,  911,  912,  913,
      151,  937,   49,  914,  915,  916,  950,  115,  103,  922,

      923,  922,  759,  760,  759,  760,  761,  978,  761,   53,
      594,  595,  978,  978,  596,  922,  923,  922,  932,  933,
      934,  759,  760,  761,  978,  761,  976,  977,  976,   53,
      914,  915,  916,  926,  978,  103,  927,  594,  595,  928,
      978,  596,  932,  933,  934,  978,  147,  761,  148,  932,
      933,  934,  149,  978,  761,  759,  760,  978,  935,  761,
      594,  595,   65,  978,  596,   66,  759,  760,  150,  978,
      761,  978,  151,  594,  595,  936,   65,  596,  978,   66,
      759,  760,  940,  978,  761,  594,  949,   65,  978,  596,
       66,  797,  976,  977,  976,  944,  942,  941,  759,  760,

      978,  978,  761,  594,  595,  759,  760,  596,  978,  761,
      594,  957,  978,   65,  596,  945,   66,  954,  948,  759,
      960,  978,  946,  761,  978,  953,  594,  595,  978,  978,
      596,  961,  962,  963,  978,  952,   66,  759,  760,  759,
      967,  761,  978,  761,  597,  978,  978,  956,  978,  961,
      962,  963,  978,  958,   66,  961,  962,  963,  978,  965,
       66,  759,  760,  978,  978,  761,  978,  597,  978,  978,
      978,  978,  978,  978,  978,  978,  978,  978,  797,  114,
      978,  978,  978,  978,  978,  978,  978,  978,  978,  978,
      978,  978,  978,  978,  978,  978,  978,  115,  978,  978,

      978,  978,  797,   14,   14,   14,   14,   14,   27,   27,
       27,   27,   27,   15,   15,   15,   15,   15,   41,   41,
       41,   41,   41,   45,   45,   45,   45,   45,   47,  978,
       47,   47,   47,   55,   55,   55,   55,   55,   64,  978,
       64,   64,   64,   79,   79,   79,   79,   79,   90,  978,
       90,  101,  101,  101,  101,  101,  374,  374,  593,  593,
      593,  593,  593,  698,  698,  698,  698,  698,  736,  978,
      736,  736,  736,  758,  758,  758,  758,  758,  921,  921,
      921,  921,  921,   13,  978,  978,  978,  978,  978,  978,
      978,  978,  978,  978,  978,  978,  978,  978,  978,  978,

      978,  978,  978,  978,  978,  978,  978,  978,  978,  978,
      978,  978,  978,  978,  978,  978,  978,  978,  978,  978,
      978,  978,  978,  978,  978,  978,  978,  978,  978,  978,
      978,  978,  978,  978,  978,  978,  978
    } ;

static const flex_int16_t yy_chk[3338] =
    {   0,
        0,    0,    1,    1,    1,    1,    1,    5,    1,    1,
        1,    5,    5,    5,    6,    9,   29,   29,    6,    6,
        6,    9,    9,    9,   38,   38,   14,    1,   10,   14,
       18,    0,    1,   18,   10,   10,   10,   16,   19,    1,
       16,   19,    1,    1,    2,    2,    2,    2,    2,  974,
        2,    2,    2,   24,   20,   23,   24,   20,   23,   16,
       20,   20,   25,   31,   22,   25,   40,   22,   40,    2,
      309,   31,   47,   16,    2,   47,   16,   16,   16,   26,
       24,    2,   26,   37,    2,    2,    3,   22,  973,   25,
        3,    3,    3,  309,   23,   23,   43,   43,   30,   30,

       30,   30,   26,  972,   26,   48,   26,   30,   48,   26,
        3,   37,    3,    3,   37,   39,   39,   39,   39,    3,
        3,   30,   82,  310,   39,    3,    4,  971,   82,  970,
        4,    4,    4,   44,   44,   44,   44,   49,   39,  374,
       49,   50,   44,   51,   50,   48,   51,   90,   52,   91,
        4,   52,    4,    4,   53,   54,   44,   53,   54,    4,
        4,   64,  374,  310,   64,    4,   17,   17,   17,  196,
       17,   55,   55,   59,   59,   55,   66,   59,   90,   66,
       91,   53,   57,   57,   51,   52,   57,   17,   84,   58,
       58,   84,   17,   58,   54,   17,  196,  139,   17,   21,

       58,  969,   21,   21,   21,   21,   21,  968,   57,  966,
       57,   57,   21,   60,   60,   61,   61,   60,  376,   61,
       62,   62,   65,   57,   62,   65,   21,   63,   63,   67,
       70,   63,   67,   70,  139,  964,   72,   60,   71,   72,
       73,   71,   74,   73,   65,   74,   75,   77,   76,   75,
       77,   76,   62,   61,   67,   70,  376,   78,   93,   72,
       78,   96,   65,   63,   96,   71,  184,  184,  184,   67,
       68,   76,   93,   68,   68,   68,   68,   68,  114,   92,
      959,  114,   74,   68,   73,  189,  189,  189,   77,   75,
       80,   80,   80,   80,   78,  445,  955,   68,   69,   80,

       96,   69,   69,   69,   69,   69,   81,   81,   81,   81,
       92,   69,  951,   80,   92,   81,   95,   97,   98,   95,
       97,   98,  947,   99,  253,   69,   99,  100,  100,   81,
      445,  100,  101,  101,  103,  103,  101,  307,  103,  104,
      104,  105,  105,  104,  117,  105,   99,  117,  106,  106,
      307,   95,  106,  107,  107,  253,   95,  107,   97,   98,
      108,  108,  110,  110,  108,  943,  110,  938,  100,  102,
      102,  109,  109,  102,  104,  109,  241,  241,  241,  105,
      106,  107,  115,  931,  102,  115,  102,  117,  108,  930,
      102,  116,  111,  111,  116,  107,  111,  109,  119,  112,

      112,  119,  110,  112,  113,  113,  102,  925,  113,  115,
      102,  137,  109,  116,  116,  118,  116,  120,  118,  121,
      120,  122,  121,  123,  122,  441,  123,  111,  113,  116,
      124,  116,  126,  124,  112,  126,  138,  441,  119,  924,
      141,  572,  137,  141,  144,  137,  137,  144,  118,  142,
      123,  143,  142,  145,  143,  910,  145,  121,  164,  138,
      120,  164,  122,  141,  124,  125,  165,  138,  125,  165,
      144,  572,  142,  909,  143,  892,  126,  255,  146,  146,
      164,  164,  146,  125,  147,  147,  891,  889,  147,  145,
      125,  148,  148,  149,  149,  148,  255,  149,  164,  125,

      125,  247,  247,  247,  125,  125,  146,  165,  147,  150,
      150,  148,  510,  150,  151,  151,  560,  868,  151,  153,
      153,  149,  867,  153,  154,  154,  866,  147,  154,  155,
      155,  156,  156,  155,  865,  156,  157,  157,  168,  560,
      157,  168,  151,  166,  840,  168,  166,  150,  152,  152,
      510,  153,  152,  154,  158,  158,  159,  159,  158,  167,
      159,  837,  167,  152,  155,  152,  160,  160,  836,  152,
      160,  161,  161,  156,  152,  161,  157,  162,  162,  835,
      816,  162,  163,  163,  158,  152,  163,  166,  169,  152,
      170,  169,  171,  170,  172,  171,  173,  172,  174,  173,

      159,  174,  167,  160,  175,  162,  814,  175,  177,  161,
      176,  177,  163,  176,  194,  178,  813,  170,  178,  173,
      179,  172,  180,  179,  169,  180,  181,  182,  812,  181,
      182,  177,  195,  171,  790,  174,  183,  176,  789,  183,
      198,  194,  788,  198,  199,  194,  200,  199,  375,  200,
      178,  179,  787,  180,  784,  181,  201,  182,  747,  201,
      744,  195,  202,  195,  743,  202,  203,  203,  204,  204,
      203,  375,  204,  198,  183,  375,  738,  205,  205,  201,
      199,  205,  206,  206,  207,  207,  206,  200,  207,  208,
      208,  209,  209,  208,  226,  209,  735,  226,  206,  210,

      210,  308,  202,  210,  204,  211,  211,  700,  203,  211,
      212,  212,  205,  698,  212,  696,  207,  213,  213,  214,
      214,  213,  434,  214,  215,  215,  208,  695,  215,  216,
      216,  221,  308,  216,  221,  209,  308,  211,  210,  217,
      217,  692,  691,  217,  213,  212,  218,  218,  219,  219,
      218,  434,  219,  434,  220,  220,  215,  214,  220,  222,
      223,  224,  222,  223,  224,  225,  216,  227,  225,  228,
      227,  217,  228,  229,  230,  221,  229,  230,  231,  687,
      219,  231,  220,  640,  639,  222,  218,  232,  232,  254,
      232,  223,  225,  233,  637,  234,  233,  224,  234,  235,

      636,  236,  235,  227,  236,  237,  228,  238,  237,  240,
      238,  239,  240,  635,  239,  230,  254,  231,  634,  444,
      254,  233,  257,  258,  234,  257,  258,  232,  633,  632,
      259,  238,  240,  259,  444,  260,  261,  236,  260,  261,
      262,  262,  444,  631,  262,  235,  237,  628,  239,  257,
      263,  263,  264,  264,  263,  280,  264,  259,  280,  265,
      265,  265,  626,  258,  265,  266,  266,  262,  281,  266,
      261,  281,  267,  267,  573,  260,  267,  268,  268,  269,
      269,  268,  263,  269,  270,  270,  280,  264,  270,  271,
      271,  281,  570,  271,  569,  266,  272,  272,  273,  273,

      272,  568,  273,  274,  274,  275,  275,  274,  567,  275,
      566,  276,  276,  267,  268,  276,  565,  271,  269,  270,
      272,  277,  277,  278,  278,  277,  564,  278,  282,  279,
      279,  282,  273,  279,  283,  562,  284,  283,  279,  284,
      274,  285,  286,  287,  285,  286,  287,  561,  276,  288,
      288,  558,  288,  277,  282,  289,  511,  290,  289,  278,
      290,  291,  508,  292,  291,  279,  292,  293,  286,  285,
      293,  294,  295,  507,  294,  295,  284,  302,  302,  302,
      296,  285,  287,  296,  290,  289,  506,  297,  298,  288,
      297,  298,  299,  505,  293,  299,  303,  303,  303,  295,

      292,  304,  304,  304,  294,  312,  504,  296,  312,  291,
      503,  502,  297,  305,  305,  305,  306,  306,  306,  313,
      571,  299,  313,  314,  314,  314,  315,  316,  314,  315,
      316,  501,  298,  312,  317,  317,  318,  318,  317,  571,
      318,  319,  319,  571,  500,  319,  320,  320,  320,  499,
      316,  320,  338,  313,  340,  338,  315,  340,  317,  319,
      323,  323,  324,  324,  323,  348,  324,  346,  348,  497,
      346,  318,  322,  322,  322,  325,  325,  322,  338,  325,
      496,  326,  326,  327,  327,  326,  343,  327,  322,  343,
      322,  323,  328,  328,  322,  340,  328,  329,  329,  330,

      330,  329,  446,  330,  324,  326,  342,  331,  331,  342,
      322,  331,  332,  332,  322,  346,  332,  343,  327,  328,
      333,  333,  339,  443,  333,  339,  331,  330,  334,  334,
      335,  335,  334,  342,  335,  336,  336,  341,  329,  336,
      341,  332,  337,  337,  344,  345,  337,  344,  345,  350,
      333,  442,  350,  332,  335,  440,  347,  347,  347,  341,
      336,  347,  339,  439,  334,  341,  337,  351,  352,  344,
      351,  352,  345,  349,  349,  349,  353,  341,  349,  353,
      354,  355,  438,  354,  355,  350,  351,  356,  357,  378,
      356,  357,  378,  352,  359,  359,  359,  360,  360,  360,

      372,  353,  362,  362,  362,  364,  364,  364,  353,  366,
      366,  366,  368,  368,  368,  357,  437,  436,  355,  354,
      353,  435,  433,  372,  379,  356,  378,  379,  380,  380,
      380,  372,  373,  380,  373,  373,  432,  638,  373,  373,
      382,  382,  382,  373,  373,  382,  373,  379,  383,  383,
      383,  384,  373,  383,  384,  385,  385,  386,  386,  385,
      638,  386,  387,  387,  388,  388,  387,  429,  388,  389,
      389,  391,  391,  389,  377,  391,  371,  392,  392,  393,
      393,  392,  382,  393,  394,  394,  387,  370,  394,  358,
      395,  395,  384,  389,  395,  311,  385,  396,  396,  397,

      397,  396,  301,  397,  386,  392,  388,  390,  390,  406,
      300,  390,  406,  391,  256,  394,  252,  395,  393,  399,
      399,  251,  390,  399,  390,  398,  398,  250,  390,  398,
      403,  397,  404,  403,  398,  404,  390,  396,  400,  400,
      406,  249,  400,  399,  390,  401,  401,  246,  390,  401,
      402,  402,  405,  407,  402,  405,  407,  408,  409,  245,
      408,  409,  404,  410,  415,  415,  410,  415,  400,  420,
      244,  403,  420,  401,  411,  411,  411,  419,  421,  411,
      419,  421,  405,  412,  412,  412,  422,  423,  412,  422,
      423,  402,  243,  408,  407,  409,  414,  414,  414,  424,

      420,  414,  424,  197,  415,  416,  416,  416,  193,  422,
      416,  418,  418,  418,  425,  421,  418,  425,  419,  427,
      426,  192,  427,  426,  423,  191,  428,  428,  428,  190,
      424,  428,  430,  430,  430,  188,  447,  448,  414,  447,
      448,  187,  427,  186,  449,  449,  449,  185,  425,  449,
      451,  451,  451,  418,  426,  451,  452,  453,  453,  452,
      140,  453,  454,  454,  455,  455,  454,  136,  455,  456,
      456,  456,  447,  135,  456,  457,  457,  134,  448,  457,
      454,  458,  458,  452,  133,  458,  459,  459,  453,  132,
      459,  131,  451,  460,  460,  461,  461,  460,  130,  461,

      455,  462,  462,  462,  463,  463,  462,  129,  463,  128,
      464,  464,  457,  458,  464,  473,  127,  459,  473,  461,
      460,  465,  465,  466,  466,  465,   94,  466,  474,  467,
      467,  474,   89,  467,  468,  468,  469,  469,  468,   88,
      469,  470,  470,  463,  471,  470,   87,  471,  464,  472,
      472,  472,   86,  475,  472,  473,  475,  476,  465,  467,
      476,   85,  468,   83,  474,  477,  469,   79,  477,  478,
      478,   46,  478,  482,  471,  470,  482,   36,  475,  479,
      479,  479,   35,  476,  479,  481,  481,  481,  483,  484,
      481,  483,  484,  486,  485,  487,  486,  485,  487,  488,

       34,  477,  488,  489,  490,  491,  489,  490,  491,  478,
      492,  492,  492,   33,   32,  492,  494,  494,  494,  498,
      512,  494,  482,  512,  509,  488,  487,  481,  485,  513,
      540,  486,  513,  540,  489,   28,  484,  495,  495,  495,
      543,  490,   13,  543,  491,  509,  498,  509,  537,   12,
      498,  537,  514,  514,  514,   11,  513,  514,  494,    8,
      540,  512,  515,  515,  515,  516,  516,  515,  543,  516,
      517,  517,    7,    0,  517,  518,  518,  518,  521,  521,
      518,    0,  521,  522,  522,    0,    0,  522,  537,  516,
      523,  523,  523,  524,  524,  523,    0,  524,  517,  520,

      520,  520,  525,  525,  520,  521,  525,  526,  526,  526,
      529,  529,  526,  545,  529,  520,  545,  520,  530,  530,
      522,  520,  530,  542,  531,  531,  542,    0,  531,  532,
      532,    0,  524,  532,  529,    0,    0,  520,  533,  533,
      549,  520,  533,  549,  525,  528,  528,  528,  534,  534,
      528,  531,  534,  530,  535,  535,  544,  534,  535,  544,
      542,  528,  545,  528,  536,  536,  533,  528,  536,  541,
      532,    0,  541,  536,  538,  538,  538,  549,    0,  538,
      539,  539,  539,  528,    0,  539,  535,  528,  546,  546,
      546,  547,    0,  546,  547,  541,  544,  548,    0,    0,

      548,  550,  550,  550,  539,  551,  550,  552,  551,  553,
      552,  554,  553,  555,  554,    0,  555,  556,  556,  556,
      574,    0,  539,  574,  548,  559,  559,  559,  563,  563,
      563,  547,  575,  575,  575,    0,  555,  575,  576,  576,
      576,  551,    0,  576,  553,  581,  581,    0,  552,  581,
      554,  578,  578,  578,    0,    0,  578,  579,  579,  579,
        0,    0,  579,  580,  580,  580,    0,    0,  580,  582,
      582,  582,  583,  583,  582,  612,  583,    0,  612,  584,
      584,  581,    0,  584,  585,  585,  585,  588,  588,  585,
        0,  588,  602,  578,    0,  602,  583,  589,  589,  590,

      590,  589,  612,  590,    0,  580,  584,  587,  587,  587,
        0,  588,  587,  591,  591,  592,  592,  591,    0,  592,
      593,  593,  602,  587,  593,  587,  595,  595,  589,  587,
      595,  596,  596,  597,  597,  596,    0,  597,  598,  598,
        0,  590,  598,  603,  592,  587,  603,  598,    0,  587,
        0,  591,  599,  599,  600,  600,  599,    0,  600,  601,
      601,  597,  604,  601,    0,  604,  605,  595,  606,  605,
      607,  606,    0,  607,  608,  608,  608,  599,    0,  608,
      603,  609,  609,  609,  601,    0,  609,  611,  611,  611,
      604,  600,  611,  613,  613,  613,  614,    0,  613,  614,

      605,  615,  615,  615,    0,  606,  615,  617,  617,  617,
        0,  607,  617,  618,  618,  618,  619,  620,  618,  619,
      620,  621,  621,  621,  622,  641,  621,  622,  641,  611,
      623,  623,  623,    0,    0,  614,  624,  624,  624,  627,
      627,  627,  629,  629,  629,    0,  619,    0,  620,  617,
      642,  642,  642,    0,    0,  642,  644,  644,  644,  622,
        0,  644,  645,  645,    0,  641,  645,  646,  646,  646,
      649,  649,  646,    0,  649,    0,  650,  650,  651,  651,
      650,    0,  651,  652,  652,  652,  671,    0,  652,  671,
      645,  653,  653,  654,  654,  653,    0,  654,  644,  648,

      648,  648,  655,  655,  648,  650,  655,  656,  656,    0,
      649,  656,  657,  657,    0,  648,  657,  648,    0,    0,
      651,  648,  653,  654,  658,  658,    0,  671,  658,  662,
      659,  659,  662,  656,  659,  661,  661,  648,    0,  661,
      655,  648,  660,  660,  660,    0,    0,  660,  656,  658,
      663,    0,  664,  663,  657,  664,  665,  667,  659,  665,
      667,  666,  684,  661,  666,  684,  662,  668,  668,  668,
        0,    0,  668,  670,  670,  670,    0,    0,  670,  672,
      672,  672,    0,    0,  672,  674,  674,  674,  680,  664,
      674,  680,  724,  665,  663,  724,  667,  666,  675,  675,

      675,    0,  684,  675,  676,  676,  676,  701,    0,  676,
      701,  678,  678,  678,    0,  670,  678,  679,  679,  679,
        0,    0,  679,  681,  681,  681,    0,  674,  681,  680,
      683,  683,  683,  724,  701,  683,  685,  685,  685,  688,
      688,  688,  693,  693,  693,  694,  694,  694,  697,  697,
      697,    0,    0,  678,  702,  702,  702,  703,  703,  702,
        0,  703,  704,  704,  705,  705,  704,    0,  705,  706,
      706,  706,  683,    0,  706,  709,  709,  709,  710,  710,
      709,    0,  710,    0,  703,  711,  711,  712,  712,  711,
        0,  712,    0,  713,  713,  705,  748,  713,    0,  748,

      704,  708,  708,  708,  714,  714,  708,    0,  714,    0,
      715,  715,  719,  719,  715,  720,  719,  708,  720,  708,
      713,    0,  711,  708,  716,  716,  716,  722,    0,  716,
      722,  712,  714,  718,  718,  718,    0,  748,  718,  708,
      715,    0,  719,  708,  721,  721,  721,  723,  725,  721,
      723,  725,  726,    0,    0,  726,  727,  727,  727,  720,
        0,  727,    0,  722,  729,  729,  729,  768,    0,  729,
      768,  725,  730,  730,  730,  718,  721,  730,  726,    0,
      726,    0,  732,  732,  732,    0,  723,  732,  733,  733,
      733,    0,    0,  733,  734,  734,  734,  768,    0,  734,

      737,  737,  737,  739,  739,  739,  729,  741,  741,  741,
      745,  745,  745,  749,  749,  749,  752,  752,  749,  773,
      752,    0,  773,    0,  732,  751,  751,  751,  753,  753,
      751,    0,  753,  754,  754,  754,  758,  758,  754,  772,
      758,  751,  772,  751,  755,  755,  755,  751,    0,  755,
      760,  760,  761,  761,  760,    0,  761,  762,  762,  774,
      773,  762,  774,  751,    0,  753,  772,  751,  757,  757,
      757,  763,  763,  757,    0,  763,  764,  764,    0,    0,
      764,  765,  765,    0,  757,  765,  757,    0,  766,  766,
      757,  760,  766,  767,  767,  774,    0,  767,  775,  762,

      764,  775,  769,  769,  769,    0,  757,  769,  763,    0,
      757,  765,  771,  771,  771,  776,  777,  771,  776,  777,
      766,  778,  778,  778,    0,  767,  778,  780,  780,  780,
        0,    0,  780,  781,  781,  781,  771,    0,  781,  783,
      783,  783,  791,    0,  783,  791,  776,  785,  785,  785,
        0,  793,  793,  777,  771,  793,  794,  794,  794,  797,
      797,  794,  805,  797,  807,  805,    0,  807,  791,  780,
      791,    0,  798,  798,  799,  799,  798,  806,  799,    0,
      806,  783,  792,  792,  800,  800,  792,  797,  800,  805,
      801,  801,  808,  793,  801,  808,    0,  792,  798,  792,

      802,  802,  810,  792,  802,  810,  803,  803,  804,  804,
      803,  792,  804,  798,  809,  808,    0,  809,  817,  792,
        0,  817,  806,  792,  796,  796,  796,  811,    0,  796,
      811,  801,  802,  818,  818,  809,  832,  818,  810,  832,
      796,  828,  796,  803,  828,  804,  796,  815,  815,  815,
        0,    0,  819,  819,  809,  817,  819,  820,  820,    0,
        0,  820,  796,  811,  821,  821,  796,    0,  821,  822,
      822,  818,    0,  822,  823,  823,  824,  824,  823,    0,
      824,  825,  825,    0,    0,  825,  828,  826,  826,  826,
        0,  822,  826,  827,  827,  827,    0,    0,  827,  820,

      829,  829,  829,  823,    0,  829,  830,  824,  821,  830,
      822,  833,    0,  831,  833,  823,  831,  834,  825,    0,
      834,  838,  838,  838,    0,    0,  841,  830,  830,  841,
      842,  842,  844,  844,  842,    0,  844,  845,  845,  846,
      846,  845,  860,  846,  861,  860,  830,  861,  831,  847,
      847,  856,  833,  847,  856,  848,  848,  848,  834,  844,
      848,  862,  841,  869,  862,    0,  869,  842,  843,  843,
      863,  861,  843,  863,  845,  849,  849,  849,  871,  871,
      849,  847,  871,  843,    0,  843,  850,  850,  850,  843,
      843,  850,  852,  852,  852,  856,    0,  852,  853,  853,

      853,  862,    0,  853,  869,  843,  855,  855,  855,  843,
      863,  855,  857,  857,  857,    0,    0,  857,  859,  859,
      859,    0,    0,  859,  864,  864,  864,  870,  870,  864,
        0,  870,  872,  872,  852,    0,  872,  873,  873,  874,
      874,  873,  859,  874,  883,  875,  875,  883,  855,  875,
      876,  876,  876,    0,    0,  876,  872,  878,  878,  878,
      859,    0,  878,  879,  879,  879,  883,    0,  879,  870,
      881,  881,  881,  882,    0,  881,  882,  890,  890,  890,
      874,    0,  875,    0,  883,  884,  884,  884,    0,    0,
      884,  885,  885,  885,  896,  896,  885,    0,  896,  878,

      886,  886,  886,    0,  882,  886,  888,  888,  888,    0,
        0,  888,  881,  893,  893,  893,    0,    0,  893,  894,
      894,  894,  897,  897,  894,    0,  897,  898,  898,  920,
      899,  898,  920,  899,    0,  896,  900,  900,  900,    0,
        0,  900,  903,  903,  903,    0,    0,  903,  888,  895,
      895,  897,    0,  895,  898,  902,  902,  902,  946,  920,
      902,  946,  929,  897,  895,  929,  895,  905,  905,  905,
      895,  899,  905,  906,  906,  906,  907,  907,  907,  902,
      911,  911,  911,    0,    0,  911,  895,  913,  913,  913,
      895,  929,  913,  914,  914,  914,  946,  902,  914,  921,

      921,  921,  917,  917,  918,  918,  917,    0,  918,  905,
      919,  919,    0,    0,  919,  922,  922,  922,  926,  926,
      926,  927,  927,  926,    0,  927,  975,  975,  975,  913,
      916,  916,  916,  917,    0,  916,  918,  928,  928,  919,
        0,  928,  932,  932,  932,    0,  916,  932,  916,  934,
      934,  934,  916,    0,  934,  935,  935,    0,  927,  935,
      936,  936,  937,    0,  936,  937,  940,  940,  916,    0,
      940,    0,  916,  941,  941,  928,  942,  941,    0,  942,
      944,  944,  935,    0,  944,  945,  945,  950,    0,  945,
      950,  934,  976,  976,  976,  940,  937,  936,  948,  948,

        0,    0,  948,  949,  949,  952,  952,  949,    0,  952,
      953,  953,    0,  954,  953,  941,  954,  950,  944,  956,
      956,    0,  942,  956,    0,  949,  957,  957,    0,    0,
      957,  958,  958,  958,    0,  948,  958,  960,  960,  965,
      965,  960,    0,  965,  949,    0,    0,  952,    0,  961,
      961,  961,    0,  954,  961,  963,  963,  963,    0,  960,
      963,  967,  967,    0,    0,  967,    0,  957,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  960,  963,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  963,    0,    0,

        0,    0,  967,  979,  979,  979,  979,  979,  980,  980,
      980,  980,  980,  981,  981,  981,  981,  981,  982,  982,
      982,  982,  982,  983,  983,  983,  983,  983,  984,    0,
      984,  984,  984,  985,  985,  985,  985,  985,  986,    0,
      986,  986,  986,  987,  987,  987,  987,  987,  988,    0,
      988,  989,  989,  989,  989,  989,  990,  990,  991,  991,
      991,  991,  991,  992,  992,  992,  992,  992,  993,    0,
      993,  993,  993,  994,  994,  994,  994,  994,  995,  995,
      995,  995,  995,  978,  978,  978,  978,  978,  978,  978,
      978,  978,  978,  978,  978,  978,  978,  978,  978,  978,

      978,  978,  978,  978,  978,  978,  978,  978,  978,  978,
      978,  978,  978,  978,  978,  978,  978,  978,  978,  978,
      978,  978,  978,  978,  978,  978,  978,  978,  978,  978,
      978,  978,  978,  978,  978,  978,  978
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#define YY_NO_UNISTD_H 1
//debug static int DC = 0;
/*
   makeedit.l : This file is part of pstoedit
   Simple parser to parse the intermediate flat PostScript and call the backend
   output routines.

   Copyright (C) 1993 - 2020 Wolfgang Glunz, wglunz35_AT_pstoedit.net

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

*/

// define YY_NO_UNISTD_H 
// define YY_NEVER_INTERACTIVE 1
// to avoid usage of isatty 

#include "cppcomp.h"
#include I_iostream
#include I_fstream

#include I_string_h

#include <math.h>

USESTD

#include "psfront.h"
#include "miscutil.h"

static float  origx, origy;
static char   *start_of_text;
static char   *end_of_text;
static float  number;

#define YY_NO_INPUT
#define YY_SKIP_YYWRAP
static int yywrap() { return 1;}

static int secondlineno = 0;
static void checkforlinefeed(const char * currenttext) {
	while(currenttext && (*currenttext)) { if (*currenttext == '\n') secondlineno++; currenttext++;}
}

#define YY_USER_ACTION checkforlinefeed(yytext);

static void cleanyytext() {
	// replaces \r or \n from the end with \0
	char * beg = yytext;
	char * cp = &yytext[strlen(yytext)-1]; 
	while (cp != beg && ((*cp == '\n') || (*cp == '\r'))) {
		*cp = '\0';
		cp--;
	}
}

static inline int toInt(const float f) { 
	return (f > 0.0f) ? static_cast<int>(f+0.5f) : static_cast<int>(f-0.5f);
}

static inline float minf(float f1, float f2) { return (f1<f2) ? f1:f2; }
static const int debuglexer = 0;

#define YY_NO_UNPUT
// to avoid compiler warning

// define YY_DECL int yylex YY_PROTO(( *outputdriver ))
#define YY_DECL int PSFrontEnd::yylex()

#define CHECKconstraints if (!constraintsChecked) { errf << "input file did not contain a backendconstraints directive. Cannot proceed. " << endl; return 1; }

//lint -emacro(773, BEGIN)
// Expression-like macro 'BEGIN' not parenthesized
//lint -emacro(553,YY_STACK_USED)
//lint -emacro(553,YY_MAIN)
//lint -emacro(553,YY_ALWAYS_INTERACTIVE)

//lint -e801 // goto is used in generated state machine
//lint -esym(613,b)  // use of null pointer
//lint -esym(613,buf) //

#define INITIAL 0
#define READPATH 1
#define READIMAGE 2
#define READPROLOG 3
#define READBBOXNUMBERS 4
#define READBBOX 5

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 979 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 978 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
{ 
	// not in READPROLOG !!
// Work around for Linux libg++ bug
			 number = (float) atof(yytext);
// Original
//			 istrstream s(yytext);
//			 s >> number;

 // cout << "adding number   : " << number << " " << yytext << endl;
			 
			 addNumber(number );
			}
	YY_BREAK
case 2:
YY_RULE_SETUP
{}
	YY_BREAK
case 3:
YY_RULE_SETUP
{ BEGIN(READBBOXNUMBERS); }
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
{ 
			lineNumber++;
	const float ury = popUnScaled(); 
	const float urx = popUnScaled(); 
	bboxes_ptr[currentPageNumber].ur = Point(urx,ury);	
	
	const float lly = popUnScaled(); 
	const float llx = popUnScaled();
	bboxes_ptr[currentPageNumber].ll = Point(llx,lly);

//	cerr << llx <<  " " << lly <<  " " << urx <<  " " << ury << endl;
	currentPageNumber++;
	BEGIN(READBBOX);
}
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
{ if (yytext[0] == '\n') lineNumber++; }
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
{ 
	if (yytext[0] == '\n') lineNumber++;
//	cout << " <READBBOXNUMBERS> " << yytext << endl;
}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
{
			lineNumber++;
			const int flattened = toInt(popUnScaled());
			const int textastext = toInt(popUnScaled());
			if (!driverDesc->backendSupportsText    && textastext) {
				errf << "Warning: this preprocessed input file contains text but the selected backend does NOT support this - Hint: use -dt option for preprocessing" << endl;
			}
			if (!driverDesc->backendSupportsCurveto && !flattened) {
				errf << "Warning: this preprocessed input file possibly contains curves but the selected backend does NOT support this. Curves will be converted to a set of straight lines." << endl;
				// return(1);
			}
			constraintsChecked=true;
			}
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
{ 
			lineNumber++;
			CHECKconstraints
			backend->showpage();

			currentPageNumber++;
			if (currentPageNumber <= drvbase::totalNumberOfPages()) {
			if ( splitpages ) {
				if(outfilename) {
					const RSString newFileName = getOutputFileNameFromPageNumber(outfilename, backend->globaloptions.pagenumberformat, currentPageNumber);
					if (newFileName == RSString(outfilename) ) {
						errf << "Warning: no %d or %PAGENUMBER% found in name of output file and page feed found in input and either the selected format does not support multiple pages or the -split option was specified.\nPlease insert a %PAGENUMBER% or %d in the name of the output file if you want to split pages into different files. And potentially use the -pagenumberformat option" << endl;
						// we cannot close the output file in this case otherwise
						// we would overwrite the previous results
					} else  {				
						delete backend; backend = 0; // 
						ofstream * outputFilePtr = (ofstream *) &outFile;
						// not needed here since done in main program convertBackSlashes(nameOfOutputFile);
						if (driverDesc->backendFileOpenType != DriverDescription::noopen ){ 
							outputFilePtr->close();
							if (driverDesc->backendFileOpenType == DriverDescription::binaryopen ) { 
// old if (defined(unix) || defined(__unix__) || defined(_unix) || defined(__unix) || defined(__EMX__) || defined (NetBSD) ) && !defined(DJGPP)
#if defined(PSTOEDIT_UNIXLIKE)
// binary is not available on UNIX, only on PC
								outputFilePtr->open(newFileName.c_str(),ios::out);
#else
								// use redundant ios::out because of bug in djgpp
								outputFilePtr->open(newFileName.c_str(),ios::out | ios::binary);
#endif
								// errf << "opened " << newFileName.c_str() << " for binary output" << endl;
							} else {
								outputFilePtr->open(newFileName.c_str());
								// errf << "opened " << newFileName.c_str() << " for output" << endl;
							}
							if (outFile.fail() ) {
								errf << "Could not open file " << newFileName.c_str() << " for output" << endl;
								return 1;
							} // fail
						} // backend opens file by itself
						backend =  driverDesc->CreateBackend(driveroptions,*outputFilePtr,errf,infilename,newFileName.c_str(),globaloptions);
						if (!backend->driverOK()) {
							errf << "Creation of driver for new page failed " << endl;
							return (1);
						}
						backend->currentPageNumber = currentPageNumber - 1; // backend will add one again in open_page
					} // file name contains %d
				} else {
					errf << "Cannot split pages if output is standard output" << endl;
					return(1);
				} // outfilename
			} // splitpages
			} else {
				// ignore any showpage for pages greater than totalNumberOfPages
				if (backend->verbose) errf << "page " << currentPageNumber << " is greater than expected maximum number of pages " << drvbase::totalNumberOfPages() << endl;
				return 0; // normal return code;
			}
		      }
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
{ 
			lineNumber++;
			if (backend->numberOfElementsInPath() != 0) {
				errf << "Error, path number " << pathnumber << " was not cleared correctly" << endl;
			}

			pathnumber++;
			BEGIN(READPATH); 
			backend->setIsPolygon(false);
			backend->setPathNumber(pathnumber);
			}
	YY_BREAK
case 10:
YY_RULE_SETUP
{
			/* old version: /Helvetica findfont 14 scalefont setfont */
			/* (Helvetica) cvn findfont  [  3.0 8.31384 -5.19615 4.8 106.699 455.692 ] makefont setfont */
			/* new version because sometimes the new name contains a % */
			if (!non_standard_font) {
			// in the case of a non standard font, the setCurrentFontName was
			// done during handling of nonstandard font
				start_of_text = strchr (yytext,(int)'(') + 1 ;
				end_of_text = strrchr (yytext,(int)')') ;
				if (end_of_text) *end_of_text = (char) 0;
				backend->setCurrentFontName(start_of_text,0);
			}
			non_standard_font = 0; // reset 
			}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
{
				lineNumber++;
				//may lead to a lot of messages : 
				if (backend->verbose) errorMessage(yytext);
				// wogl;
			}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
{
				lineNumber++;
				BEGIN(READPROLOG);
			}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
{
				lineNumber++;
				BEGIN(INITIAL);
			}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
{ 
			lineNumber++;
			/* fprintf(stderr,"%s\n",yytext);  */
			start_of_text = yytext+2;
			end_of_text =  strrchr (yytext,(int)' ') ;
			if (end_of_text) *end_of_text = (char) 0;
			backend->setCurrentFontFamilyName(start_of_text);
			}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
{ 
			lineNumber++;
			/* fprintf(stderr,"%s\n",yytext);  */
			start_of_text = yytext+2;
			end_of_text =  strrchr (yytext,(int)' ') ;
			if (end_of_text) *end_of_text = (char) 0;
			backend->setCurrentFontFullName(start_of_text);
			}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
{ 
			lineNumber++;
			/* fprintf(stderr,"%s\n",yytext);  */
			start_of_text = yytext+2;
			end_of_text =  strrchr (yytext,(int)' ') ;
			if (end_of_text) *end_of_text = (char) 0;
			backend->setCurrentFontWeight(start_of_text);
			}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
{
			lineNumber++;
			/* % Times-Roman Times-Roman@0 nonstandard font */
			/* % Bla Bla nonstandard font */ /* if it is not derived from a standard font */
			start_of_text = yytext+2;
			end_of_text =  strchr (start_of_text,(int)' ') ;
			if (end_of_text) {
				*end_of_text = (char) 0;
				char* start_of_secondname = end_of_text + 1;
				char* end_of_secondname = strchr (start_of_secondname,(int)' ') ;
				if (end_of_secondname) {
					*end_of_secondname = (char) 0;
					non_standard_font = 1; // this avoids a further setting of CurrentFontName
					if (strcmp(start_of_text,start_of_secondname) == 0 ) {
						// both names are equal, so it's not a derived font
						backend->setCurrentFontName(start_of_text,1);
					} else {
						// it's a derived font, so use the base name
						backend->setCurrentFontName(start_of_text,0);
					}
				} else {
					errf << "pstoedit: internal error - font statement did not follow expected syntax" << endl;
				}
			} else {
				errf << "pstoedit: internal error - font statement did not follow expected syntax" << endl;
			}
			}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
{
			lineNumber++;
			backend->beginClipPath();
			}
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
{
			lineNumber++;
			backend->setCurrentShowType(drvbase::eofill);
			}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
{
			lineNumber++;
			backend->setCurrentShowType(drvbase::fill);
			}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
{
			lineNumber++;
			backend->setCurrentShowType(drvbase::stroke);
			}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
{
				lineNumber++;
				errf << yytext;
			}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
{
				lineNumber++;
				addNumber(0.0f ); // pseudo false
			}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
{
				lineNumber++;
				addNumber(1.0f ); // pseudo true
			 }
	YY_BREAK
case 25:
YY_RULE_SETUP
{ // begin of some Data Comment, just ignore the marker
			}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
{
/*
sequence:

../tests/image/colorimage.ps.ps:%colorimage:begin
../tests/image/colorimage.ps.ps:%colorimage:ncomp
../tests/image/colorimage.ps.ps:%colorimage:multi
../tests/image/colorimage.ps.ps:%colorimage:imagematrix
../tests/image/colorimage.ps.ps:%colorimage:normalized image currentmatrix
../tests/image/colorimage.ps.ps:%colorimage:bits
../tests/image/colorimage.ps.ps:%colorimage:height
../tests/image/colorimage.ps.ps:%colorimage:width
../tests/image/colorimage.ps.ps:%colorimage:data
../tests/image/colorimage.ps.ps:%colorimage:end 

../tests/image/hw.ps.ps:%image:begin
../tests/image/hw.ps.ps:%image:imagematrix
../tests/image/hw.ps.ps:%image:normalized image currentmatrix
../tests/image/hw.ps.ps:%image:bits 
../tests/image/hw.ps.ps:%image:height
../tests/image/hw.ps.ps:%image:width
../tests/image/hw.ps.ps:%image:data
../tests/image/hw.ps.ps:%image:data
../tests/image/hw.ps.ps:%image:end

../tests/image/hwuse.eps.ps:%imagemask:begin
../tests/image/hwuse.eps.ps:%imagemask:imagematrix
../tests/image/hwuse.eps.ps:%imagemask:normalized image currentmatrix
../tests/image/hwuse.eps.ps:%imagemask:polarity
../tests/image/hwuse.eps.ps:%imagemask:height
../tests/image/hwuse.eps.ps:%imagemask:width
../tests/image/hwuse.eps.ps:%imagemask:data
../tests/image/hwuse.eps.ps:%imagemask:data
../tests/image/hwuse.eps.ps:%imagemask:end

%begin dealing with image from dict
%fileimage:begin
% DC  640 0 0 -480 0 480
%fileimage:imagematrix
%fileimage:filename but.dump_1.png
% DC  640
%fileimage:width
% DC  480
%fileimage:height
%fileimage:end
grestore %}
%end dealing with image from dict

*/
				if (debuglexer) { 
					cerr << "handling " << yytext ;
					pstack();
				}
				backend->imageInfo.isFileImage = false ;
				backend->imageInfo.type = ImageType::colorimage;
				// ncomp will be written later
				// bits will be written later
				backend->imageInfo.polarity = true; 
				BEGIN(READIMAGE); 
			}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
{
				lineNumber++;
				if (debuglexer) { 
					cerr << "handling " << yytext ;
					pstack();
				}
				backend->imageInfo.isFileImage = true ;
				backend->imageInfo.type = ImageType::normalimage;
				backend->imageInfo.ncomp = 1;
				// bits will be written later
				backend->imageInfo.polarity = true; 
				BEGIN(READIMAGE); 
			}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
{
				lineNumber++;
				if (debuglexer) { 
					cerr << "handling " << yytext ;
					pstack();
				}
				backend->imageInfo.isFileImage = false ;
				backend->imageInfo.type = ImageType::normalimage;
				backend->imageInfo.ncomp = 1;
				// bits will be written later
				backend->imageInfo.polarity = true; 
				BEGIN(READIMAGE); 
			}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
{
				lineNumber++;
				if (debuglexer) { 
					cerr << "handling " << yytext ;
					pstack();
				}
				backend->imageInfo.isFileImage = false ;
				backend->imageInfo.type = ImageType::imagemask;
				backend->imageInfo.ncomp = 1;
				// polarity will be written later
				backend->imageInfo.bits = 1;
				BEGIN(READIMAGE); 
			}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
{
				lineNumber++;
				if (debuglexer) { 
					cerr << "handling " << yytext ;
					pstack();
				}

				// replace newline with eos
				cleanyytext();
				// yytext[strlen(yytext)-1] = '\0';
				//cout << "filename: {" << yytext << "}" << endl;
				backend->imageInfo.FileName = yytext+strlen("%fileimage:filename")+1;
			}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
{
				lineNumber++;
				if (debuglexer) { 
					cerr << "handling " << yytext ;
					pstack();
				}
				backend->imageInfo.ncomp = (short) toInt(popUnScaled());
			}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
{ // only set for imagemask
				lineNumber++;
				if (debuglexer) { 
					cerr << "handling " << yytext ;
					pstack();
				}
				backend->imageInfo.polarity = popUnScaled() > 0.5f;  // convert from float to bool
			}
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
{
				lineNumber++;
				if (debuglexer) { 
					cerr << "handling " << yytext ;
					pstack();
				}
				(void)pop(); // not used so far
			}
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
{
				lineNumber++;
				if (debuglexer) { 
					cerr << "handling " << yytext ;
					pstack();
				}
				for (unsigned int i = 0; i < 6 ; i++ ) {
					backend->imageInfo.imageMatrix[5-i] = popUnScaled();
				}
			}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
{
				lineNumber++;
				if (debuglexer) { 
					cerr << "handling " << yytext ;
					pstack();
				}
				for (unsigned int i = 0; i < 6 ; i++ ) {
					backend->imageInfo.normalizedImageCurrentMatrix[5-i] = popUnScaled();
				}
			}
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
{ // only set for normalimage and colorimage
				lineNumber++;
				if (debuglexer) { 
					cerr << "handling " << yytext ;
					pstack();
				}
				backend->imageInfo.bits = (short) toInt(popUnScaled());
			}
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
{
				lineNumber++;
				if (debuglexer) { 
					cerr << "handling " << yytext ;
					pstack();
				}
				backend->imageInfo.height = toInt(popUnScaled());
			}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
{
				lineNumber++;
				if (debuglexer) { 
					cerr << "handling " << yytext ;
					pstack();
				}
				backend->imageInfo.width = toInt(popUnScaled());
			}
	YY_BREAK
case 39:
YY_RULE_SETUP
{
			CHECKconstraints
				if (debuglexer) { 
					cerr << "handling " << yytext ;
					pstack();
				}
//cerr << "handling DC " << DC++ << endl;
//cerr << "handling " << yytext ;
//cerr << "strlen " << strlen(yytext) << endl ;
				const unsigned int size = backend->imageInfo.height * ((backend->imageInfo.ncomp * backend->imageInfo.width  * backend->imageInfo.bits + 7 ) / 8);
				if (backend->imageInfo.data == 0) {
// cerr << " allocating " << size << " for image data " << endl;
					backend->imageInfo.data = new unsigned char[size];
					if (backend->imageInfo.data==0) {
						cerr << "out of memory for image data" << endl;
						return(1);
					}
					backend->imageInfo.nextfreedataitem = 0;
					// init
//					for (unsigned int i = 0 ; i < size; i++) {
//						backend->imageInfo.data[i] = 0;
//					}
				}
				cleanyytext();
				const char * cp = yytext;
				// search for ' '
				while (*cp != ' ') cp++; 
				// now cp points to blank
				cp++;
//cerr << "effective length " << strlen(cp) << endl;
				do {
					const char chigh = *cp;
					const unsigned int high = hextoint(*cp);
					// cout << "scanned1 " << (int) *cp << endl;
					cp++;
					if (*cp == '\0') {
						cerr << "data format error (not a hex number) in line " << lineNumber << " " << secondlineno << endl;
						return(1);
					}
					const char clow = *cp;
					const unsigned int low = hextoint(*cp);
					// cout << "scanned2 " << (int) *cp << endl;
					cp++; 
					if ( backend->imageInfo.nextfreedataitem < size ) {
						backend->imageInfo.data[backend->imageInfo.nextfreedataitem] = (unsigned char) (high * 16 + low);
//						cerr << backend->imageInfo.nextfreedataitem << ":" << chigh<< clow << endl;
						backend->imageInfo.nextfreedataitem++;
					}  else {
						cerr << "too many data in line " << lineNumber << " size is " << size << " : ignoring " << (cp-2) << "|" << chigh << clow << endl;
						break;
					}
				} while (cp && (*cp != '\0'));

			}
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
{
				lineNumber++;
				if (debuglexer) { 
					cerr << "handling " << yytext ;
					pstack();
				}

				backend->dumpImage();
			 	BEGIN(INITIAL);
			}
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
{
				lineNumber++; 
				if (debuglexer) cerr << "comment ignored " << yytext;
			}
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
{
			lineNumber++;
			// setCurrentFontSize(number );
			float matrix[6];
			matrix[5] = pop();
			matrix[4] = pop();
			matrix[3] = pop(); // sy * cos(phi)
			matrix[2] = pop(); // sy * -sin(phi)
			matrix[1] = pop(); // sx * sin(phi)
			matrix[0] = pop(); // sx * cos(phi)
			backend->setCurrentFontMatrix(matrix);
			const float fsizex = (float) pythagoras(matrix[0] , matrix[1]);
			const float fsizey = (float) pythagoras(matrix[2] , matrix[3]);
			const float todegrees =   180.0f / 3.14159265358979323846f ;
			float phix = (matrix[0] != 0.0f) ? (todegrees * (float) atan(matrix[1] / matrix[0]) ) : (matrix[1] > 0 ? 90.0f : -90.0f );
//			float phiy = todegrees * atan(-1.0 * matrix[2] / matrix[3]);
			if (matrix[0] < 0.0f ) phix = 180 + phix; // if cos (phi) < 0 than add 180
//			if (matrix[3] < 0.0f ) phiy = 180 + phiy;
			if (phix < 0.0f ) phix = 360 + phix;
//			if (phiy < 0.0f ) phiy = 360 + phiy;
//			for (int i = 0; i < 6; i++ ) cout << "matrix [" << i << "] " << matrix[i] << " ";
//			cout << fsizex << " " << fsizey  << " " << endl;
//			cout << phix << " " << phiy  << " "  << endl;
			backend->setCurrentFontSize((fsizex + fsizey)/2.0f);
			backend->setCurrentFontAngle(phix);
			}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
{
//obsolete
			lineNumber++;
			// setCurrentFontSize(number );
			backend->setCurrentFontSize(pop());
			// pop(); 
			}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
{
			lineNumber++;
			start_of_text = strchr (yytext,(int)'(') + 1 ;
			end_of_text = strrchr (yytext,(int)')') ;
			if (end_of_text) *end_of_text = (char) 0;
			backend->setColorName(start_of_text);
			}			
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
{
			lineNumber++;
			const float B = popUnScaled();
			const float G = popUnScaled();
			const float R = popUnScaled();
			/* printf("%s %f %f %f\n","setting RGB to ",R,G,B); */
			backend->setRGB(R,G,B);
			}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
{
			lineNumber++;
			const float K = popUnScaled();
			const float Y = popUnScaled();
			const float M = popUnScaled();
			const float C = popUnScaled();
			const unsigned int colormodel = 3;
			// http://www.efg2.com/Lab/Library/Color/AndComputers.htm
			switch (colormodel) {
			case 1: {
			const float R = 1.0f - minf(1.0f,C+K); // according to PLRM page 307
			const float G = 1.0f - minf(1.0f,M+K);
			const float B = 1.0f - minf(1.0f,Y+K);
	//		printf("%s %f %f %f\n","setting RGB to ",R,G,B);
						backend->setRGB(R,G,B);
						}
						break;
			case 2: {
			
			/* alternative formula
	http://research.microsoft.com/~hollasch/cgindex/color/cmyk.html
	http://www.ghostscript.com/pipermail/gs-cvs/2002-November/002588.html
	
	http://www.paris-pc-gis.com/MI_Enviro/Colors/color_models.htm
			  R = (1.0 - C) * (1.0 - K), etc. 
			*/

			const float R = (1.0f - C)*(1.0f - K); 
			const float G = (1.0f - M)*(1.0f - K);
			const float B = (1.0f - Y)*(1.0f - K);
	//		printf("%s %f %f %f\n","setting RGB to ",R,G,B);
						backend->setRGB(R,G,B);
			}
			break;
			case 3: {
			
/*

	http://www.neuro.sfc.keio.ac.jp/~aly/polygon/info/color-space-faq.html

RGB -> CMYK				            | CMYK -> RGB
Black=minimum(1-Red,1-Green,1-Blue)	| Red=1-minimum(1,Cyan*(1-Black)+Black)
Cyan=(1-Red-Black)/(1-Black)	    | Green=1-minimum(1,Magenta*(1-Black)+Black)
Magenta=(1-Green-Black)/(1-Black)	| Blue=1-minimum(1,Yellow*(1-Black)+Black)
Yellow=(1-Blue-Black)/(1-Black)	    |
*/

			const float R = 1.0f - minf(1.0f,C*(1-K)+K); 
			const float G = 1.0f - minf(1.0f,M*(1-K)+K);
			const float B = 1.0f - minf(1.0f,Y*(1-K)+K);
	//		printf("%s %f %f %f\n","setting RGB to ",R,G,B);
						backend->setRGB(R,G,B);
				}
			break;
			default: break;
			}
			
			}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
{
				lineNumber++;
				cleanyytext();
				yytext[strlen(yytext) - 8] = '\0'; // strip of trailing setdash
				backend->setDash(yytext+1); // don't copy leading space
			}
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
{
				lineNumber++;
				backend->setCurrentMiterLimit(number);
				(void) pop(); 
			}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
{
				lineNumber++;
				backend->setCurrentLineJoin((int) (number +0.5));
				(void) pop(); 
			}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
{
				lineNumber++;
				backend->setCurrentLineCap((int) (number +0.5));
				(void) pop(); 
			}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
{
				lineNumber++;
				float width = pop();
				if (width < (float) backend->globaloptions.minlinewidth) {
					width = (float) backend->globaloptions.minlinewidth;
				}
				backend->setCurrentLineWidth(width);
//				setCurrentLineWidth(number  );
//				pop(); 
			}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
{
				lineNumber++;
				float height = pop(); 
				if (height < 1.0 ) { height = 792 * backend->getScale() ; }
				backend->setCurrentDeviceHeight(height);
				float width  = pop(); 
				if (width < 1.0 ) { width = 612 * backend->getScale() ; }
				backend->setCurrentDeviceWidth(width);
				if (backend->verbose) errf << "handling setPageSize (w,h)(" << width  << "," << height << ")"<< endl;
			}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
{
				lineNumber++;
				const bool  mappedtoisolatin1 = pop() > 0.5; // float to bool
				const float y_end = pop();
				const float x_end = pop();
				const float ay = pop();
				const float ax = pop();
				const int   Char = (int) (popUnScaled()   +0.5);	
				const float cy = pop();
				const float cx = pop();
				backend->setMappedtoisolatin1(mappedtoisolatin1);
				backend->setCurrentWidthParams(ax,ay,Char,cx,cy,x_end,y_end);
			}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
{ 
				lineNumber++;
			CHECKconstraints
			start_of_text = strchr (yytext,(int)'(') + 1 ;
			end_of_text = strrchr (yytext,(int)')') ;
			if (end_of_text) *end_of_text = (char) 0;
			const float y = pop(); /* just the last moveto (0 0 in case of makefont) */
			const float x = pop(); /* just the last moveto (0 0 in case of makefont) */
			/* backend->dumpText(start_of_text,x,y); */
			backend->pushHEXText(start_of_text,x + backend->getCurrentFontMatrix()[4],y + backend->getCurrentFontMatrix()[5]);
			}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
{ 
				lineNumber++;
// (68656c6c6f20776f726c64) [ /h /e /l /l /o /space /w /o /r /l /d ] awidthshowhexwithglyphs
			CHECKconstraints
			start_of_text = strchr (yytext,(int)'(') + 1 ;
			end_of_text = strrchr (yytext,(int)')') ;
			char * start_of_glyphs = strchr(yytext,(int)'[') + 2;
			char * end_of_glyphs = strrchr(yytext,(int)']');
			if (end_of_glyphs) *(end_of_glyphs-1) = (char) 0;
			if (end_of_text) *end_of_text = (char) 0;
			//cout << "text :" << start_of_text << " glyphs : " << start_of_glyphs << endl;
			const float y = pop(); /* just the last moveto (0 0 in case of makefont) */
			const float x = pop(); /* just the last moveto (0 0 in case of makefont) */
			/* backend->dumpText(start_of_text,x,y); */
			backend->pushHEXText(start_of_text,x + backend->getCurrentFontMatrix()[4],y + backend->getCurrentFontMatrix()[5], start_of_glyphs);

			}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
{ 
				lineNumber++;
			CHECKconstraints
			start_of_text = strchr (yytext,(int)'(') + 1 ;
			end_of_text = strrchr (yytext,(int)')') ;
			if (end_of_text) *end_of_text = (char) 0;
			const float y = pop(); /* just the last moveto (0 0 in case of makefont) */
			const float x = pop(); /* just the last moveto (0 0 in case of makefont) */
			/* backend->dumpText(start_of_text,x,y); */
			backend->pushText(strlen(start_of_text),start_of_text,x + backend->getCurrentFontMatrix()[4],y + backend->getCurrentFontMatrix()[5]);
			/* old - zeropatch backend->pushText(start_of_text,x + backend->getCurrentFontMatrix()[4],y + backend->getCurrentFontMatrix()[5]); */
			}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
{
// obsolete
				lineNumber++;
			backend->setCurrentFontAngle(number);
			(void) pop();
			}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
{
//obsolete
				lineNumber++;
			/* Because this is in the preamble, only pop 
			   this has put something on the stack. */
			if (nextFreeNumber >= 2)
				{ (void)pop(); (void)pop(); }
			}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
{
//obsolete
				lineNumber++;
			/* Because this is in the preamble, only pop 
			   this has put something on the stack. */
			if (nextFreeNumber >= 2)
				{ (void)pop(); (void)pop(); }
			}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
{ 
			if (yytext[0] == '\n') lineNumber++;
	/* cout << "ignored '" << yytext << "'"; */ /* ignore any other stuff */ 
	}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
{ 
				lineNumber++;
			CHECKconstraints
			// save coordinates for possible closepath
			origy = pop();
			origx = pop();
			if (backend->numberOfElementsInPath() > 1) {
				// this is an intermediate moveto
				// if backend supports subpaths add it
				// else dump last path and start a new one
				if (backend->globaloptions.simulateSubPaths || backend->driverdesc.backendSupportsSubPaths) {
//					Point p(origx,origy);
					backend->addtopath(new Moveto(origx,origy));  
				} else {
					// dumppath
					backend->dumpPath();
					// start new path
//					Point p(origx,origy);
					backend->setIsPolygon(false);
					backend->addtopath(new Moveto(origx,origy));  
					
				}
			} else {
				// it is a starting moveto
//				Point p(origx,origy);
				backend->addtopath(new Moveto(origx,origy));  
			}
			currentpoint = Point(origx,origy);
		   }
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
{
				lineNumber++;
			const float y = pop();
			const float x = pop();
//			Point p(x,y);
			backend->addtopath(new Lineto(x,y)); 
			currentpoint = Point(x,y);

			const Point op(origx,origy);
			backend->setIsPolygon(currentpoint == op); // dynamically track potential polygons
			}
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
{ 
				lineNumber++;

			Point p[3];
			for (unsigned int i = 3; i > 0; i--) { 
				// !!! i = 2 to i>= 0 does not work for unsigned
				const float y = pop();
				const float x = pop();
				p[i-1] = Point(x,y);
			}

			if (backend->driverdesc.backendSupportsCurveto) {
				backend->addtopath(new Curveto(p)); // pass p as array
			} else {

				const unsigned int sections = 10;

				const Point & cp1 = p[0];
				const Point & cp2 = p[1];
				const Point & ep  = p[2];

				for (unsigned int s = 0; s <= sections; s++) {
					const float t = 1.0f * s / sections;
					const Point pt = PointOnBezier(t, currentpoint, cp1, cp2, ep);
					backend->addtopath(new Lineto(pt.x_,pt.y_)); 
				}
//				errf << "illegal input received. curveto not expected by this backend\n";
//				return(1);			
			}
			currentpoint = Point(p[2].x_,p[2].y_);
			const Point op(origx,origy);
			backend->setIsPolygon(currentpoint == op); // dynamically track potential polygons

			}
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
{
				lineNumber++;
			 const Point startPoint(origx,origy);
			 const basedrawingelement & lastelem = backend->pathElement(backend->numberOfElementsInPath() -1 );
			// check for last == first. Then no additional
			// lineto is needed. and isPolygon can be set to true
			 if  ( (lastelem.getType() == lineto) && (lastelem.getPoint(0) == startPoint) ) {
				// remove last lineto - 
				// a closepath is sometimes nicer than a lineto (see closevsline.ps)
				if (backend->verbose) errf << "removing obsolete lineto " << endl; 
				backend->removeFromElementFromPath();
				// no need to close the path, it's already closed
			 } /* else */ {
				if (backend->globaloptions.simulateSubPaths || backend->driverdesc.backendSupportsSubPaths) {
			 		backend->addtopath(new Closepath(origx,origy)); 
				} else {
			 		backend->addtopath(new Lineto(origx,origy)); // pass p as array
				}

			 }
			 backend->setIsPolygon(true);
			 /* show is done by next stroke, fill or moveto */
 			 currentpoint = startPoint;
			}
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
{ 
				lineNumber++;
			CHECKconstraints
			 BEGIN(INITIAL);
			 backend->dumpPath();
                       	};
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
{ 
				lineNumber++;
			CHECKconstraints
			 BEGIN(INITIAL);
			 backend->dumpPath(); 
                       	};
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
{ 
				lineNumber++;
			CHECKconstraints
			 BEGIN(INITIAL);
			 backend->dumpPath(); 
                       	};
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
{ 
					lineNumber++;
				 backend->Save();
                       	};
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
{ 
					lineNumber++;
				 backend->Save();
                       	};
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
{ 
					lineNumber++;
				 backend->Restore();
                       	};
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
{ 
					lineNumber++;
				 backend->Restore();
                       	};
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
{ 
					lineNumber++;
				 backend->endClipPath(drvbase::clip);
				 BEGIN(INITIAL);
                    	};
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
{
					lineNumber++; 
				 backend->endClipPath(drvbase::eoclip);
				 BEGIN(INITIAL);
                    	};
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
{ 
			if (yytext[0] == '\n') lineNumber++;
}
	YY_BREAK
case 75:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(READPATH):
case YY_STATE_EOF(READIMAGE):
case YY_STATE_EOF(READPROLOG):
case YY_STATE_EOF(READBBOXNUMBERS):
case YY_STATE_EOF(READBBOX):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 979 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 979 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 978);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

void PSFrontEnd::yylexcleanup()
{
//	if (yy_state_buf) yy_flex_free(yy_state_buf);

#if 1
	FILE * yyinsave = yyin; // because yy_init_globals (called by destroy) resets it to 0
	yylex_destroy();
	yyin = yyinsave; // need to retain this because fclose is called outside (could/should be changed in future)
#else
	yy_delete_buffer( yy_current_buffer );

// reset the global initialized statics to their initial value
// so the lexer can be called again.
	yy_c_buf_p	= (char *) 0;
	yy_init		= 1;	/* whether we need to initialize */
	yy_start	= 0;	/* start state number */
#endif

}

unsigned int PSFrontEnd::readBBoxes(BBox * bboxes)
{
	bblexmode = true;
	currentPageNumber = 0;
	nextFreeNumber=0;
	lineNumber = 1;
	secondlineno = 1;
	bboxes_ptr = bboxes;
	yy_init = 1;
	FILE * yyinsave = yyin; // because yy_init_globals resets it to 0
	yy_init_globals();
	yyin = yyinsave;
	BEGIN(READBBOX);
	(void) yylex();
	yylexcleanup();
	return currentPageNumber;
}
void PSFrontEnd::run(bool mergelines)
{
	bblexmode = false;
	currentPageNumber = 1;
	nextFreeNumber=0;
	yy_init = 1;
	lineNumber = 1;
	secondlineno = 1;
	FILE * yyinsave = yyin; // because yy_init_globals resets it to 0
	yy_init_globals();
	yyin= yyinsave;
	BEGIN(INITIAL);
	backend->startup(mergelines);
	if (!yylex()) {
		// yylex returns 0 on normal EOF
		// 1 in case of errors
		backend->finalize();
	}
	delete backend;
	backend = 0;
}

void PSFrontEnd::addNumber(float a_number)
{
  // printf("Adding %f\n",number);
#if defined(HAVE_STL) && !defined(USE_FIXED_ARRAY)
 if (nextFreeNumber >= numbers.size()) {
   numbers.push_back(a_number);
 } else { 
   numbers[nextFreeNumber] = a_number;
 }
 nextFreeNumber++;
#else
 if (nextFreeNumber < maxPoints) { 
	// cout << "adding number : " << a_number << endl;
     	numbers[nextFreeNumber++] = a_number; 
     	// nextFreeNumber always points to the next free number
 } else { 
   	errf << "Too many numbers on stack. Please increase maxPoints in drvbase.h \n"; 
   	exit(1); 
 }
 #endif
}

PSFrontEnd::PSFrontEnd(ostream& outfile_p, 
		ostream & errstream,
		PsToEditOptions & globaloptions_p,
		const char * infilename_p,
		const char * outfilename_p,
		const DriverDescription * driverDesc_p,
		const char * driveroptions_p,
		const bool splitpages_p, 
		drvbase * backend_p)
	: outFile(outfile_p),
	  errf(errstream),
	  infilename(infilename_p),
	  outfilename(outfilename_p),
	  globaloptions(globaloptions_p),
	  driverDesc(driverDesc_p),
	  driveroptions(driveroptions_p),
	  splitpages(splitpages_p),
	  backend(backend_p),
	  currentPageNumber(1),
	  lineNumber(1),
#if defined(HAVE_STL) && !defined(USE_FIXED_ARRAY)
#else
	  numbers((float*) 0),
#endif
      nextFreeNumber(0),
      pathnumber(0),
	  non_standard_font(false),
	  constraintsChecked(false),
	  bblexmode(false),
	  bboxes_ptr(0)
{
#if defined(HAVE_STL) && !defined(USE_FIXED_ARRAY)
    // can use default ctor for vector
#else
    numbers = new float[maxPoints]; // The number stack
    if ((numbers == 0)){
		errf << "new failed in PSFrontEnd::PSFrontEnd " << endl;
		exit(1);
    }
#endif
}

PSFrontEnd::~PSFrontEnd() {
#ifdef __INSURE__
	errf << "Deleting PSFrontEnd object and thus the numbers as well" << endl;
#endif
#if defined(HAVE_STL) && !defined(USE_FIXED_ARRAY)
// use default dtor
#else
	delete [] numbers;
	numbers = 0;
#endif
	
	yylexcleanup();

	infilename=0;
	outfilename=0;
	driverDesc=0;
	driveroptions=0;
	backend=0;
	bboxes_ptr=0;
	
}

float PSFrontEnd::pop() 
{ 
  return popUnScaled()  * backend->getScale();
}

float PSFrontEnd::popUnScaled() 
{
  if (nextFreeNumber > 0) {
  	nextFreeNumber--;
  	return numbers[nextFreeNumber]; // the value we just pushed
  } else {
	errf << "Fatal error in PSFrontEnd::popUnScaled : nextFreeNumber would get < 0" << endl;
	assert(false); //exit(1);
  }
  return 0.0f; // never reached, just to make compiler quiet
}

void PSFrontEnd::pstack()  const {
  for (unsigned int i = 0 ; i < nextFreeNumber ; i++ ) {
	cerr << "[" << i << "] " << numbers[i] << " " << numbers[i]* backend->getScale() << endl;
  }
}

