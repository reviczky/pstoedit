/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>
#include <errno.h>

/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#ifndef _WIN32
#include <unistd.h>
#endif

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif


/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 74
#define YY_END_OF_BUFFER 75
static yyconst short int yy_accept[961] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   75,   59,   59,   59,   59,   59,   59,   59,
        1,   59,   59,   59,   59,   59,   73,   73,   73,    1,
       73,   73,   73,   73,   73,   73,   59,   59,    1,   73,
        6,    4,    6,    1,    5,    5,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   41,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    1,    1,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    1,
        1,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   25,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   71,
        0,    0,    0,    0,    0,   65,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   22,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   72,    0,   66,    0,
       61,    0,   60,    0,   64,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   56,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    9,    0,    0,
        0,   67,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   62,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   46,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   68,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    8,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   16,    0,    0,    0,    0,    0,    0,    0,
       41,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   63,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   57,
        0,    0,    0,    0,    0,    0,    0,    0,   18,    0,
        0,    0,    0,    0,    0,    0,   11,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,   69,    0,    0,    0,    0,    0,   49,    0,    0,
        0,    0,    0,    0,    0,    0,   24,    0,    0,    0,
        0,   40,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   58,    0,    0,    0,   15,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   70,
        0,    0,    0,   51,    0,    0,    0,   48,    0,    0,
        0,    0,   44,    0,    0,    0,   23,    0,    0,   36,
       39,    0,    0,    0,    0,    0,    0,    0,    0,   13,
        0,    0,    0,    0,    0,    0,    0,   20,    0,    0,

        0,    0,    0,    0,    0,    0,    0,   28,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   45,    0,    0,
       50,    0,    0,    0,    0,   39,    0,    0,    0,   33,
        0,   31,    0,    0,    0,   38,    0,    0,    0,   14,
        0,    0,    0,    0,    0,   21,    0,    0,   12,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   55,
        0,    0,    0,    0,    0,    0,    0,   47,    0,    0,
       52,    0,    0,    0,   37,    0,    0,    0,    0,    0,
        0,    0,    0,   19,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    3,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   32,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   27,    0,    0,
       29,    0,    0,    0,   53,    0,    0,   10,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   10,
        0,    0,   11,    0,    0,   26,    0,    0,   10,    0,
        0,   43,    0,    0,    0,    0,    0,    0,    0,   10,
        0,    0,    0,    0,    0,    7,    0,    0,    0,   34,
        0,    0,    0,   42,    0,    0,   17,    0,    0,    0,

        0,    0,    0,    0,   30,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   12,    0,    0,    0,    0,    0,
        2,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   10,    0,
        0,    0,    0,   54,    0,    0,    0,    0,   10,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   35,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    1,    1,    1,    5,    1,    1,    6,
        7,    1,    1,    1,    8,    9,    1,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,   10,    1,    1,
        1,    1,    1,    1,   11,   12,   13,   14,   15,   16,
       17,   11,   11,   11,   11,   11,   18,   19,   11,   20,
       11,   11,   21,   11,   11,   11,   22,   11,   11,   11,
       23,    1,   24,    1,    1,    1,   25,   26,   27,   28,

       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   11,   41,   42,   43,   44,   45,   46,   47,
       48,   49,   50,    1,   51,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[52] =
    {   0,
        1,    1,    2,    3,    1,    1,    1,    1,    1,    4,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    1,    1,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    1,
        1
    } ;

static yyconst short int yy_base[978] =
    {   0,
        0,   40,   78,  116,    5,    7, 1631, 1625,   14,   16,
     1608, 1607, 1602,   14, 3217,   26,  156,   25,   30,   47,
       51,   32,   58,   66,   68,   84, 3217, 1595, 1579,   81,
       17, 1547, 1545, 1538, 1526, 1506,   73, 1515,   93,   71,
     3217, 3217, 1500,  109, 3217, 1503,   89,  122,  123,  124,
      128,  129,  133,  135,  144, 3217,  163,  170,  177,  184,
      191,  193,  199,  137,  197,  150,  204,  206,  215,  213,
      221,  230,  225,  165,  234,  238,  244,  245, 1494,  245,
      248,   46, 1451,  231, 1455, 1449, 1441, 1441, 1461,    7,
       59,  229,  244, 1458,  260,  265,  261,  266,  271,  278,

      285,  318,  287,  296,  304,  309,  320,  326,  311,  341,
      343,  354,  361,  276,  347,  367,  294,  324,  362,  363,
      371,  373,  377,  381,  414,  389, 1426, 1415, 1411, 1415,
     1413, 1406, 1399, 1394, 1357, 1379,  391,  397,   81, 1329,
      395,  406,  408,  419,  425,  433,  435,  445,  454,  461,
      466,  498,  471,  473,  481,  483,  489,  503,  505,  515,
      520,  525,  534,  538,  439,  487,  539,  540,  396,  544,
      545,  551,  553,  557,  562,  563,  564,  575,  579,  568,
      586,  590,  495, 1316, 1315, 1299, 1294,  600, 1280, 1276,
     1280, 1305,  146,  591,   24, 1260,  602,  603,  607,  609,

      613,  622,  624,  632,  639,  641,  650,  655,  663,  668,
      673,  678,  680,  687,  689,  695,  701,  707,  709,  711,
      645,  656,  717,  718,  722,  726,  727,  728,  732,  739,
      744,  745,  743,  749,  754,  759,  755,  763,  775, 3217,
     1258, 1245, 1232, 1231,  780, 3217, 1215, 1198, 1206, 1200,
       90,  552,  196, 1156,  782,  765,  786,  788,  792,  797,
      799,  805,  814,  816,  830,  832,  839,  841,  846,  848,
      853,  855,  860,  862,  877,  879,  887,  885,  806,  867,
      820,  892,  897,  898,  902,  822,  904,  908,  910,  916,
      922,  923,  924,  928,  933,  934, 1163, 1137,  944,  957,

      960,  964,  967,  424,  917,  563,  332, 1141,  968,  969,
      978,  970,  979,  984,  986,  992, 1010, 3217, 1021, 1003,
     1012, 1023, 1029, 1037, 1042, 1044, 1049, 1054, 1061, 1068,
     1073, 1080, 1078, 1086,  990,  996, 1088, 1090, 1027, 1094,
     1105, 1109, 1115, 1062, 1121, 1122, 1123, 1129, 1131, 1133,
     1139, 1135, 1141, 1121, 1104, 1147, 3217, 1150, 3217, 1159,
     3217, 1164, 3217, 1169, 3217, 1132, 1114, 1017, 1153,  567,
      731,   95, 1114, 1176, 1180, 1193, 3217, 1199, 1205, 1185,
     1207, 1213, 1215, 1220, 1222, 1261, 1227, 1229, 1235, 1241,
     1248, 1253, 1277, 1282, 1293, 1298, 1304, 1309, 1239, 1246,

     1255, 1262, 1286, 1267, 1310, 1318, 1324, 3217, 1332, 1333,
     1339, 3217, 1345, 1346, 1350, 1351, 1352, 1356, 1358, 1357,
     1362, 1363, 1369, 1109, 1376, 3217, 1079, 1058, 1377, 1067,
     1071, 1050, 1050, 1030, 1018,  266,  990,  987, 1188,  182,
      970, 1378, 1390, 1397, 3217, 1410, 1398, 1415, 1417, 1422,
     1428, 1434, 1436, 1441, 1446, 1451, 1458, 1460, 1474, 1476,
     1481, 1486, 1491, 1498, 1500, 1402, 1508, 1464, 1492, 1512,
     1514, 1518, 1524, 3217, 1530, 1532, 1534, 1538, 1539, 1540,
     1544, 1546, 1551, 1550, 1552, 1559, 3217, 1566, 1588,  959,
      963, 1382,  941,  935,  928,  918,  918,  906,  897,  878,

      877,  875,  588,  323,  867, 1560, 1572, 1592, 1602, 1607,
     1578, 1613, 3217, 1631, 1615, 1620, 1637, 1622, 1647, 1653,
     3217, 1689, 1660, 1667, 1672, 1674, 1679, 1691, 1706, 1711,
     1624, 1721, 1730, 1680, 1593, 1638, 1713, 1695, 1738, 1715,
     1722, 1731, 1745, 1746, 1752, 1754, 1756, 1758, 1764, 3217,
      858, 1771,  605,  843,  853, 1774,  845,  837,  818,  803,
      801,  797,  771, 1374,  441,  793, 1775, 1783, 1796, 3217,
     1802, 1808, 1814, 1785, 1821, 1823, 1829, 1835, 3217, 1856,
     1842, 1847, 1858, 1866, 1873, 1878, 3217, 1880, 1885, 1892,
     1903, 1905, 1911, 1913, 1836, 1827, 1789, 1886, 1848, 1925,

     1931, 3217, 1938, 1919, 1948, 1940, 1954, 3217, 1960, 1966,
     1939, 1968, 1975, 1893, 1981, 1984, 3217,  750, 1987,  750,
     1990, 3217,  713,  708,  690,  677,  682,  656,  663,  765,
      683,  640, 1991, 2001, 3217, 2007, 1993, 2013, 3217, 2048,
     2020, 2027, 2022, 2033, 2035, 2040, 2055, 2065, 2070, 2072,
     2077, 2093, 2098, 2014, 2041, 2078, 2084, 2104, 2112, 3217,
     2121, 2056, 2127, 3217, 2133, 2139, 2145, 3217, 2151, 2157,
     2114, 2163, 3217, 2169, 2170, 2176, 3217,  645, 2179, 3217,
        0,  626,  627, 2182, 2185,  615,  614, 2188,  637, 3217,
      586, 2190, 2196, 2198, 2203, 2211, 2218, 3217, 2242, 2225,

     2227, 2232, 2234, 2244, 2249, 2258, 2264, 3217, 2279, 2270,
     2105, 2288, 2250, 2289, 2290, 2295, 2301, 3217, 2307, 2315,
     3217, 2324, 2331, 2337,  596,    0, 2343,  598, 2348, 3217,
     2351, 3217,  572,  546, 2354, 3217,  529, 2355, 2361, 3217,
     2397, 2309, 2367, 2373, 2379, 3217, 2438, 2381, 3217, 2386,
     2388, 2403, 2405, 2413, 2418, 2420, 2426, 2365, 2448, 3217,
     2459, 2407, 2427, 2209, 2440, 2460, 2475, 3217, 2482, 2488,
     3217, 2500,  506, 2494, 3217,  488,  472,  467,  509, 2501,
     2540, 2468, 2510, 3217, 2581, 2512, 2518, 2523, 2529, 2531,
     2546, 2548, 2560, 2561, 2533, 2461, 2568, 2516, 2562,  473,

      448,  452, 2590,  465, 2567, 2598, 2604, 2609, 2611, 2617,
     2623, 2625, 2631, 2639, 2647, 2629, 2659, 2651, 2502, 2640,
     2641,  434,  420,  417, 2668, 3217,  394, 2660, 2674, 2710,
     2682, 2684, 2692, 2697, 2704, 2716, 2732, 3217, 2738, 2747,
     3217, 2753, 2675, 2759, 3217, 2765, 2618, 2739, 2740, 2771,
      377,  360,  401,  355, 2772, 2780, 2787, 2789, 2794, 2796,
     2801, 2809, 3217, 2815, 2822, 3217, 2828, 2698, 2829, 2838,
     2844, 3217, 2852,  368, 2858,  356,  358, 2861, 2870, 2892,
     2875, 2877, 2883, 2845, 2898, 3217, 2918, 2889, 2924, 3217,
      346,  334, 2929, 3217, 2935, 2941, 3217, 2976, 2909, 2943,

     2951, 2802, 2949, 2959, 3217,  327,  313, 2962, 2964, 2981,
     2966,  306,  312, 2997, 3217, 3003, 2983, 3005, 2862,  288,
     3217, 3012, 3018, 2690,  306, 3020, 3025, 2781,  268, 3027,
     3032, 3034,  242, 3043, 3045, 3033,  235, 3050, 3060, 3066,
      219, 3073, 3080, 3217, 3086,  214, 3088,  189, 3094,  169,
      128,  131,  112,  108,   79,   57, 3101, 3104, 3217, 3217,
     3136, 3141, 3146, 3151, 3156, 3161, 3166, 3171, 3176, 3179,
     3184, 3186, 3191, 3196, 3201, 3206, 3211
    } ;

static yyconst short int yy_def[978] =
    {   0,
      961,  961,  962,  962,  963,  963,  962,  962,  964,  964,
      965,  965,  960,  966,  960,  966,  967,  968,  966,  966,
      966,  966,  966,  966,  966,  966,  960,  969,  960,  960,
      960,  960,  960,  960,  960,  960,  970,  960,  960,  969,
      960,  960,  960,  960,  960,  960,  966,  966,  966,  966,
      966,  966,  966,  966,  967,  960,  971,  967,  967,  967,
      967,  967,  967,  968,  968,  968,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  969,  960,
      960,  960,  960,  960,  960,  960,  960,  960,  960,  970,
      970,  970,  969,  960,  966,  966,  966,  966,  966,  967,

      971,  971,  971,  971,  971,  971,  971,  967,  967,  967,
      967,  967,  967,  968,  968,  968,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  960,  960,  960,  960,
      960,  960,  960,  960,  960,  960,  970,  970,  969,  960,
      966,  966,  966,  966,  966,  967,  971,  971,  971,  971,
      971,  971,  971,  971,  971,  971,  971,  967,  967,  967,
      967,  967,  967,  968,  968,  968,  968,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  960,  960,  960,  960,  960,  960,  960,  960,
      960,  960,  970,  970,  969,  960,  966,  966,  966,  966,

      966,  967,  971,  971,  971,  971,  971,  971,  971,  971,
      971,  971,  971,  967,  967,  967,  967,  967,  967,  968,
      968,  968,  968,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  960,  960,
      960,  960,  960,  960,  960,  960,  960,  960,  960,  960,
      970,  970,  969,  960,  966,  966,  966,  966,  966,  967,
      971,  971,  971,  971,  971,  971,  971,  971,  971,  971,
      971,  967,  967,  967,  967,  967,  967,  968,  968,  968,
      968,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  960,  960,  960,  960,

      960,  960,  960,  960,  970,  972,  969,  960,  966,  966,
      966,  966,  966,  967,  971,  971,  971,  960,  971,  971,
      971,  971,  971,  971,  971,  971,  971,  967,  967,  967,
      967,  967,  967,  967,  968,  968,  968,  968,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  960,  960,  960,  960,  960,  960,  960,
      960,  960,  960,  960,  960,  960,  960,  970,  960,  972,
      972,  969,  960,  966,  966,  966,  960,  966,  966,  966,
      967,  971,  971,  971,  971,  971,  971,  971,  971,  971,
      971,  967,  967,  967,  967,  967,  967,  967,  968,  968,

      968,  968,  966,  966,  966,  966,  966,  960,  966,  966,
      966,  960,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  960,  960,  960,  960,  960,  970,  960,
      960,  960,  960,  960,  960,  960,  960,  960,  972,  969,
      960,  966,  966,  966,  960,  966,  966,  967,  971,  971,
      971,  971,  971,  971,  971,  971,  971,  971,  967,  967,
      967,  967,  967,  967,  967,  968,  968,  968,  968,  966,
      966,  966,  966,  960,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  960,  966,  960,  960,
      960,  970,  960,  960,  960,  960,  960,  960,  960,  960,

      960,  960,  972,  969,  960,  966,  966,  966,  967,  971,
      971,  971,  960,  971,  971,  971,  971,  971,  971,  971,
      960,  971,  971,  967,  967,  973,  967,  967,  967,  967,
      968,  968,  968,  968,  968,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  960,  960,
      960,  960,  972,  960,  960,  960,  960,  960,  960,  960,
      960,  960,  960,  972,  969,  960,  966,  966,  966,  960,
      966,  967,  967,  971,  971,  971,  971,  971,  960,  971,
      971,  971,  971,  967,  967,  973,  960,  973,  973,  973,
      967,  967,  967,  967,  968,  968,  968,  966,  966,  966,

      966,  960,  966,  966,  966,  966,  966,  960,  966,  966,
      966,  966,  966,  966,  960,  960,  960,  369,  960,  960,
      960,  960,  960,  960,  960,  960,  960,  960,  960,  972,
      974,  960,  966,  966,  960,  966,  971,  971,  960,  971,
      971,  971,  971,  971,  971,  967,  967,  973,  973,  967,
      967,  967,  967,  968,  968,  968,  966,  966,  966,  960,
      966,  966,  966,  960,  966,  966,  966,  960,  966,  966,
      966,  966,  960,  966,  966,  960,  960,  960,  960,  960,
      975,  960,  960,  960,  960,  960,  960,  960,  974,  960,
      960,  966,  971,  971,  971,  971,  971,  960,  971,  971,

      976,  967,  973,  973,  967,  967,  967,  960,  967,  967,
      968,  968,  968,  966,  966,  966,  966,  960,  966,  966,
      960,  966,  966,  966,  960,  975,  960,  960,  960,  960,
      960,  960,  960,  960,  960,  960,  960,  966,  971,  960,
      971,  971,  971,  971,  971,  960,  971,  976,  960,  976,
      976,  967,  973,  973,  967,  967,  967,  968,  968,  960,
      968,  968,  968,  966,  966,  966,  966,  960,  966,  966,
      960,  966,  960,  960,  960,  960,  960,  960,  960,  966,
      971,  971,  971,  960,  971,  976,  976,  967,  973,  973,
      967,  967,  967,  968,  968,  968,  966,  966,  966,  960,

      960,  960,  960,  960,  966,  971,  971,  976,  976,  967,
      973,  973,  967,  967,  967,  968,  968,  968,  966,  966,
      966,  960,  960,  960,  960,  960,  960,  966,  971,  971,
      976,  976,  967,  973,  973,  967,  967,  960,  967,  967,
      960,  967,  968,  968,  960,  968,  968,  966,  966,  966,
      960,  960,  960,  960,  966,  971,  971,  976,  976,  967,
      973,  973,  960,  973,  967,  960,  967,  968,  968,  966,
      966,  960,  966,  960,  960,  960,  960,  966,  971,  971,
      976,  976,  973,  968,  966,  960,  966,  977,  960,  960,
      960,  960,  966,  960,  966,  971,  960,  971,  976,  976,

      973,  968,  977,  977,  960,  960,  960,  976,  976,  973,
      968,  960,  960,  976,  960,  976,  976,  973,  968,  960,
      960,  976,  973,  968,  960,  976,  973,  968,  960,  976,
      973,  968,  960,  976,  973,  968,  960,  976,  973,  968,
      960,  976,  968,  960,  968,  960,  976,  960,  976,  960,
      960,  960,  960,  960,  960,  960,  960,  960,  960,    0,
      960,  960,  960,  960,  960,  960,  960,  960,  960,  960,
      960,  960,  960,  960,  960,  960,  960
    } ;

static yyconst short int yy_nxt[3269] =
    {   0,
      960,  960,   15,   16,   17,   18,   19,   20,   21,   37,
      960,   37,   38,   39,   38,   39,   42,   48,   42,  960,
       49,   43,   44,   43,   44,   22,   56,  960,   65,   48,
       23,   66,   49,   67,  960,   48,   49,   24,   49,   92,
       25,   26,   15,   16,   17,   18,   19,   20,   21,   50,
       48,  253,   82,   49,   48,   68,   70,   49,   69,   69,
       83,   48,  960,   51,   49,   22,   52,   53,   54,   48,
       23,   48,   49,   56,   49,   93,   89,   24,  127,   69,
       25,   26,   28,   56,  128,   29,   30,   48,   81,   81,
       49,  137,   48,  960,   73,   49,   74,   56,   71,   72,

       81,   81,   91,  957,   31,   92,   32,   33,   75,   81,
       76,  956,   77,   34,   35,   78,   81,   81,  195,   36,
       28,   81,  305,   29,   30,   48,   67,   95,   49,   49,
       49,   48,   48,  440,   49,   49,   48,   81,   48,   49,
       65,   49,   31,   66,   32,   33,   56,  100,  955,  960,
       59,   34,   35,  116,  954,  953,   66,   36,   56,   57,
       58,   98,   59,   53,  952,   56,  102,   97,   48,  103,
       96,   49,   56,  100,  251,   99,   59,   60,   92,   56,
      109,  108,   61,   59,   56,   62,   56,  100,   63,  104,
       59,  105,  106,   56,  100,   56,  100,   59,   56,   59,

       65,   56,  100,   66,  107,   59,  122,   48,  110,   48,
       49,  951,   49,   69,   69,  307,   48,  504,   48,   49,
      114,   49,   69,   69,   48,  112,  950,   49,   48,  111,
      117,   49,  960,   48,   69,  113,   49,   48,  115,  118,
       49,   48,  948,   69,   49,   53,   56,   48,   48,  119,
       49,   49,   81,   81,  120,   81,   81,  130,  139,  946,
      131,   92,  124,   48,   48,  138,   49,   49,   48,   48,
      121,   49,   49,   81,   48,  941,   81,   49,  123,  164,
       56,  100,   66,  126,   59,  937,  125,   56,  102,   56,
      152,  103,  499,  103,  933,  145,  141,   48,   56,  102,

       49,   53,  103,  143,  500,  142,   56,  102,  144,  929,
      103,   56,  102,   56,  100,  103,  925,   59,  921,  146,
       56,  102,   56,  102,  103,   56,  103,   48,   56,  100,
       49,  153,   59,  147,   56,  148,  920,  159,  168,  149,
      913,  155,  154,   56,  100,   56,  100,   59,  156,   59,
       65,  912,  146,   66,  158,  150,   56,  100,  169,  151,
       59,  565,  157,   56,  100,   48,   48,   59,   49,   49,
       65,  907,  372,   66,   48,  165,   48,   49,  161,   49,
       48,  160,  906,   49,   48,  163,  892,   49,  891,  162,
      114,  166,   48,  167,  960,   49,  888,  877,   48,   48,

      960,   49,   49,  170,  876,  174,  875,  171,  115,   48,
      172,   48,   49,  874,   49,  173,  175,   48,  854,  197,
       49,  194,   48,   92,  225,   49,  193,  138,   48,   92,
      198,   49,  199,  176,  182,   56,  100,   56,  102,   59,
      177,  103,   65,   56,  853,   66,  200,   56,  102,  178,
      179,  103,  852,  366,  180,  181,   56,  102,  851,  203,
      103,  202,  201,   56,  102,  205,  367,  103,   56,  102,
      827,  631,  103,   56,  102,   56,  102,  103,  204,  103,
      824,  221,  206,   56,  102,   56,  102,  103,  823,  103,
       65,   56,  102,   66,  156,  103,  239,  240,  239,  207,

       56,  102,  210,  209,  103,   56,  100,   56,  100,   59,
      822,   59,  804,  147,  803,  148,  211,   56,  100,  149,
      802,   59,   56,  100,  208,  212,   59,   56,  100,  213,
      801,   59,  222,  214,  800,  150,   56,  100,  779,  151,
       59,   65,   65,   48,   66,   66,   49,   48,   48,  215,
       49,   49,  216,  218,   48,  960,   48,   49,  217,   49,
      230,  114,  220,   49,  219,   48,   48,   48,   49,   49,
       49,   48,  369,  227,   49,  228,  369,  224,   48,  115,
      306,   49,   48,  223,   92,   49,  226,  232,  778,   48,
      231,  229,   49,   48,  960,  371,   49,  369,  236,  371,

      233,  245,  246,  245,  777,   48,   48,  234,   49,   49,
       48,  235,   48,   49,  618,   49,   48,  237,  564,   49,
      371,  252,  776,   92,   56,  100,   56,  102,   59,  238,
      103,  773,  737,  258,   56,  102,  255,  371,  103,  690,
      256,   56,  102,   56,  102,  103,  734,  103,   65,  257,
      733,   66,   56,  102,  259,  263,  103,   56,  102,   65,
      261,  103,   66,  728,  260,   56,  102,  262,  727,  103,
       56,  102,  279,  264,  103,   56,  102,  725,  691,  103,
       56,  102,   56,  102,  103,  690,  103,  265,  280,   56,
      100,   56,  100,   59,  688,   59,  687,   56,  100,  266,

      268,   59,  267,   56,  100,  270,  686,   59,  269,   56,
      100,   56,  100,   59,   65,   59,  685,   66,  271,  272,
       65,  282,  684,   66,   49,   48,  273,  274,   49,   48,
      285,   48,   49,   49,   49,   48,  683,  277,   49,  276,
      369,  275,   48,  288,  682,   49,   48,   48,   48,   49,
       49,   49,   48,  681,  281,   49,  278,   48,   48,  283,
       49,   49,   48,  371,  284,   49,   48,  439,   48,   49,
      286,   49,  287,  289,  369,  290,  239,  240,  239,  678,
       53,  245,  246,  245,  294,   48,  292,  296,   49,   48,
      291,   48,   49,  295,   49,   48,  293,  371,   49,   56,

      100,   56,  102,   59,  632,  103,  310,   56,  102,   65,
      309,  103,   66,  629,  311,  317,  318,  319,   56,  102,
      103,  628,  103,  338,  314,   48,   66,  313,   49,  312,
      336,  315,   56,  102,   56,  102,  103,  627,  103,  626,
      316,   56,  102,   56,  102,  103,  320,  103,   56,  102,
       56,  102,  103,  343,  103,   56,  102,   56,  100,  103,
      625,   59,   56,  329,   56,  100,   59,  624,   59,  322,
       65,  321,  326,   66,  325,  623,  324,  620,  323,   56,
      100,   56,  100,   59,  619,   59,  615,  327,   65,   56,
      100,   66,  328,   59,  337,   48,  333,  566,   49,  330,

       48,   48,  563,   49,   49,   48,  342,   48,   49,  331,
       49,   48,  562,   48,   49,  332,   49,  335,  561,   48,
      960,  339,   49,  334,  340,   48,   48,   48,   49,   49,
       49,   48,  344,   53,   49,  560,   48,   48,  341,   49,
       49,  559,  558,   53,  347,  356,  357,  356,  346,   92,
      557,  349,  350,  368,  351,  556,  348,  345,  358,  359,
      358,  360,  361,  360,  353,  362,  363,  362,  364,  365,
      364,   48,   48,   48,   49,   49,   49,  555,  352,  376,
      377,  378,   48,  554,   49,   49,   56,  100,   56,  102,
       59,  552,  103,   65,   56,  102,   66,  374,  103,   65,

      551,  379,   66,  380,  375,   56,  102,  505,  381,  103,
      383,  317,  318,  319,   56,  102,  103,  399,  103,  502,
      960,  382,  317,  318,  319,   56,  386,  103,  501,  103,
       48,   56,  102,   49,  384,  103,  147,  400,  148,   56,
      102,  429,  149,  103,   56,  102,   56,  102,  103,   92,
      103,   56,  102,  387,  385,  103,   56,  100,  150,  403,
       59,  498,  151,   56,  100,  410,  497,   59,   49,  389,
       56,  100,  388,  392,   59,   56,  100,  391,  496,   59,
       56,  100,   56,  100,   59,  390,   59,  495,   56,  100,
      393,   65,   59,   65,   66,  494,   66,   48,  394,  493,

       49,  491,  146,  397,  396,  425,  426,  425,   48,  395,
      398,   49,   48,  114,  490,   49,  407,  408,  409,  402,
      404,   49,  411,  412,  413,   48,   48,   49,   49,   49,
      401,  115,   48,  405,   48,   49,   48,   49,   48,   49,
      489,   49,   48,  415,   48,   49,  441,   49,  356,  357,
      356,  358,  359,  358,  428,  416,  427,  417,  406,  414,
      360,  361,  360,  424,  418,  362,  363,  362,  373,  423,
      364,  365,  364,  420,  422,  355,  419,  421,  430,   48,
      431,  432,   49,   48,  433,  434,   49,  354,   48,  435,
      436,   49,  437,  308,  376,  377,  378,  369,  438,   49,

      376,  377,  378,  304,  443,   49,  444,  445,  446,   56,
      100,   49,  503,   59,  442,   56,  102,   56,  102,  103,
      371,  103,   56,  102,   56,  102,  103,  447,  103,   56,
      102,   56,  102,  103,  303,  103,  302,   56,  102,  450,
       53,  103,   65,   56,  102,   66,  452,  103,  448,   65,
       56,  102,   66,  301,  103,   56,  100,  455,   65,   59,
      449,   66,  451,   56,  102,   65,  300,  103,   66,  454,
       48,  299,  457,   49,  456,  458,  147,  467,  148,   56,
      100,  466,  149,   59,   56,  100,  468,  298,   59,   48,
      453,  461,   49,  459,  469,   56,  100,  297,  150,   59,

       56,  100,  151,  254,   59,  471,   56,  100,  250,  460,
       59,   56,  100,  472,  249,   59,   49,  462,  248,  473,
      474,  475,  247,  470,   49,  407,  408,  409,  463,  244,
       49,  243,  464,  407,  408,  409,   48,  476,   49,   49,
      411,  412,  413,  242,  241,   49,  411,  412,  413,   48,
      465,   49,   49,   48,   48,   48,   49,   49,   49,   48,
       48,   48,   49,   49,   49,   48,   48,  196,   49,   49,
      486,  487,  488,   53,   53,   49,  480,  425,  426,  425,
      960,   48,  478,  369,   49,  960,   53,  485,  477,  479,
      482,  192,  483,   48,  481,  191,   49,  484,  444,  445,

      446,   48,  630,   49,   49,   65,  371,  492,   66,   92,
      553,  444,  445,  446,   92,  506,   49,   56,  100,   56,
      102,   59,  190,  103,   56,  102,  508,  189,  103,  512,
      513,  514,  507,  531,  103,  510,   56,  102,   56,  102,
      103,  188,  103,   56,  102,  187,  509,  103,   56,  102,
      186,   53,  103,   56,  102,  185,  184,  103,  511,  520,
      521,  522,   56,  102,  103,  183,  103,   65,  516,  140,
       66,  515,  517,  518,  136,  519,   56,  100,   56,  100,
       59,  135,   59,   56,  526,  134,  133,   59,   56,  100,
      132,  129,   59,   56,  100,   65,   56,   59,   66,  523,

       56,  100,   56,  100,   59,  534,   59,   94,   80,  532,
      445,  533,  524,  525,   66,   48,  527,   48,   49,  528,
       49,   48,  538,   80,   49,  473,  474,  475,  529,  535,
       49,  473,  474,  475,  530,   48,   49,  540,   49,  536,
       49,   48,   48,   48,   49,   49,   49,   48,   88,   48,
       49,  537,   49,   48,   48,   48,   49,   49,   49,   53,
      486,  487,  488,   48,   87,   49,   49,  486,  487,  488,
       86,   53,   49,  545,  542,   48,  544,   85,   49,  543,
       56,  102,  539,  546,  103,   84,  541,   80,  547,  549,
      550,  549,  548,  569,  570,  571,   65,   56,   49,   66,

      568,  960,  567,  572,  521,  573,  575,   53,   59,   56,
      102,   46,   46,  103,  512,  513,  514,   56,  102,  103,
      597,  103,   56,  102,   56,  102,  103,   65,  103,   40,
       66,  574,  512,  513,  514,   40,  960,  103,  578,  579,
      580,   48,  576,  103,   49,  960,  147,  960,  148,   56,
      102,  960,  149,  103,  520,  521,  522,  577,  960,  103,
      960,  581,   56,  102,  960,  595,  103,  598,  150,   56,
      100,  960,  151,   59,   56,  100,  587,  588,   59,  960,
      589,   56,  100,   65,  583,   59,   66,  960,  960,  582,
      520,  521,  522,   56,  100,  103,  960,   59,   48,  585,

      592,   49,  584,  960,  147,  960,  148,  591,   56,  100,
      149,  596,   59,   56,  100,  590,   48,   59,   48,   49,
      594,   49,  532,  445,  533,   48,  150,   66,   49,  960,
      151,  532,  445,  533,   48,  960,   66,   49,  593,  601,
      602,  603,  960,  960,   49,  600,  607,  608,  609,   48,
      605,   49,   49,  114,  599,   48,  604,   48,   49,   48,
       49,   48,   49,  960,   49,  549,  550,  549,  960,  606,
      960,  115,  616,  617,  616,  621,  622,  621,  633,  960,
      960,   49,  614,  610,  634,  635,  636,   56,  102,   49,
      612,  103,   65,  960,  611,   66,  613,  569,  570,  571,

      960,  960,   49,  569,  570,  571,  960,  960,   49,  572,
      521,  573,  960,  960,   59,  572,  521,  573,  656,  960,
       59,  637,  638,  639,  640,   56,  102,  103,  960,  103,
       65,   56,  102,   66,  960,  103,  578,  579,  580,   65,
      960,  103,   66,   53,   56,  102,  960,  641,  103,   56,
      102,   48,  960,  103,   49,  146,  642,  578,  579,  580,
       56,  102,  103,  960,  103,  655,  643,  654,   56,  100,
      960,  147,   59,  148,  960,   56,  100,  149,  644,   59,
      587,  588,  587,  588,  589,  960,  589,  587,  648,   48,
      658,  589,   49,  150,  587,  588,   48,  151,  589,   49,

      645,  960,  647,  960,  646,   56,  100,   56,  100,   59,
      960,   59,  650,   56,  100,   56,  100,   59,  960,   59,
      649,  590,   48,  960,  657,   49,  659,  660,  661,  675,
      651,   49,  601,  602,  603,  960,  960,   49,  653,  601,
      602,  603,   48,   48,   49,   49,   49,  662,  652,  663,
      664,  665,  960,  960,   49,  607,  608,  609,  960,  960,
       49,  607,  608,  609,  960,  960,   49,  667,  668,  669,
      670,   48,   49,  960,   49,  960,  672,  673,  674,   53,
      666,   49,  676,  677,  676,  616,  617,  616,  679,  680,
      679,  621,  622,  621,   48,   56,  102,   49,  960,  103,

      671,   53,  634,  635,  636,  960,  960,   49,  634,  635,
      636,  960,  960,   49,  638,  639,  640,   65,  960,  103,
       66,  693,   56,  102,   56,  102,  103,  960,  103,   56,
      102,  960,  692,  103,  697,  698,  699,   56,  102,  103,
      960,  103,   56,  100,   65,  960,   59,   66,   53,  638,
      639,  640,  711,  960,  103,  960,  695,   56,  100,   48,
      694,   59,   49,  147,  696,  148,  700,  587,  588,  149,
      701,  589,  587,  588,   56,  100,  589,  960,   59,   56,
      100,   65,  960,   59,   66,  150,  712,   48,  960,  151,
       49,  703,  960,  702,  707,  708,  709,  705,  716,   59,

       56,  100,  960,  960,   59,  706,  590,   48,   65,  960,
       49,   66,  704,  659,  660,  661,  713,   48,   49,  960,
       49,  714,  659,  660,  661,  960,  710,   49,  663,  664,
      665,  960,  960,   49,  663,  664,  665,  960,  960,   49,
      717,  718,  719,  960,  715,   49,  667,  668,  669,  960,
      758,   49,  667,  668,  669,  960,  723,   49,  720,  721,
      722,  960,   53,   49,  672,  673,  674,  960,  960,   49,
      672,  673,  674,   48,   53,   49,   49,  676,  677,  676,
      679,  680,  679,  729,  730,  729,  731,  732,  731,  735,
      736,  735,   53,   48,  960,  960,   49,  739,  740,  741,

       56,  102,  103,  960,  103,   56,  102,  960,  960,  103,
       53,  724,  797,   56,  102,   49,  960,  103,  738,  697,
      698,  699,  960,  960,  103,  742,  745,  746,  747,  749,
      750,  103,  960,  751,   56,  100,  587,  588,   59,  960,
      589,  743,  744,  697,  698,  699,  587,  588,  103,  960,
      589,   56,  100,   65,  960,   59,   66,  147,  960,  148,
       56,  100,  960,  149,   59,  707,  708,  709,  960,  752,
       59,  754,   56,  100,  960,  960,   59,  755,  753,  150,
      707,  708,  709,  151,  960,   59,  960,  763,  756,  759,
      760,  761,   48,   48,   66,   49,   49,  960,   48,  960,

      757,   49,  717,  718,  719,  960,  960,   49,  717,  718,
      719,   56,  781,   49,  765,  103,  720,  721,  722,  762,
      146,   49,  200,  960,  766,  720,  721,  722,  960,  960,
       49,  764,  767,  768,  769,  960,  960,   49,  770,  771,
      772,  960,  960,   49,  774,  775,  774,  960,   53,  729,
      730,  729,  731,  732,  731,  735,  736,  735,   48,  960,
      960,   49,  739,  740,  741,   53,  960,  103,   65,   56,
      102,   66,  960,  103,  783,  784,  785,  960,  960,  103,
      745,  746,  747,  749,  750,  103,  960,  751,  749,  750,
      749,  787,  751,  960,  751,  960,  794,  780,  739,  740,

      741,  960,  960,  103,  782,   56,  100,  587,  588,   59,
       65,  589,  147,   66,  148,  587,  588,  960,  149,  589,
       56,  100,   56,  100,   59,  960,   59,  786,   56,  100,
       65,  960,   59,   66,  150,  795,  960,  790,  151,  745,
      746,  747,  789,   48,  103,  788,   49,  960,  791,  759,
      760,  761,  792,  147,   66,  148,  960,  960,  793,  149,
      759,  760,  761,   48,  818,   66,   49,   66,  960,  796,
       56,  102,  798,  960,  103,  150,  767,  768,  769,  151,
      960,   49,  114,  767,  768,  769,  960,  960,   49,  770,
      771,  772,  960,  960,   49,  774,  775,  774,  799,  960,

      115,  770,  771,  772,   48,  848,   49,   49,   49,  960,
      807,  783,  784,  785,  749,  750,  103,  960,  751,   48,
      749,  750,   49,   53,  751,   56,  810,  960,  200,   59,
      805,  587,  811,  587,  588,  589,   65,  589,  960,   66,
      808,   53,   56,  102,  809,  960,  103,  960,   56,  100,
       56,  100,   59,  820,   59,  147,  960,  148,  960,  786,
      960,  149,   56,  100,   65,   48,   59,   66,   49,  806,
       48,   48,  812,   49,   49,  960,  960,  150,  813,  817,
      960,  151,  783,  784,  785,  814,  960,  103,  960,  816,
      819,  825,  826,  825,  960,  960,  147,  815,  148,  821,

       56,  102,  149,  960,  103,  828,   56,  830,  960,   53,
      103,  749,  750,  749,  750,  751,  960,  751,  150,   56,
      100,  869,  151,   59,   66,  587,  588,  587,  588,  589,
      960,  589,   65,   56,  100,   66,  829,   59,  960,  833,
      837,  838,  839,   48,   48,   59,   49,   49,  840,  841,
      842,  831,  834,   59,   65,  832,  835,   66,  146,  960,
      844,  845,  846,   48,  590,   66,   49,  960,  836,  825,
      826,  825,  960,  847,  114,  843,   56,  102,   65,  960,
      103,   66,  849,  850,  749,  750,  749,  750,  751,  960,
      751,  960,  115,   65,   56,  860,   66,  855,   59,  587,

      588,   65,  960,  589,   66,  862,  863,  864,  960,  858,
      589,  856,   56,  102,  960,  960,  103,  865,  866,  867,
      868,  859,   59,  960,  960,  147,  960,  148,  960,  861,
      884,  149,  857,  837,  838,  839,  960,  928,   59,  837,
      838,  839,   48,   48,   59,   49,   49,  150,  840,  841,
      842,  151,  960,   59,  840,  841,  842,  960,  960,   59,
      844,  845,  846,  960,  960,   66,  844,  845,  846,  960,
      960,   66,  871,  872,  873,   48,  960,   49,   49,  146,
       53,  870,   56,  102,   65,  960,  103,   66,  114,   56,
      880,  749,  750,  103,  146,  751,  749,  882,   56,  100,

      751,  960,   59,  587,  588,   65,  115,  589,   66,  960,
      862,  863,  864,  881,  878,  589,  862,  863,  864,  960,
      932,  589,  879,  865,  866,  867,  960,  960,   59,  865,
      866,  867,   65,  911,   59,   66,  960,  146,  883,  885,
      886,  887,  960,  960,   49,  871,  872,  873,   65,  960,
       49,   66,  114,  871,  872,  873,  590,  960,   49,  889,
      890,  889,  893,  894,  895,   65,  960,   49,   66,  146,
      115,  896,  897,  898,  960,  960,  103,  749,  750,  749,
      750,  751,  960,  751,  960,  587,  588,  902,  960,  589,
      904,  905,  904,   53,   56,  102,  960,  924,  103,  885,

      886,  887,  960,  960,   49,  960,  900,  147,  960,  148,
      901,  749,  750,  149,  960,  751,  899,  960,  786,  885,
      886,  887,  960,  960,   49,  889,  890,  889,  960,  150,
      893,  894,  895,  151,  960,   49,  893,  894,  895,  960,
      908,   49,  896,  897,  898,  749,  750,  103,  960,  751,
      904,  905,  904,  587,  588,  960,  960,  589,  960,   53,
      904,  905,  904,  914,  915,  916,  749,  750,  751,   65,
      751,  960,   66,  960,  960,  909,   53,  896,  897,  898,
      910,  960,  103,  587,  588,  749,  750,  589,  960,  751,
      960,  147,  960,  148,  960,  960,  919,  149,  914,  915,

      916,  917,  960,  751,  914,  915,  916,  587,  588,  751,
      922,  589,  960,  150,  749,  750,  960,  151,  751,  918,
      587,  588,  749,  750,  589,  960,  751,  587,  931,  749,
      750,  589,  960,  751,  587,  588,   65,   65,  589,   66,
       66,  926,  923,  960,  786,  749,  750,  587,  939,  751,
      960,  589,  749,  942,  935,  960,  751,  960,  930,  960,
      927,  960,  587,  588,  934,  936,  589,  943,  944,  945,
      960,  960,   66,  590,  940,  749,  750,  960,  960,  751,
      960,  943,  944,  945,  960,  938,   66,  943,  944,  945,
      749,  949,   66,  960,  751,  947,  749,  750,  960,  960,

      751,  590,  958,  959,  958,  958,  959,  958,  960,  114,
      960,  960,  960,  960,  786,  960,  960,  960,  960,  960,
      960,  960,  960,  960,  960,  960,  960,  115,  960,  960,
      960,  960,  960,  960,  960,  786,   14,   14,   14,   14,
       14,   27,   27,   27,   27,   27,   15,   15,   15,   15,
       15,   41,   41,   41,   41,   41,   45,   45,   45,   45,
       45,   47,  960,   47,   47,   47,   55,   55,   55,   55,
       55,   64,  960,   64,   64,   64,   79,   79,   79,   79,
       79,   90,  960,   90,  101,  101,  101,  101,  101,  370,
      370,  586,  586,  586,  586,  586,  689,  689,  689,  689,

      689,  726,  960,  726,  726,  726,  748,  748,  748,  748,
      748,  903,  903,  903,  903,  903,   13,  960,  960,  960,
      960,  960,  960,  960,  960,  960,  960,  960,  960,  960,
      960,  960,  960,  960,  960,  960,  960,  960,  960,  960,
      960,  960,  960,  960,  960,  960,  960,  960,  960,  960,
      960,  960,  960,  960,  960,  960,  960,  960,  960,  960,
      960,  960,  960,  960,  960,  960,  960,  960
    } ;

static yyconst short int yy_chk[3269] =
    {   0,
        0,    0,    1,    1,    1,    1,    1,    1,    1,    5,
       90,    6,    5,    5,    6,    6,    9,   14,   10,    0,
       14,    9,    9,   10,   10,    1,  195,    0,   18,   16,
        1,   18,   16,   19,    0,   22,   19,    1,   22,   90,
        1,    1,    2,    2,    2,    2,    2,    2,    2,   16,
       20,  195,   31,   20,   21,   20,   22,   21,   21,   21,
       31,   23,   91,   16,   23,    2,   16,   16,   16,   24,
        2,   25,   24,   40,   25,   40,   37,    2,   82,   21,
        2,    2,    3,  139,   82,    3,    3,   26,   30,   30,
       26,   91,   47,  251,   24,   47,   25,  372,   23,   23,

       39,   39,   37,  956,    3,   37,    3,    3,   26,   30,
       26,  955,   26,    3,    3,   26,   44,   44,  139,    3,
        4,   39,  251,    4,    4,   48,   49,   50,   48,   49,
       50,   51,   52,  372,   51,   52,   53,   44,   54,   53,
       64,   54,    4,   64,    4,    4,   55,   55,  954,  193,
       55,    4,    4,   66,  953,  952,   66,    4,   17,   17,
       17,   53,   17,   48,  951,   57,   57,   52,   74,   57,
       51,   74,   58,   58,  193,   54,   58,   17,  193,   59,
       59,   58,   17,   59,  440,   17,   60,   60,   17,   57,
       60,   57,   57,   61,   61,   62,   62,   61,  253,   62,

       65,   63,   63,   65,   57,   63,   74,   67,   60,   68,
       67,  950,   68,   68,   68,  253,   70,  440,   69,   70,
       65,   69,   69,   69,   71,   62,  948,   71,   73,   61,
       67,   73,   92,   72,   68,   63,   72,   75,   65,   70,
       75,   76,  946,   69,   76,   67,   93,   77,   78,   71,
       77,   78,   80,   80,   72,   81,   81,   84,   93,  941,
       84,   92,   76,   95,   97,   92,   95,   97,   96,   98,
       73,   96,   98,   80,   99,  937,   81,   99,   75,  114,
      100,  100,  114,   78,  100,  933,   77,  101,  101,  103,
      103,  101,  436,  103,  929,   99,   95,  117,  104,  104,

      117,   95,  104,   97,  436,   96,  105,  105,   98,  925,
      105,  106,  106,  109,  109,  106,  920,  109,  913,  100,
      102,  102,  107,  107,  102,  504,  107,  118,  108,  108,
      118,  104,  108,  102,  307,  102,  912,  109,  117,  102,
      907,  106,  105,  110,  110,  111,  111,  110,  107,  111,
      115,  906,  109,  115,  108,  102,  112,  112,  118,  102,
      112,  504,  107,  113,  113,  119,  120,  113,  119,  120,
      116,  892,  307,  116,  121,  115,  122,  121,  111,  122,
      123,  110,  891,  123,  124,  113,  877,  124,  876,  112,
      116,  116,  126,  116,  137,  126,  874,  854,  141,  169,

      138,  141,  169,  119,  853,  123,  852,  120,  116,  142,
      121,  143,  142,  851,  143,  122,  124,  125,  827,  141,
      125,  138,  144,  137,  169,  144,  137,  137,  145,  138,
      142,  145,  143,  125,  126,  146,  146,  147,  147,  146,
      125,  147,  165,  565,  824,  165,  144,  148,  148,  125,
      125,  148,  823,  304,  125,  125,  149,  149,  822,  147,
      149,  146,  145,  150,  150,  148,  304,  150,  151,  151,
      804,  565,  151,  153,  153,  154,  154,  153,  147,  154,
      802,  165,  149,  155,  155,  156,  156,  155,  801,  156,
      166,  157,  157,  166,  151,  157,  183,  183,  183,  150,

      152,  152,  154,  153,  152,  158,  158,  159,  159,  158,
      800,  159,  779,  152,  778,  152,  155,  160,  160,  152,
      777,  160,  161,  161,  152,  156,  161,  162,  162,  157,
      776,  162,  166,  158,  773,  152,  163,  163,  737,  152,
      163,  164,  167,  168,  164,  167,  168,  170,  171,  159,
      170,  171,  160,  162,  172,  252,  173,  172,  161,  173,
      174,  164,  164,  174,  163,  175,  176,  177,  175,  176,
      177,  180,  306,  171,  180,  172,  370,  168,  178,  164,
      252,  178,  179,  167,  252,  179,  170,  176,  734,  181,
      175,  173,  181,  182,  194,  306,  182,  503,  180,  370,

      177,  188,  188,  188,  733,  197,  198,  178,  197,  198,
      199,  179,  200,  199,  553,  200,  201,  181,  503,  201,
      503,  194,  728,  194,  202,  202,  203,  203,  202,  182,
      203,  725,  691,  200,  204,  204,  197,  553,  204,  689,
      198,  205,  205,  206,  206,  205,  687,  206,  221,  199,
      686,  221,  207,  207,  201,  205,  207,  208,  208,  222,
      203,  208,  222,  683,  202,  209,  209,  204,  682,  209,
      210,  210,  221,  206,  210,  211,  211,  678,  632,  211,
      212,  212,  213,  213,  212,  631,  213,  207,  222,  214,
      214,  215,  215,  214,  629,  215,  628,  216,  216,  208,

      210,  216,  209,  217,  217,  212,  627,  217,  211,  218,
      218,  219,  219,  218,  220,  219,  626,  220,  213,  214,
      223,  224,  625,  223,  224,  225,  215,  216,  225,  226,
      227,  228,  226,  227,  228,  229,  624,  219,  229,  218,
      371,  217,  230,  230,  623,  230,  233,  231,  232,  233,
      231,  232,  234,  620,  223,  234,  220,  235,  237,  225,
      235,  237,  236,  371,  226,  236,  238,  371,  256,  238,
      228,  256,  229,  231,  630,  232,  239,  239,  239,  618,
      230,  245,  245,  245,  236,  255,  234,  238,  255,  257,
      233,  258,  257,  237,  258,  259,  235,  630,  259,  260,

      260,  261,  261,  260,  566,  261,  256,  262,  262,  279,
      255,  262,  279,  563,  257,  263,  263,  263,  264,  264,
      263,  562,  264,  281,  260,  286,  281,  259,  286,  258,
      279,  261,  265,  265,  266,  266,  265,  561,  266,  560,
      262,  267,  267,  268,  268,  267,  264,  268,  269,  269,
      270,  270,  269,  286,  270,  271,  271,  272,  272,  271,
      559,  272,  273,  273,  274,  274,  273,  558,  274,  266,
      280,  265,  270,  280,  269,  557,  268,  555,  267,  275,
      275,  276,  276,  275,  554,  276,  551,  271,  278,  277,
      277,  278,  272,  277,  280,  282,  277,  505,  282,  274,

      283,  284,  502,  283,  284,  285,  285,  287,  285,  275,
      287,  288,  501,  289,  288,  276,  289,  278,  500,  290,
      305,  282,  290,  277,  283,  291,  292,  293,  291,  292,
      293,  294,  287,  282,  294,  499,  295,  296,  284,  295,
      296,  498,  497,  285,  290,  299,  299,  299,  289,  305,
      496,  292,  293,  305,  294,  495,  291,  288,  300,  300,
      300,  301,  301,  301,  296,  302,  302,  302,  303,  303,
      303,  309,  310,  312,  309,  310,  312,  494,  295,  311,
      311,  311,  313,  493,  311,  313,  314,  314,  315,  315,
      314,  491,  315,  335,  316,  316,  335,  309,  316,  336,

      490,  312,  336,  313,  310,  320,  320,  441,  314,  320,
      316,  317,  317,  317,  321,  321,  317,  335,  321,  438,
      368,  315,  319,  319,  319,  322,  322,  319,  437,  322,
      339,  323,  323,  339,  320,  323,  319,  336,  319,  324,
      324,  368,  319,  324,  325,  325,  326,  326,  325,  368,
      326,  327,  327,  323,  321,  327,  328,  328,  319,  339,
      328,  435,  319,  329,  329,  344,  434,  329,  344,  325,
      330,  330,  324,  328,  330,  331,  331,  327,  433,  331,
      333,  333,  332,  332,  333,  326,  332,  432,  334,  334,
      329,  337,  334,  338,  337,  431,  338,  340,  330,  430,

      340,  428,  329,  333,  332,  355,  355,  355,  341,  331,
      334,  341,  342,  338,  427,  342,  343,  343,  343,  338,
      340,  343,  345,  345,  345,  346,  347,  345,  346,  347,
      337,  338,  348,  341,  349,  348,  350,  349,  352,  350,
      424,  352,  351,  347,  353,  351,  373,  353,  356,  356,
      356,  358,  358,  358,  367,  348,  366,  349,  342,  346,
      360,  360,  360,  354,  349,  362,  362,  362,  308,  353,
      364,  364,  364,  350,  352,  298,  349,  351,  369,  374,
      369,  369,  374,  375,  369,  369,  375,  297,  380,  369,
      369,  380,  369,  254,  376,  376,  376,  439,  369,  376,

      378,  378,  378,  250,  375,  378,  379,  379,  379,  381,
      381,  379,  439,  381,  374,  382,  382,  383,  383,  382,
      439,  383,  384,  384,  385,  385,  384,  380,  385,  387,
      387,  388,  388,  387,  249,  388,  248,  389,  389,  383,
      378,  389,  399,  390,  390,  399,  385,  390,  381,  400,
      391,  391,  400,  247,  391,  392,  392,  388,  401,  392,
      382,  401,  384,  386,  386,  402,  244,  386,  402,  387,
      404,  243,  390,  404,  389,  391,  386,  400,  386,  393,
      393,  399,  386,  393,  394,  394,  401,  242,  394,  403,
      386,  394,  403,  392,  402,  395,  395,  241,  386,  395,

      396,  396,  386,  196,  396,  404,  397,  397,  192,  393,
      397,  398,  398,  405,  191,  398,  405,  395,  190,  406,
      406,  406,  189,  403,  406,  407,  407,  407,  396,  187,
      407,  186,  397,  409,  409,  409,  410,  410,  409,  410,
      411,  411,  411,  185,  184,  411,  413,  413,  413,  414,
      398,  413,  414,  415,  416,  417,  415,  416,  417,  418,
      420,  419,  418,  420,  419,  421,  422,  140,  421,  422,
      423,  423,  423,  409,  410,  423,  417,  425,  425,  425,
      429,  442,  415,  564,  442,  492,  413,  422,  414,  416,
      419,  136,  420,  443,  418,  135,  443,  421,  444,  444,

      444,  447,  564,  444,  447,  466,  564,  429,  466,  429,
      492,  446,  446,  446,  492,  442,  446,  448,  448,  449,
      449,  448,  134,  449,  450,  450,  447,  133,  450,  451,
      451,  451,  443,  466,  451,  449,  452,  452,  453,  453,
      452,  132,  453,  454,  454,  131,  448,  454,  455,  455,
      130,  446,  455,  456,  456,  129,  128,  456,  450,  457,
      457,  457,  458,  458,  457,  127,  458,  468,  453,   94,
      468,  452,  454,  455,   89,  456,  459,  459,  460,  460,
      459,   88,  460,  461,  461,   87,   86,  461,  462,  462,
       85,   83,  462,  463,  463,  469,   79,  463,  469,  458,

      464,  464,  465,  465,  464,  468,  465,   46,   43,  467,
      467,  467,  459,  460,  467,  470,  462,  471,  470,  463,
      471,  472,  472,   38,  472,  473,  473,  473,  464,  469,
      473,  475,  475,  475,  465,  476,  475,  477,  476,  470,
      477,  478,  479,  480,  478,  479,  480,  481,   36,  482,
      481,  471,  482,  484,  483,  485,  484,  483,  485,  472,
      486,  486,  486,  506,   35,  486,  506,  488,  488,  488,
       34,  475,  488,  482,  479,  507,  481,   33,  507,  480,
      511,  511,  476,  483,  511,   32,  478,   29,  484,  489,
      489,  489,  485,  508,  508,  508,  535,   28,  508,  535,

      507,   13,  506,  509,  509,  509,  511,  488,  509,  510,
      510,   12,   11,  510,  512,  512,  512,  515,  515,  512,
      535,  515,  516,  516,  518,  518,  516,  531,  518,    8,
      531,  510,  514,  514,  514,    7,    0,  514,  517,  517,
      517,  536,  515,  517,  536,    0,  514,    0,  514,  519,
      519,    0,  514,  519,  520,  520,  520,  516,    0,  520,
        0,  518,  523,  523,    0,  531,  523,  536,  514,  524,
      524,    0,  514,  524,  525,  525,  526,  526,  525,    0,
      526,  527,  527,  534,  523,  527,  534,    0,    0,  519,
      522,  522,  522,  528,  528,  522,    0,  528,  538,  525,

      528,  538,  524,    0,  522,    0,  522,  527,  529,  529,
      522,  534,  529,  530,  530,  526,  537,  530,  540,  537,
      530,  540,  532,  532,  532,  541,  522,  532,  541,    0,
      522,  533,  533,  533,  542,    0,  533,  542,  529,  539,
      539,  539,    0,    0,  539,  538,  543,  543,  543,  544,
      541,  543,  544,  533,  537,  545,  540,  546,  545,  547,
      546,  548,  547,    0,  548,  549,  549,  549,    0,  542,
        0,  533,  552,  552,  552,  556,  556,  556,  567,    0,
        0,  567,  548,  544,  568,  568,  568,  574,  574,  568,
      546,  574,  597,    0,  545,  597,  547,  569,  569,  569,

        0,    0,  569,  571,  571,  571,    0,    0,  571,  572,
      572,  572,    0,    0,  572,  573,  573,  573,  597,    0,
      573,  574,  575,  575,  575,  576,  576,  575,    0,  576,
      596,  577,  577,  596,    0,  577,  578,  578,  578,  595,
        0,  578,  595,  571,  581,  581,    0,  576,  581,  582,
      582,  599,    0,  582,  599,  573,  577,  580,  580,  580,
      583,  583,  580,    0,  583,  596,  581,  595,  584,  584,
        0,  580,  584,  580,    0,  585,  585,  580,  582,  585,
      586,  586,  588,  588,  586,    0,  588,  589,  589,  598,
      599,  589,  598,  580,  590,  590,  614,  580,  590,  614,

      583,    0,  585,    0,  584,  591,  591,  592,  592,  591,
        0,  592,  591,  593,  593,  594,  594,  593,    0,  594,
      590,  588,  604,    0,  598,  604,  600,  600,  600,  614,
      592,  600,  601,  601,  601,    0,    0,  601,  594,  603,
      603,  603,  611,  606,  603,  611,  606,  604,  593,  605,
      605,  605,    0,    0,  605,  607,  607,  607,    0,    0,
      607,  609,  609,  609,    0,    0,  609,  610,  610,  610,
      611,  612,  610,    0,  612,    0,  613,  613,  613,  603,
      606,  613,  615,  615,  615,  616,  616,  616,  619,  619,
      619,  621,  621,  621,  633,  637,  637,  633,    0,  637,

      612,  609,  634,  634,  634,    0,    0,  634,  636,  636,
      636,    0,    0,  636,  638,  638,  638,  654,    0,  638,
      654,  637,  641,  641,  643,  643,  641,    0,  643,  642,
      642,    0,  633,  642,  644,  644,  644,  645,  645,  644,
        0,  645,  646,  646,  655,    0,  646,  655,  636,  640,
      640,  640,  654,    0,  640,    0,  642,  647,  647,  662,
      641,  647,  662,  640,  643,  640,  645,  648,  648,  640,
      646,  648,  649,  649,  650,  650,  649,    0,  650,  651,
      651,  656,    0,  651,  656,  640,  655,  657,    0,  640,
      657,  648,    0,  647,  652,  652,  652,  650,  662,  652,

      653,  653,    0,    0,  653,  651,  648,  658,  711,    0,
      658,  711,  649,  659,  659,  659,  656,  671,  659,    0,
      671,  657,  661,  661,  661,    0,  653,  661,  663,  663,
      663,    0,    0,  663,  665,  665,  665,    0,    0,  665,
      666,  666,  666,    0,  658,  666,  667,  667,  667,    0,
      711,  667,  669,  669,  669,    0,  671,  669,  670,  670,
      670,    0,  661,  670,  672,  672,  672,    0,    0,  672,
      674,  674,  674,  675,  665,  674,  675,  676,  676,  676,
      679,  679,  679,  684,  684,  684,  685,  685,  685,  688,
      688,  688,  669,  692,    0,    0,  692,  693,  693,  693,

      694,  694,  693,    0,  694,  695,  695,    0,    0,  695,
      674,  675,  764,  696,  696,  764,    0,  696,  692,  697,
      697,  697,    0,    0,  697,  694,  700,  700,  700,  701,
      701,  700,    0,  701,  702,  702,  703,  703,  702,    0,
      703,  695,  696,  699,  699,  699,  704,  704,  699,    0,
      704,  705,  705,  713,    0,  705,  713,  699,    0,  699,
      706,  706,    0,  699,  706,  707,  707,  707,    0,  702,
      707,  704,  710,  710,    0,    0,  710,  705,  703,  699,
      709,  709,  709,  699,    0,  709,    0,  713,  706,  712,
      712,  712,  714,  715,  712,  714,  715,    0,  716,    0,

      710,  716,  717,  717,  717,    0,    0,  717,  719,  719,
      719,  742,  742,  719,  715,  742,  720,  720,  720,  712,
      709,  720,  716,    0,  716,  722,  722,  722,    0,    0,
      722,  714,  723,  723,  723,    0,    0,  723,  724,  724,
      724,    0,    0,  724,  727,  727,  727,    0,  719,  729,
      729,  729,  731,  731,  731,  735,  735,  735,  738,    0,
        0,  738,  739,  739,  739,  722,    0,  739,  758,  743,
      743,  758,    0,  743,  744,  744,  744,    0,    0,  744,
      745,  745,  745,  748,  748,  745,    0,  748,  750,  750,
      751,  751,  750,    0,  751,    0,  758,  738,  741,  741,

      741,    0,    0,  741,  743,  752,  752,  753,  753,  752,
      762,  753,  741,  762,  741,  754,  754,    0,  741,  754,
      755,  755,  756,  756,  755,    0,  756,  750,  757,  757,
      763,    0,  757,  763,  741,  762,    0,  754,  741,  747,
      747,  747,  753,  765,  747,  752,  765,    0,  755,  759,
      759,  759,  756,  747,  759,  747,    0,    0,  757,  747,
      761,  761,  761,  766,  796,  761,  766,  796,    0,  763,
      782,  782,  765,    0,  782,  747,  767,  767,  767,  747,
        0,  767,  761,  769,  769,  769,    0,    0,  769,  770,
      770,  770,    0,    0,  770,  774,  774,  774,  766,    0,

      761,  772,  772,  772,  780,  819,  772,  780,  819,    0,
      782,  783,  783,  783,  786,  786,  783,    0,  786,  798,
      787,  787,  798,  769,  787,  788,  788,    0,  780,  788,
      780,  789,  789,  790,  790,  789,  795,  790,    0,  795,
      786,  772,  781,  781,  787,    0,  781,    0,  791,  791,
      792,  792,  791,  798,  792,  781,    0,  781,    0,  787,
        0,  781,  793,  793,  794,  799,  793,  794,  799,  781,
      805,  797,  790,  805,  797,    0,    0,  781,  791,  795,
        0,  781,  785,  785,  785,  792,    0,  785,    0,  794,
      797,  803,  803,  803,    0,    0,  785,  793,  785,  799,

      806,  806,  785,    0,  806,  805,  807,  807,    0,  797,
      807,  808,  808,  809,  809,  808,    0,  809,  785,  810,
      810,  847,  785,  810,  847,  811,  811,  812,  812,  811,
        0,  812,  816,  813,  813,  816,  806,  813,    0,  810,
      814,  814,  814,  820,  821,  814,  820,  821,  815,  815,
      815,  808,  811,  815,  818,  809,  812,  818,  810,    0,
      817,  817,  817,  828,  811,  817,  828,    0,  813,  825,
      825,  825,    0,  818,  818,  816,  829,  829,  843,    0,
      829,  843,  820,  821,  831,  831,  832,  832,  831,    0,
      832,    0,  818,  924,  833,  833,  924,  828,  833,  834,

      834,  868,    0,  834,  868,  835,  835,  835,    0,  831,
      835,  829,  830,  830,    0,    0,  830,  836,  836,  836,
      843,  832,  836,    0,    0,  830,    0,  830,    0,  834,
      868,  830,  830,  837,  837,  837,    0,  924,  837,  839,
      839,  839,  848,  849,  839,  848,  849,  830,  840,  840,
      840,  830,    0,  840,  842,  842,  842,    0,    0,  842,
      844,  844,  844,    0,    0,  844,  846,  846,  846,    0,
        0,  846,  850,  850,  850,  855,    0,  850,  855,  839,
      848,  849,  856,  856,  928,    0,  856,  928,  846,  857,
      857,  858,  858,  857,  842,  858,  859,  859,  860,  860,

      859,    0,  860,  861,  861,  902,  846,  861,  902,    0,
      862,  862,  862,  858,  855,  862,  864,  864,  864,    0,
      928,  864,  856,  865,  865,  865,    0,    0,  865,  867,
      867,  867,  869,  902,  867,  869,    0,  860,  861,  870,
      870,  870,    0,    0,  870,  871,  871,  871,  884,    0,
      871,  884,  869,  873,  873,  873,  864,    0,  873,  875,
      875,  875,  878,  878,  878,  919,    0,  878,  919,  867,
      869,  879,  879,  879,    0,    0,  879,  881,  881,  882,
      882,  881,    0,  882,    0,  883,  883,  884,    0,  883,
      888,  888,  888,  873,  880,  880,    0,  919,  880,  885,

      885,  885,    0,    0,  885,    0,  882,  880,    0,  880,
      883,  899,  899,  880,    0,  899,  881,    0,  882,  887,
      887,  887,    0,    0,  887,  889,  889,  889,    0,  880,
      893,  893,  893,  880,    0,  893,  895,  895,  895,    0,
      899,  895,  896,  896,  896,  900,  900,  896,    0,  900,
      903,  903,  903,  901,  901,    0,    0,  901,    0,  887,
      904,  904,  904,  908,  908,  908,  909,  909,  908,  911,
      909,    0,  911,    0,    0,  900,  895,  898,  898,  898,
      901,    0,  898,  910,  910,  917,  917,  910,    0,  917,
        0,  898,    0,  898,    0,    0,  911,  898,  914,  914,

      914,  909,    0,  914,  916,  916,  916,  918,  918,  916,
      917,  918,    0,  898,  922,  922,    0,  898,  922,  910,
      923,  923,  926,  926,  923,    0,  926,  927,  927,  930,
      930,  927,    0,  930,  931,  931,  936,  932,  931,  936,
      932,  922,  918,    0,  916,  934,  934,  935,  935,  934,
        0,  935,  938,  938,  931,    0,  938,    0,  926,    0,
      923,    0,  939,  939,  930,  932,  939,  940,  940,  940,
        0,    0,  940,  931,  936,  942,  942,    0,    0,  942,
        0,  943,  943,  943,    0,  934,  943,  945,  945,  945,
      947,  947,  945,    0,  947,  942,  949,  949,    0,    0,

      949,  939,  957,  957,  957,  958,  958,  958,    0,  945,
        0,    0,    0,    0,  942,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  945,    0,    0,
        0,    0,    0,    0,    0,  949,  961,  961,  961,  961,
      961,  962,  962,  962,  962,  962,  963,  963,  963,  963,
      963,  964,  964,  964,  964,  964,  965,  965,  965,  965,
      965,  966,    0,  966,  966,  966,  967,  967,  967,  967,
      967,  968,    0,  968,  968,  968,  969,  969,  969,  969,
      969,  970,    0,  970,  971,  971,  971,  971,  971,  972,
      972,  973,  973,  973,  973,  973,  974,  974,  974,  974,

      974,  975,    0,  975,  975,  975,  976,  976,  976,  976,
      976,  977,  977,  977,  977,  977,  960,  960,  960,  960,
      960,  960,  960,  960,  960,  960,  960,  960,  960,  960,
      960,  960,  960,  960,  960,  960,  960,  960,  960,  960,
      960,  960,  960,  960,  960,  960,  960,  960,  960,  960,
      960,  960,  960,  960,  960,  960,  960,  960,  960,  960,
      960,  960,  960,  960,  960,  960,  960,  960
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#define INITIAL 0
//debug static int DC = 0; 
/*
   makeedit.l : This file is part of pstoedit
   Simple parser to parse the intermediate flat PostScript and call the backend
   output routines.

   Copyright (C) 1993 - 2006 Wolfgang Glunz, wglunz34_AT_pstoedit.net

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

*/
#include "cppcomp.h"
#include I_iostream
#include I_fstream

#include I_string_h

#include <math.h>

USESTD

#include "psfront.h"
#include "miscutil.h"

static float  origx, origy;
static char   *start_of_text;
static char   *end_of_text;
static float  number;

#define YY_SKIP_YYWRAP
static int yywrap() { return 1;}

static inline int toInt(const float f) { 
	return (f > 0.0f) ? (int)(f+0.5f) : (int)(f-0.5f);
}



static inline float minf(float f1, float f2) { return (f1<f2) ? f1:f2; }
static const int debuglexer = 0;

#define YY_NEVER_INTERACTIVE 1
// to avoid usage of isatty

#define YY_NO_UNPUT
// to avoid compiler warning

// define YY_DECL int yylex YY_PROTO(( *outputdriver ))
#define YY_DECL int PSFrontEnd::yylex()

#define CHECKconstraints if (!constraintsChecked) { errf << "input file did not contain a backendconstraints directive. Cannot proceed. " << endl; return 1; }

//lint -emacro(773, BEGIN)
// Expression-like macro 'BEGIN' not parenthesized
//lint -emacro(553,YY_STACK_USED)
//lint -emacro(553,YY_MAIN)
//lint -emacro(553,YY_ALWAYS_INTERACTIVE)

//lint -e801 // goto is used in generated state machine
//lint -esym(613,b)  // use of null pointer
//lint -esym(613,buf) //

#define READPATH 1

#define READIMAGE 2

#define READPROLOG 3

#define READBBOXNUMBERS 4

#define READBBOX 5


/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;



	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 961 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3217 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
{ 
	// not in READPROLOG !!
// Work around for Linux libg++ bug
			 number = (float) atof(yytext);
// Original
//			 istrstream s(yytext);
//			 s >> number;

 // cout << "adding number   : " << number << " " << yytext << endl;
			 
			 addNumber(number );
			}
	YY_BREAK
case 2:
YY_RULE_SETUP
{}
	YY_BREAK
case 3:
YY_RULE_SETUP
{ BEGIN(READBBOXNUMBERS); }
	YY_BREAK
case 4:
YY_RULE_SETUP
{ 
	const float ury = popUnScaled(); 
	const float urx = popUnScaled(); 
	bboxes_ptr[currentPageNumber].ur = Point(urx,ury);	
	
	const float lly = popUnScaled(); 
	const float llx = popUnScaled();
	bboxes_ptr[currentPageNumber].ll = Point(llx,lly);

//	cerr << llx <<  " " << lly <<  " " << urx <<  " " << ury << endl;
	currentPageNumber++;
	BEGIN(READBBOX);
}
	YY_BREAK
case 5:
YY_RULE_SETUP
{ }
	YY_BREAK
case 6:
YY_RULE_SETUP
{ 
//	cout << " <READBBOXNUMBERS> " << yytext << endl;
}
	YY_BREAK
case 7:
YY_RULE_SETUP
{
			const int flattened = toInt(popUnScaled());
			const int textastext = toInt(popUnScaled());
			if (!driverDesc->backendSupportsText    && textastext) {
				errf << "Warning: this preprocessed input file contains text but the selected backend does NOT support this - Hint: use -dt option for preprocessing" << endl;
			}
			if (!driverDesc->backendSupportsCurveto && !flattened) {
				errf << "Warning: this preprocessed input file possibly contains curves but the selected backend does NOT support this. Curves will be converted to a set of straight lines." << endl;
				// return(1);
			}
			constraintsChecked=true;
			}
	YY_BREAK
case 8:
YY_RULE_SETUP
{ 
			CHECKconstraints
			backend->showpage();

			currentPageNumber++;
			if (currentPageNumber <= drvbase::totalNumberOfPages) {
			if ( splitpages ) {
				if(outfilename) {
					if (strstr(outfilename,"%d") == NIL) {
						errf << "Warning: no %d found in name of output file and page feed found in input and either the selected format does not support multiple pages or the -split option was specified.\nPlease insert a %d in the name of the output file if you want to split pages into different files" << endl;
						// we cannot close the output file in this case otherwise
						// we would overwrite the previous results
					} else  {
						delete backend; backend = 0; // 
						ofstream * outputFilePtr = (ofstream *) &outFile;
						const unsigned int size = strlen(outfilename) + 30;
						char * newname = new char[ size ];
						sprintf_s(TARGETWITHLEN(newname,size),outfilename,currentPageNumber);
						// not needed here since done in main program convertBackSlashes(nameOfOutputFile);
						if (driverDesc->backendFileOpenType != DriverDescription::noopen ){ 
							outputFilePtr->close();
							if (driverDesc->backendFileOpenType == DriverDescription::binaryopen ) { 
#if (defined(unix) || defined(__unix__) || defined(_unix) || defined(__unix) || defined(__EMX__) || defined (NetBSD) ) && !defined(DJGPP)
// binary is not available on UNIX, only on PC
								outputFilePtr->open(newname,ios::out);
#else
								// use redundant ios::out because of bug in djgpp
								outputFilePtr->open(newname,ios::out | ios::binary);
#endif
								// errf << "opened " << newname << " for binary output" << endl;
							} else {
								outputFilePtr->open(newname);
								// errf << "opened " << newname << " for output" << endl;
							}
							if (outFile.fail() ) {
								errf << "Could not open file " << newname << " for output" << endl;
								delete [] newname;
								return 1;
							} // fail
						} // backend opens file by itself
						backend =  driverDesc->CreateBackend(driveroptions,*outputFilePtr,errf,infilename,newname,globaloptions);
						delete [] newname;
						if (!backend->driverOK()) {
							errf << "Creation of driver for new page failed " << endl;
							return (1);
						}
						backend->currentPageNumber = currentPageNumber - 1; // backend will add one again in open_page
					} // file name contains %d
				} else {
					errf << "Cannot split pages if output is standard output" << endl;
					return(1);
				} // outfilename
			} // splitpages
			} else {
				// ignore any showpage for pages greater than totalNumberOfPages
				if (backend->verbose) errf << "page " << currentPageNumber << " is greater than expected maximum number of pages " << drvbase::totalNumberOfPages << endl;
				return 0; // normal return code;
			}
		      }
	YY_BREAK
case 9:
YY_RULE_SETUP
{ 
			if (backend->numberOfElementsInPath() != 0) {
				errf << "Error, path number " << pathnumber << " was not cleared correctly" << endl;
			}

			pathnumber++;
			BEGIN(READPATH); 
			backend->setIsPolygon(false);
			backend->setPathNumber(pathnumber);
			}
	YY_BREAK
case 10:
YY_RULE_SETUP
{
			/* old version: /Helvetica findfont 14 scalefont setfont */
			/* (Helvetica) cvn findfont  [  3.0 8.31384 -5.19615 4.8 106.699 455.692 ] makefont setfont */
			/* new version because sometimes the new name contains a % */
			if (!non_standard_font) {
			// in the case of a non standard font, the setCurrentFontName was
			// done during handling of nonstandard font
				start_of_text = strchr (yytext,(int)'(') + 1 ;
				end_of_text = strrchr (yytext,(int)')') ;
				if (end_of_text) *end_of_text = (char) 0;
				backend->setCurrentFontName(start_of_text,0);
			}
			non_standard_font = 0; // reset 
			}
	YY_BREAK
case 11:
YY_RULE_SETUP
{
				//may lead to a lot of messages : 
				if (backend->verbose) errorMessage(yytext);
				// wogl;
			}
	YY_BREAK
case 12:
YY_RULE_SETUP
{
				BEGIN(READPROLOG);
			}
	YY_BREAK
case 13:
YY_RULE_SETUP
{
				BEGIN(INITIAL);
			}
	YY_BREAK
case 14:
YY_RULE_SETUP
{ 
			/* fprintf(stderr,"%s\n",yytext);  */
			start_of_text = yytext+2;
			end_of_text =  strrchr (yytext,(int)' ') ;
			if (end_of_text) *end_of_text = (char) 0;
			backend->setCurrentFontFamilyName(start_of_text);
			}
	YY_BREAK
case 15:
YY_RULE_SETUP
{ 
			/* fprintf(stderr,"%s\n",yytext);  */
			start_of_text = yytext+2;
			end_of_text =  strrchr (yytext,(int)' ') ;
			if (end_of_text) *end_of_text = (char) 0;
			backend->setCurrentFontFullName(start_of_text);
			}
	YY_BREAK
case 16:
YY_RULE_SETUP
{ 
			/* fprintf(stderr,"%s\n",yytext);  */
			start_of_text = yytext+2;
			end_of_text =  strrchr (yytext,(int)' ') ;
			if (end_of_text) *end_of_text = (char) 0;
			backend->setCurrentFontWeight(start_of_text);
			}
	YY_BREAK
case 17:
YY_RULE_SETUP
{
			/* % Times-Roman Times-Roman@0 nonstandard font */
			/* % Bla Bla nonstandard font */ /* if it is not derived from a standard font */
			start_of_text = yytext+2;
			end_of_text =  strchr (start_of_text,(int)' ') ;
			if (end_of_text) {
				*end_of_text = (char) 0;
				char* start_of_secondname = end_of_text + 1;
				char* end_of_secondname = strchr (start_of_secondname,(int)' ') ;
				if (end_of_secondname) {
					*end_of_secondname = (char) 0;
					non_standard_font = 1; // this avoids a further setting of CurrentFontName
					if (strcmp(start_of_text,start_of_secondname) == 0 ) {
						// both names are equal, so it's not a derived font
						backend->setCurrentFontName(start_of_text,1);
					} else {
						// it's a derived font, so use the base name
						backend->setCurrentFontName(start_of_text,0);
					}
				} else {
					errf << "pstoedit: internal error - font statement did not follow expected syntax" << endl;
				}
			} else {
				errf << "pstoedit: internal error - font statement did not follow expected syntax" << endl;
			}
			}
	YY_BREAK
case 18:
YY_RULE_SETUP
{

			backend->beginClipPath();

			}
	YY_BREAK
case 19:
YY_RULE_SETUP
{
			backend->setCurrentShowType(drvbase::eofill);
			}
	YY_BREAK
case 20:
YY_RULE_SETUP
{
			backend->setCurrentShowType(drvbase::fill);
			}
	YY_BREAK
case 21:
YY_RULE_SETUP
{
			backend->setCurrentShowType(drvbase::stroke);
			}
	YY_BREAK
case 22:
YY_RULE_SETUP
{
				errf << yytext;
			}
	YY_BREAK
case 23:
YY_RULE_SETUP
{
			 addNumber(0.0f ); // pseudo false
			}
	YY_BREAK
case 24:
YY_RULE_SETUP
{
			 addNumber(1.0f ); // pseudo true
			 }
	YY_BREAK
case 25:
YY_RULE_SETUP
{ // begin of some Data Comment, just ignore the marker
			}
	YY_BREAK
case 26:
YY_RULE_SETUP
{
/*
sequence:

../tests/image/colorimage.ps.ps:%colorimage:begin
../tests/image/colorimage.ps.ps:%colorimage:ncomp
../tests/image/colorimage.ps.ps:%colorimage:multi
../tests/image/colorimage.ps.ps:%colorimage:imagematrix
../tests/image/colorimage.ps.ps:%colorimage:normalized image currentmatrix
../tests/image/colorimage.ps.ps:%colorimage:bits
../tests/image/colorimage.ps.ps:%colorimage:height
../tests/image/colorimage.ps.ps:%colorimage:width
../tests/image/colorimage.ps.ps:%colorimage:data
../tests/image/colorimage.ps.ps:%colorimage:end 

../tests/image/hw.ps.ps:%image:begin
../tests/image/hw.ps.ps:%image:imagematrix
../tests/image/hw.ps.ps:%image:normalized image currentmatrix
../tests/image/hw.ps.ps:%image:bits 
../tests/image/hw.ps.ps:%image:height
../tests/image/hw.ps.ps:%image:width
../tests/image/hw.ps.ps:%image:data
../tests/image/hw.ps.ps:%image:data
../tests/image/hw.ps.ps:%image:end

../tests/image/hwuse.eps.ps:%imagemask:begin
../tests/image/hwuse.eps.ps:%imagemask:imagematrix
../tests/image/hwuse.eps.ps:%imagemask:normalized image currentmatrix
../tests/image/hwuse.eps.ps:%imagemask:polarity
../tests/image/hwuse.eps.ps:%imagemask:height
../tests/image/hwuse.eps.ps:%imagemask:width
../tests/image/hwuse.eps.ps:%imagemask:data
../tests/image/hwuse.eps.ps:%imagemask:data
../tests/image/hwuse.eps.ps:%imagemask:end

%begin dealing with image from dict
%fileimage:begin
% DC  640 0 0 -480 0 480
%fileimage:imagematrix
%fileimage:filename but.dump_1.png
% DC  640
%fileimage:width
% DC  480
%fileimage:height
%fileimage:end
grestore %}
%end dealing with image from dict


*/
				if (debuglexer) { 
					cerr << "handling " << yytext ;
					pstack();
				}
				backend->imageInfo.isFileImage = false ;
				backend->imageInfo.type = colorimage;
				// ncomp will be written later
				// bits will be written later
				backend->imageInfo.polarity = true; 
				BEGIN(READIMAGE); 
			}
	YY_BREAK
case 27:
YY_RULE_SETUP
{
				if (debuglexer) { 
					cerr << "handling " << yytext ;
					pstack();
				}
				backend->imageInfo.isFileImage = true ;
				backend->imageInfo.type = normalimage;
				backend->imageInfo.ncomp = 1;
				// bits will be written later
				backend->imageInfo.polarity = true; 
				BEGIN(READIMAGE); 
			}
	YY_BREAK
case 28:
YY_RULE_SETUP
{
				if (debuglexer) { 
					cerr << "handling " << yytext ;
					pstack();
				}
				backend->imageInfo.isFileImage = false ;
				backend->imageInfo.type = normalimage;
				backend->imageInfo.ncomp = 1;
				// bits will be written later
				backend->imageInfo.polarity = true; 
				BEGIN(READIMAGE); 
			}
	YY_BREAK
case 29:
YY_RULE_SETUP
{
				if (debuglexer) { 
					cerr << "handling " << yytext ;
					pstack();
				}
				backend->imageInfo.isFileImage = false ;
				backend->imageInfo.type = imagemask;
				backend->imageInfo.ncomp = 1;
				// polarity will be written later
				backend->imageInfo.bits = 1;
				BEGIN(READIMAGE); 
			}
	YY_BREAK
case 30:
YY_RULE_SETUP
{
				if (debuglexer) { 
					cerr << "handling " << yytext ;
					pstack();
				}

				// replace newline with eos
				yytext[strlen(yytext)-1] = '\0';
				//cout << "filename: {" << yytext << "}" << endl;
				backend->imageInfo.FileName = yytext+strlen("%fileimage:filename")+1;
			}
	YY_BREAK
case 31:
YY_RULE_SETUP
{
				if (debuglexer) { 
					cerr << "handling " << yytext ;
					pstack();
				}
				backend->imageInfo.ncomp = (short) toInt(popUnScaled());
			}
	YY_BREAK
case 32:
YY_RULE_SETUP
{ // only set for imagemask
				if (debuglexer) { 
					cerr << "handling " << yytext ;
					pstack();
				}
				backend->imageInfo.polarity = toInt(popUnScaled()) > 0.5 ;  // convert from float to bool
			}
	YY_BREAK
case 33:
YY_RULE_SETUP
{
				if (debuglexer) { 
					cerr << "handling " << yytext ;
					pstack();
				}
				(void)pop(); // not used so far
			}
	YY_BREAK
case 34:
YY_RULE_SETUP
{
				if (debuglexer) { 
					cerr << "handling " << yytext ;
					pstack();
				}
				for (unsigned int i = 0; i < 6 ; i++ ) {
					backend->imageInfo.imageMatrix[5-i] = popUnScaled();
				}
			}
	YY_BREAK
case 35:
YY_RULE_SETUP
{
				if (debuglexer) { 
					cerr << "handling " << yytext ;
					pstack();
				}
				for (unsigned int i = 0; i < 6 ; i++ ) {
					backend->imageInfo.normalizedImageCurrentMatrix[5-i] = popUnScaled();
				}
			}
	YY_BREAK
case 36:
YY_RULE_SETUP
{ // only set for normalimage and colorimage
				if (debuglexer) { 
					cerr << "handling " << yytext ;
					pstack();
				}
				backend->imageInfo.bits = (short) toInt(popUnScaled());
			}
	YY_BREAK
case 37:
YY_RULE_SETUP
{
				if (debuglexer) { 
					cerr << "handling " << yytext ;
					pstack();
				}
				backend->imageInfo.height = toInt(popUnScaled());
			}
	YY_BREAK
case 38:
YY_RULE_SETUP
{
				if (debuglexer) { 
					cerr << "handling " << yytext ;
					pstack();
				}
				backend->imageInfo.width = toInt(popUnScaled());
			}
	YY_BREAK
case 39:
YY_RULE_SETUP
{
			CHECKconstraints
				if (debuglexer) { 
					cerr << "handling " << yytext ;
					pstack();
				}
//cerr << "handling DC " << DC++ << endl;
//cerr << "handling " << yytext ;
//cerr << "strlen " << strlen(yytext) << endl ;
				unsigned int size = backend->imageInfo.height * ((backend->imageInfo.ncomp * backend->imageInfo.width  * backend->imageInfo.bits + 7 ) / 8);
				if (backend->imageInfo.data == 0) {
// cerr << " allocating " << size << " for image data " << endl;
					backend->imageInfo.data = new unsigned char[size];
					if (backend->imageInfo.data==0) {
						cerr << "out of memory for image data" << endl;
						return(1);
					}
					backend->imageInfo.nextfreedataitem = 0;
					// init
//					for (unsigned int i = 0 ; i < size; i++) {
//						backend->imageInfo.data[i] = 0;
//					}
				}
				const char * cp = yytext;
				// search for ' '
				while (cp && (*cp != ' ')) cp++; 
				// now cp points to blank
				cp++;
//cerr << "effective length " << strlen(cp) << endl;
				do {
					const char chigh = *cp;
					const unsigned int high = hextoint(*cp);
					cp++;
					if (*cp == '\0') {
						cerr << "data format error " << endl;
						return(1);
					}
					const char clow = *cp;
					const unsigned int low = hextoint(*cp);
					cp++; 
					if ( backend->imageInfo.nextfreedataitem < size ) {
						backend->imageInfo.data[backend->imageInfo.nextfreedataitem] = (unsigned char) (high * 16 + low);
//						cerr << backend->imageInfo.nextfreedataitem << ":" << chigh<< clow << endl;
						backend->imageInfo.nextfreedataitem++;
					}  else {
						cerr << "too much data: ignoring " << chigh << clow << endl;
					}
				} while (cp && (*cp != '\0'));

			}
	YY_BREAK
case 40:
YY_RULE_SETUP
{
				if (debuglexer) { 
					cerr << "handling " << yytext ;
					pstack();
				}

				backend->dumpImage();
			 	BEGIN(INITIAL);
			}
	YY_BREAK
case 41:
YY_RULE_SETUP
{ 
				if (debuglexer) cerr << "comment ignored " << yytext;
			}
	YY_BREAK
case 42:
YY_RULE_SETUP
{
			// setCurrentFontSize(number );
			float matrix[6];
			matrix[5] = pop();
			matrix[4] = pop();
			matrix[3] = pop(); // sy * cos(phi)
			matrix[2] = pop(); // sy * -sin(phi)
			matrix[1] = pop(); // sx * sin(phi)
			matrix[0] = pop(); // sx * cos(phi)
			backend->setCurrentFontMatrix(matrix);
			const float fsizex = (float) sqrt((matrix[0] * matrix[0]) + (matrix[1] * matrix[1]));
			const float fsizey = (float) sqrt((matrix[2] * matrix[2]) + (matrix[3] * matrix[3]));
			const float todegrees =   180.0f / 3.14159265358979323846f ;
			float phix = (matrix[0] != 0.0f) ? (todegrees * (float) atan(matrix[1] / matrix[0]) ) : (matrix[1] > 0 ? 90.0f : -90.0f );
//			float phiy = todegrees * atan(-1.0 * matrix[2] / matrix[3]);
			if (matrix[0] < 0.0f ) phix = 180 + phix; // if cos (phi) < 0 than add 180
//			if (matrix[3] < 0.0f ) phiy = 180 + phiy;
			if (phix < 0.0f ) phix = 360 + phix;
//			if (phiy < 0.0f ) phiy = 360 + phiy;
//			for (int i = 0; i < 6; i++ ) cout << "matrix [" << i << "] " << matrix[i] << " ";
//			cout << fsizex << " " << fsizey  << " " << endl;
//			cout << phix << " " << phiy  << " "  << endl;
			backend->setCurrentFontSize((fsizex + fsizey)/2.0f);
			backend->setCurrentFontAngle(phix);
			}
	YY_BREAK
case 43:
YY_RULE_SETUP
{
//obsolete
			// setCurrentFontSize(number );
			backend->setCurrentFontSize(pop());
			// pop(); 
			}
	YY_BREAK
case 44:
YY_RULE_SETUP
{
			const float B = popUnScaled();
			const float G = popUnScaled();
			const float R = popUnScaled();
			/* printf("%s %f %f %f\n","setting RGB to ",R,G,B); */
			backend->setRGB(R,G,B);
			}
	YY_BREAK
case 45:
YY_RULE_SETUP
{
			const float K = popUnScaled();
			const float Y = popUnScaled();
			const float M = popUnScaled();
			const float C = popUnScaled();
			const unsigned int colormodel = 3;
			// http://www.efg2.com/Lab/Library/Color/AndComputers.htm
			switch (colormodel) {
			case 1: {
			const float R = 1.0f - minf(1.0f,C+K); // according to PLRM page 307
			const float G = 1.0f - minf(1.0f,M+K);
			const float B = 1.0f - minf(1.0f,Y+K);
	//		printf("%s %f %f %f\n","setting RGB to ",R,G,B);
						backend->setRGB(R,G,B);
						}
						break;
			case 2: {
			
			/* alternative formula
	http://research.microsoft.com/~hollasch/cgindex/color/cmyk.html
	http://www.ghostscript.com/pipermail/gs-cvs/2002-November/002588.html
	
	
	http://www.paris-pc-gis.com/MI_Enviro/Colors/color_models.htm
			  R = (1.0 - C) * (1.0 - K), etc. 
			*/

			const float R = (1.0f - C)*(1.0f - K); 
			const float G = (1.0f - M)*(1.0f - K);
			const float B = (1.0f - Y)*(1.0f - K);
	//		printf("%s %f %f %f\n","setting RGB to ",R,G,B);
						backend->setRGB(R,G,B);
			}
			break;
			case 3: {
			
/*

	http://www.neuro.sfc.keio.ac.jp/~aly/polygon/info/color-space-faq.html

RGB -> CMYK				            | CMYK -> RGB
Black=minimum(1-Red,1-Green,1-Blue)	| Red=1-minimum(1,Cyan*(1-Black)+Black)
Cyan=(1-Red-Black)/(1-Black)	    | Green=1-minimum(1,Magenta*(1-Black)+Black)
Magenta=(1-Green-Black)/(1-Black)	| Blue=1-minimum(1,Yellow*(1-Black)+Black)
Yellow=(1-Blue-Black)/(1-Black)	    |
*/

			const float R = 1.0f - minf(1.0f,C*(1-K)+K); 
			const float G = 1.0f - minf(1.0f,M*(1-K)+K);
			const float B = 1.0f - minf(1.0f,Y*(1-K)+K);
	//		printf("%s %f %f %f\n","setting RGB to ",R,G,B);
						backend->setRGB(R,G,B);
				}
			break;
			default: break;
			}
			
			}
	YY_BREAK
case 46:
YY_RULE_SETUP
{
				yytext[strlen(yytext) -9] = '\0'; // strip of trailing setdash
				backend->setDash(yytext+1); // don't copy leading space
			}
	YY_BREAK
case 47:
YY_RULE_SETUP
{
			backend->setCurrentMiterLimit(number);
			(void) pop(); 
			}
	YY_BREAK
case 48:
YY_RULE_SETUP
{
			backend->setCurrentLineJoin((int) (number +0.5));
			(void) pop(); 
			}
	YY_BREAK
case 49:
YY_RULE_SETUP
{
			backend->setCurrentLineCap((int) (number +0.5));
			(void) pop(); 
			}
	YY_BREAK
case 50:
YY_RULE_SETUP
{
			backend->setCurrentLineWidth(pop() );
//			setCurrentLineWidth(number  );
//			pop(); 
			}
	YY_BREAK
case 51:
YY_RULE_SETUP
{
			float height = pop(); 
			if (height < 1.0 ) { height = 792 * backend->getScale() ; }
			backend->setCurrentDeviceHeight(height);
			float width  = pop(); 
			if (width < 1.0 ) { width = 612 * backend->getScale() ; }
			backend->setCurrentDeviceWidth(width);
			if (backend->verbose) errf << "handling setPageSize (w,h)(" << width  << "," << height << ")"<< endl;
			}
	YY_BREAK
case 52:
YY_RULE_SETUP
{
			const bool  mappedtoisolatin1 = pop() > 0.5; // float to bool
			const float y_end = pop();
			const float x_end = pop();
			const float ay = pop();
			const float ax = pop();
			const int   Char = (int) (popUnScaled()   +0.5);	
			const float cy = pop();
			const float cx = pop();
			backend->setMappedtoisolatin1(mappedtoisolatin1);
			backend->setCurrentWidthParams(ax,ay,Char,cx,cy,x_end,y_end);
			}
	YY_BREAK
case 53:
YY_RULE_SETUP
{ 
			CHECKconstraints
			start_of_text = strchr (yytext,(int)'(') + 1 ;
			end_of_text = strrchr (yytext,(int)')') ;
			if (end_of_text) *end_of_text = (char) 0;
			const float y = pop(); /* just the last moveto (0 0 in case of makefont) */
			const float x = pop(); /* just the last moveto (0 0 in case of makefont) */
			/* backend->dumpText(start_of_text,x,y); */
			backend->pushHEXText(start_of_text,x + backend->getCurrentFontMatrix()[4],y + backend->getCurrentFontMatrix()[5]);
			}
	YY_BREAK
case 54:
YY_RULE_SETUP
{ 
// (68656c6c6f20776f726c64) [ /h /e /l /l /o /space /w /o /r /l /d ] awidthshowhexwithglyphs
			CHECKconstraints
			start_of_text = strchr (yytext,(int)'(') + 1 ;
			end_of_text = strrchr (yytext,(int)')') ;
			char * start_of_glyphs = strchr(yytext,(int)'[') + 2;
			char * end_of_glyphs = strrchr(yytext,(int)']');
			if (end_of_glyphs) *(end_of_glyphs-1) = (char) 0;
			if (end_of_text) *end_of_text = (char) 0;
			//cout << "text :" << start_of_text << " glyphs : " << start_of_glyphs << endl;
			const float y = pop(); /* just the last moveto (0 0 in case of makefont) */
			const float x = pop(); /* just the last moveto (0 0 in case of makefont) */
			/* backend->dumpText(start_of_text,x,y); */
			backend->pushHEXText(start_of_text,x + backend->getCurrentFontMatrix()[4],y + backend->getCurrentFontMatrix()[5], start_of_glyphs);

			}
	YY_BREAK
case 55:
YY_RULE_SETUP
{ 
			CHECKconstraints
			start_of_text = strchr (yytext,(int)'(') + 1 ;
			end_of_text = strrchr (yytext,(int)')') ;
			if (end_of_text) *end_of_text = (char) 0;
			const float y = pop(); /* just the last moveto (0 0 in case of makefont) */
			const float x = pop(); /* just the last moveto (0 0 in case of makefont) */
			/* backend->dumpText(start_of_text,x,y); */
			backend->pushText(strlen(start_of_text),start_of_text,x + backend->getCurrentFontMatrix()[4],y + backend->getCurrentFontMatrix()[5]);
			/* old - zeropatch backend->pushText(start_of_text,x + backend->getCurrentFontMatrix()[4],y + backend->getCurrentFontMatrix()[5]); */
			}
	YY_BREAK
case 56:
YY_RULE_SETUP
{
// obsolete
			backend->setCurrentFontAngle(number);
			(void) pop();
			}
	YY_BREAK
case 57:
YY_RULE_SETUP
{
//obsolete
			/* Because this is in the preamble, only pop 
			   this has put something on the stack. */
			if (nextFreeNumber >= 2)
				{ (void)pop(); (void)pop(); }
			}
	YY_BREAK
case 58:
YY_RULE_SETUP
{
//obsolete
			/* Because this is in the preamble, only pop 
			   this has put something on the stack. */
			if (nextFreeNumber >= 2)
				{ (void)pop(); (void)pop(); }
			}
	YY_BREAK
case 59:
YY_RULE_SETUP
{ /* cout << "ignored '" << yytext << "'"; */ /* ignore any other stuff */ }
	YY_BREAK
case 60:
YY_RULE_SETUP
{ 
			CHECKconstraints
			// save coordinates for possible closepath
			origy = pop();
			origx = pop();
			if (backend->numberOfElementsInPath() > 1) {
				// this is an intermediate moveto
				// if backend supports subpaths add it
				// else dump last path and start a new one
				if (backend->globaloptions.simulateSubPaths || backend->Pdriverdesc->backendSupportsSubPathes) {
//					Point p(origx,origy);
					backend->addtopath(new Moveto(origx,origy));  
				} else {
					// dumppath
					backend->dumpPath();
					// start new path
//					Point p(origx,origy);
					backend->addtopath(new Moveto(origx,origy));  
					
				}
			} else {
				// it is a starting moveto
//				Point p(origx,origy);
				backend->addtopath(new Moveto(origx,origy));  
			}
			currentpoint = Point(origx,origy);
		   }
	YY_BREAK
case 61:
YY_RULE_SETUP
{
			float y = pop();
			float x = pop();
//			Point p(x,y);
			backend->addtopath(new Lineto(x,y)); 
			currentpoint = Point(x,y);
			}
	YY_BREAK
case 62:
YY_RULE_SETUP
{ 

			Point p[3];
			for (unsigned int i = 3; i > 0; i--) { 
				// !!! i = 2 to i>= 0 does not work for unsigned
				float y = pop();
				float x = pop();
				p[i-1] = Point(x,y);
			}

			if (backend->Pdriverdesc->backendSupportsCurveto) {
				backend->addtopath(new Curveto(p)); // pass p as array
			} else {

				const unsigned int sections = 10;

				const Point & cp1 = p[0];
				const Point & cp2 = p[1];
				const Point & ep  = p[2];

				for (unsigned int s = 0; s <= sections; s++) {
					const float t = 1.0f * s / sections;
					const Point pt = PointOnBezier(t, currentpoint, cp1, cp2, ep);
					backend->addtopath(new Lineto(pt.x_,pt.y_)); 
				}
//				errf << "illegal input received. curveto not expected by this backend\n";
//				return(1);			
			}
			currentpoint = Point(p[2].x_,p[2].y_);

			}
	YY_BREAK
case 63:
YY_RULE_SETUP
{
			 Point startPoint(origx,origy);
			 const basedrawingelement & lastelem = backend->pathElement(backend->numberOfElementsInPath() -1 );
			// check for last == first. Then no additional
			// lineto is needed. and isPolygon can be set to true
			 if  ( (lastelem.getType() == lineto) && (lastelem.getPoint(0) == startPoint) ) {
				// remove last lineto - 
				// a closepath is sometimes nicer than a lineto (see closevsline.ps)
				if (backend->verbose) errf << "removing obsolete lineto " << endl; 
				backend->removeFromElementFromPath();
				// no need to close the path, it's already closed
			 } /* else */ {
				if (backend->globaloptions.simulateSubPaths || backend->Pdriverdesc->backendSupportsSubPathes) {
			 		backend->addtopath(new Closepath()); 
				} else {
			 		backend->addtopath(new Lineto(origx,origy)); // pass p as array
				}

			 }
			 backend->setIsPolygon(true);
			 /* show is done by next stroke, fill or moveto */
 			 currentpoint = startPoint;
			}
	YY_BREAK
case 64:
YY_RULE_SETUP
{ 
			CHECKconstraints
			 BEGIN(INITIAL);
			 backend->dumpPath();
                       	};
	YY_BREAK
case 65:
YY_RULE_SETUP
{ 
			CHECKconstraints
			 BEGIN(INITIAL);
			 backend->dumpPath(); 
                       	};
	YY_BREAK
case 66:
YY_RULE_SETUP
{ 
			CHECKconstraints
			 BEGIN(INITIAL);
			 backend->dumpPath(); 
                       	};
	YY_BREAK
case 67:
YY_RULE_SETUP
{ 
				 backend->Save();
                       	};
	YY_BREAK
case 68:
YY_RULE_SETUP
{ 
				 backend->Save();
                       	};
	YY_BREAK
case 69:
YY_RULE_SETUP
{ 
				 backend->Restore();
                       	};
	YY_BREAK
case 70:
YY_RULE_SETUP
{ 
				 backend->Restore();
                       	};
	YY_BREAK
case 71:
YY_RULE_SETUP
{ 
				 backend->endClipPath(drvbase::clip);
				 BEGIN(INITIAL);
                    	};
	YY_BREAK
case 72:
YY_RULE_SETUP
{ 
				 backend->endClipPath(drvbase::eoclip);
				 BEGIN(INITIAL);
                    	};
	YY_BREAK
case 73:
YY_RULE_SETUP
{ }
	YY_BREAK
case 74:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(READPATH):
case YY_STATE_EOF(READIMAGE):
case YY_STATE_EOF(READPROLOG):
case YY_STATE_EOF(READBBOXNUMBERS):
case YY_STATE_EOF(READBBOX):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 961 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 961 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 960);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef _WIN32
#include <unistd.h>
#else
#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif

void PSFrontEnd::yylexcleanup()
{
//	if (yy_state_buf) yy_flex_free(yy_state_buf);
	yy_delete_buffer( yy_current_buffer );

// reset the global initialized statics to their initial value
// so the lexer can be called again.
	yy_c_buf_p	= (char *) 0;
	yy_init		= 1;	/* whether we need to initialize */
	yy_start	= 0;	/* start state number */
}

unsigned int PSFrontEnd::readBBoxes(BBox * bboxes)
{
	BEGIN(READBBOX);
	bblexmode = true;
	currentPageNumber = 0;
	nextFreeNumber=0;
	bboxes_ptr = bboxes;
	yy_init = 1;
	(void) yylex();
	yylexcleanup();
	return currentPageNumber;
}
void PSFrontEnd::run(bool mergelines)
{
	BEGIN(INITIAL);
	bblexmode = false;
	currentPageNumber = 1;
	nextFreeNumber=0;
	yy_init = 1;
	backend->startup(mergelines);
	if (!yylex()) {
		// yylex returns 0 on normal EOF
		// 1 in case of errors
		backend->finalize();
	}
	delete backend;
	backend = 0;
}

void PSFrontEnd::addNumber(float a_number)
{
  // printf("Adding %f\n",number);
 if (nextFreeNumber < maxPoints) { 
	// cout << "adding number : " << a_number << endl;
     	numbers[nextFreeNumber++] = a_number; 
     	// nextFreeNumber always points to the next free number
 } else { 
   	errf << "Too many numbers on stack. Please increase maxPoints in drvbase.h \n"; 
   	exit(1); 
 }
}

PSFrontEnd::PSFrontEnd(ostream& outfile_p, 
		ostream & errstream,
		const PsToEditOptions & globaloptions_p,
		const char * infilename_p,
		const char * outfilename_p,
		const DriverDescription * driverDesc_p,
		const char * driveroptions_p,
		const bool splitpages_p, 
		drvbase * backend_p)
	: outFile(outfile_p),
	  errf(errstream),
	  infilename(infilename_p),
	  outfilename(outfilename_p),
	  globaloptions(globaloptions_p),
	  driverDesc(driverDesc_p),
	  driveroptions(driveroptions_p),
	  splitpages(splitpages_p),
	  backend(backend_p),
	  currentPageNumber(1),
	  numbers((float*) 0),
      nextFreeNumber(0),
      pathnumber(0),
	  non_standard_font(false),
	  constraintsChecked(false),
	  bblexmode(false),
	  bboxes_ptr(0)
{
    numbers = new float[maxPoints]; // The number stack
    if ((numbers == 0)){
		errf << "new failed in PSFrontEnd::PSFrontEnd " << endl;
		exit(1);
    }
}

PSFrontEnd::~PSFrontEnd() {
#ifdef __INSURE__
	errf << "Deleting PSFrontEnd object and thus the numbers as well" << endl;
#endif
	delete [] numbers;
	numbers = 0;
	yylexcleanup();
	
	infilename=0;
	outfilename=0;
	driverDesc=0;
	driveroptions=0;
	backend=0;
	bboxes_ptr=0;
	
	
}

float PSFrontEnd::pop() 
{ 
  if (nextFreeNumber > 0) {
  	nextFreeNumber--;
  	return numbers[nextFreeNumber] * backend->getScale(); // the value we just pushed
  } else {
	errf << "Fatal error in PSFrontEnd::pop : nextFreeNumber would get < 0" << endl;
	assert(false);
	//exit(1);
  }
  return 0.0f; // never reached, just to make compiler quiet
}


float PSFrontEnd::popUnScaled() 
{
  if (nextFreeNumber > 0) {
  	nextFreeNumber--;
  	return numbers[nextFreeNumber]; // the value we just pushed
  } else {
	errf << "Fatal error in PSFrontEnd::popUnScaled : nextFreeNumber would get < 0" << endl;
	assert(false); //exit(1);
  }
  return 0.0f; // never reached, just to make compiler quiet
}

void PSFrontEnd::pstack()  const {
	for (unsigned int i = 0 ; i < nextFreeNumber ; i++ ) {
		cerr << "[" << i << "] " << numbers[i] << " " << numbers[i]* backend->getScale() << endl;
	}
}
